<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>祝眉目舒展，顺问冬安</subtitle>
        <icon>https://mangpumo.github.io/images/favicon.ico</icon>
        <link>https://MangPumo.github.io</link>
        <author>
          <name>Mang Pumo</name>
        </author>
        <description>欢迎来到 Mang Pumo 的个人博客!</description>
        <language>zh-CN</language>
        <pubDate>Wed, 07 Dec 2022 23:37:29 +0800</pubDate>
        <lastBuildDate>Wed, 07 Dec 2022 23:37:29 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/12/07/%E6%95%B0%E7%BB%84-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</guid>
            <title>数组_二分查找</title>
            <link>https://mangpumo.github.io/2022/12/07/%E6%95%B0%E7%BB%84-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</link>
            <pubDate>Wed, 07 Dec 2022 23:37:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;二分查找&#34;&gt;&lt;a href=&#34;#二分查找&#34; class=&#34;headerlink&#34; title=&#34;二分查找&#34;&gt;&lt;/a&gt;二分查找&lt;/h1&gt;&lt;h2 id=&#34;例题&#34;&gt;&lt;a href=&#34;#例题&#34; class=&#34;headerlink&#34; title=&#34;例题&#34;&gt;&lt;/a&gt;例题&lt;/h2&gt;&lt;p&gt;LEETCODE 704.二分查找&lt;/p&gt;
&lt;h2 id=&#34;二分第一种写法&#34;&gt;&lt;a href=&#34;#二分第一种写法&#34; class=&#34;headerlink&#34; title=&#34;二分第一种写法&#34;&gt;&lt;/a&gt;二分第一种写法&lt;/h2&gt;&lt;p&gt;第一种写法，我们定义 target 是在一个在左闭右闭的区间里，&lt;strong&gt;也就是[left, right]&lt;/strong&gt; （&lt;strong&gt;这个很重要非常重要&lt;/strong&gt;）。&lt;br&gt;区间的定义这就决定了二分法的代码应该如何写，&lt;strong&gt;因为定义*target&lt;/strong&gt;在**[left, right]&lt;strong&gt;区间&lt;/strong&gt;，所以有如下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while (left &amp;lt;&amp;#x3D; right) 要使用 &amp;lt;&amp;#x3D; ，因为left &amp;#x3D;&amp;#x3D; right是有意义的，所以使用 &amp;lt;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;if (nums[middle] &amp;gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int search(int* nums, int numsSize, int target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int left = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int right = numsSize-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //当left==right，区间[left, right]依然有效，所以用 &amp;lt;=&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(left &amp;lt;= right)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	//防止两个int相加造成溢出，等同于相加除2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int middle = left+(right-left)/2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(nums[middle] &amp;gt; target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = middle-1;//middle一定不是要找的数，所以找他前面一位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(nums[middle] &amp;lt; target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = middle+1;//同上&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;//nums[middle] == target&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;   //未找到下标，返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;二分第二种写法&#34;&gt;&lt;a href=&#34;#二分第二种写法&#34; class=&#34;headerlink&#34; title=&#34;二分第二种写法&#34;&gt;&lt;/a&gt;二分第二种写法&lt;/h2&gt;&lt;p&gt;如果说定义 target 是在一个在左闭右开的区间里，也就是[left, right) ，那么二分法的边界处理方式则截然不同。&lt;/p&gt;
&lt;p&gt;有如下两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;while (left &amp;lt; right)，这里使用 &amp;lt; ,因为left &amp;#x3D;&amp;#x3D; right在区间[left, right)是没有意义的&lt;/li&gt;
&lt;li&gt;if (nums[middle] &amp;gt; target) right 更新为 middle，因为当前nums[middle]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为middle，即：下一个查询区间不会去比较nums[middle]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在数组：1,2,3,4,7,9,10中查找元素2，如图所示：&lt;strong&gt;（注意和方法一的区别）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码如下：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int search(int* nums, int numsSize, int target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int left = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int right = numsSize;//看不同&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(left &amp;lt; right)&amp;#123;//定义target在左闭右开的区间里，即：[left, right)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    	//==时无意义，会越界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int middle = left+(right-left)/2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(nums[middle] &amp;gt; target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = middle;//开区间，不会取到middle&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else if(nums[middle] &amp;lt; target)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = middle+1;//前闭，所以会取到middle+1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;else&amp;#123;// nums[middle] == target&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            return middle;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;	//未找到下标，返回-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/12/07/%E6%9D%82%E8%B0%88-%E7%A9%BA%E9%97%B4%E6%8D%A2%E6%97%B6%E9%97%B4/</guid>
            <title>杂谈_空间换时间</title>
            <link>https://mangpumo.github.io/2022/12/07/%E6%9D%82%E8%B0%88-%E7%A9%BA%E9%97%B4%E6%8D%A2%E6%97%B6%E9%97%B4/</link>
            <pubDate>Wed, 07 Dec 2022 22:23:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;空间换时间样例&#34;&gt;&lt;a href=&#34;#空间换时间样例&#34; class=&#34;headerlink&#34; title=&#34;空间换时间样例&#34;&gt;&lt;/a&gt;空间换时间样例&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;比较懒，不想写太多，就整一个样例，统计字母串里出现次数最多的字母&lt;/p&gt;
&lt;h2 id=&#34;优化前&#34;&gt;&lt;a href=&#34;#优化前&#34; class=&#34;headerlink&#34; title=&#34;优化前&#34;&gt;&lt;/a&gt;优化前&lt;/h2&gt;&lt;p&gt;两层循环遍历字母串数组，统计出现最多次数字母的次数；&lt;br&gt;暴力算法就是两层循环枚举出现次数最多的字母；&lt;br&gt;显然时间复杂度太高，运算时间过长非常容易超时；&lt;br&gt;所以这里我们用空间换时间使用一个统计次数的数组，只需要遍历一次就可以了，时间复杂度只用O(n)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码如下&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/**找一串字母出现次数最多的字母**/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int max=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	char ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int record[26] = &amp;#123;0&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	char arr[1000];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	gets(arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int n = strlen(arr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(int i=0; i&amp;lt;n; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		record[arr[i]-&amp;#x27;a&amp;#x27;]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(int i=0; i&amp;lt;26; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(record[i] &amp;gt; max)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			max = record[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ans = i+&amp;#x27;a&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	printf(&amp;quot;%c %d\n&amp;quot;,ans,max);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/12/06/XTUOJ-1114%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F/</guid>
            <title>XTUOJ_1114字符串逆序</title>
            <link>https://mangpumo.github.io/2022/12/06/XTUOJ-1114%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F/</link>
            <pubDate>Tue, 06 Dec 2022 23:28:04 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;字符串逆序&#34;&gt;&lt;a href=&#34;#字符串逆序&#34; class=&#34;headerlink&#34; title=&#34;字符串逆序&#34;&gt;&lt;/a&gt;字符串逆序&lt;/h1&gt;&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;给你一个字符串，请将其第K个字符开始的长度为L的子串进行逆序。&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;有多组样例，第一行是一个整数，表示有多少个样例。每个样例占两行，第一行是个字符串，字符串全部由英文小写字符组成，长度不超过200。第二行是两个整数K和L，K从1开始计数，K+L-1不会超过字符串长度。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个字符串逆序以后的字符串结果。&lt;/p&gt;
&lt;h2 id=&#34;Sample-Input&#34;&gt;&lt;a href=&#34;#Sample-Input&#34; class=&#34;headerlink&#34; title=&#34;Sample Input&#34;&gt;&lt;/a&gt;Sample Input&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;abcabc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;abcabc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Sample-Output&#34;&gt;&lt;a href=&#34;#Sample-Output&#34; class=&#34;headerlink&#34; title=&#34;Sample Output&#34;&gt;&lt;/a&gt;Sample Output&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;bacabc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;acbacb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char str[203];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(n--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot; %s&amp;quot;,&amp;amp;str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int k,l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;k,&amp;amp;l);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int len = strlen(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;k-1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%c&amp;quot;,str[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=k+l-2;i&amp;gt;=k-1;i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%c&amp;quot;,str[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=k+l-1;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%c&amp;quot;,str[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/12/06/XTUOJ-1109%E5%85%B1%E5%90%8C%E7%9A%84%E5%89%8D%E7%BC%80/</guid>
            <title>XTUOJ_1109共同的前缀</title>
            <link>https://mangpumo.github.io/2022/12/06/XTUOJ-1109%E5%85%B1%E5%90%8C%E7%9A%84%E5%89%8D%E7%BC%80/</link>
            <pubDate>Tue, 06 Dec 2022 23:20:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;共同的前缀&#34;&gt;&lt;a href=&#34;#共同的前缀&#34; class=&#34;headerlink&#34; title=&#34;共同的前缀&#34;&gt;&lt;/a&gt;共同的前缀&lt;/h1&gt;&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;给你K个字符串，请求出它们的最长公共前缀。 输入 第一行是一个整数N，表示测试样例的个数。 每个测试样例的第一行是一个整数K（2 &amp;lt;&amp;#x3D; k &amp;lt;&amp;#x3D; 20），表示有多少个字符串；以后每行是一个字符串，每个字符串的长度不超过200个字符。 输出 每行输出一个样例的结果。先输出“Case #: ”，其中’#’为样例的序号（从1开始），冒号为英文冒号，后接一个空格；然后是对应样例的结果。如果没有公共前缀，则无需输出前缀，但Case信息仍需要输出。&lt;/p&gt;
&lt;h2 id=&#34;Sample-Input&#34;&gt;&lt;a href=&#34;#Sample-Input&#34; class=&#34;headerlink&#34; title=&#34;Sample Input&#34;&gt;&lt;/a&gt;Sample Input&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ACD&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ACDEF&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ACDFE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BCD&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Sample-Output&#34;&gt;&lt;a href=&#34;#Sample-Output&#34; class=&#34;headerlink&#34; title=&#34;Sample Output&#34;&gt;&lt;/a&gt;Sample Output&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Case 1: ACD&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Case 2: &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int top;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;, &amp;amp;top);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char original[202] = &amp;#123; 0 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char alphabet[202] = &amp;#123; 0 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char same[202] = &amp;#123; 0 &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int cnt = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (top--) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int length;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d&amp;quot;, &amp;amp;length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;, &amp;amp;original, 200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        length -= 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int resemble = 200;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;, &amp;amp;alphabet, 200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; 200; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (original[i] != alphabet[i]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                resemble = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                same[i] = alphabet[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        memset(alphabet, 0, sizeof(char));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while (length--) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scanf(&amp;quot;%s&amp;quot;, &amp;amp;alphabet, 200);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for (int i = 0; i &amp;lt;= resemble; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if (same[i] != alphabet[i]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    resemble = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            memset(alphabet, 0, sizeof(char));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;Case %d: &amp;quot;, cnt++);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i = 0; i &amp;lt; resemble; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(same[i] != 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%c&amp;quot;, same[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/12/06/XTUOJ-1108A-B/</guid>
            <title>XTUOJ_1108A+B</title>
            <link>https://mangpumo.github.io/2022/12/06/XTUOJ-1108A-B/</link>
            <pubDate>Tue, 06 Dec 2022 23:16:18 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;a-b&#34;&gt;&lt;a href=&#34;#a-b&#34; class=&#34;headerlink&#34; title=&#34;a+b&#34;&gt;&lt;/a&gt;a+b&lt;/h1&gt;&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;请计算a+b，但a和b是按不同的进制给出的。进制最小为2进制，最大为62进制，其中使用A-Z依次表示10到35，a-z表示36-61。请写出a+b的结果，结果按十进制输出。 输入 第一行是一个整数N，表示有多少个测试样例，以后每行是一个样例，每行是4个部分，分别为a的值，a的进制，b的值，b的进制。其中值都是用一个字符串表示，进制都是一个整数。4个部分之间用一个空格隔开，保证输入的合法，a、b和a+b的值都在-2^31到2^31-1之间。 输出 每行输出一个样例的结果。&lt;/p&gt;
&lt;h2 id=&#34;Sample-Input&#34;&gt;&lt;a href=&#34;#Sample-Input&#34; class=&#34;headerlink&#34; title=&#34;Sample Input&#34;&gt;&lt;/a&gt;Sample Input&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1000 2 1F 16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-1 10 20 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Sample-Output&#34;&gt;&lt;a href=&#34;#Sample-Output&#34; class=&#34;headerlink&#34; title=&#34;Sample Output&#34;&gt;&lt;/a&gt;Sample Output&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n,a,i,min = 201,j,temp,zdy = 1,num;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char str[22][202];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(n--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        min = 201;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        num = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i = 0;i &amp;lt; a;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scanf(&amp;quot;%s&amp;quot;,str[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;Case %d: &amp;quot;,zdy);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        zdy++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;a;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               if(strlen(str[i])&amp;lt; min)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                min = strlen(str[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(j = 0;j &amp;lt; min;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(i = 0;i &amp;lt; a-1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(str[i][j]==str[i+1][j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    num = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(num==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                   printf(&amp;quot;%c&amp;quot;,str[0][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/12/02/XTUOJ-1105%E5%88%86%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/</guid>
            <title>XTUOJ_1105分数加减法</title>
            <link>https://mangpumo.github.io/2022/12/02/XTUOJ-1105%E5%88%86%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/</link>
            <pubDate>Fri, 02 Dec 2022 12:39:39 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;分数加减法&#34;&gt;&lt;a href=&#34;#分数加减法&#34; class=&#34;headerlink&#34; title=&#34;分数加减法&#34;&gt;&lt;/a&gt;分数加减法&lt;/h1&gt;&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;给你两个分数，请计算两者和及差。 输入 第一行是一个整数K，表示样例的个数。以后每行一个样例，每行4个正整数，a、b、c、d，即计算分数a&amp;#x2F;b与c&amp;#x2F;d的和、差。4个整数都不超过10,000。 输出 每行输出一个样例的结果，先输出和，后输出差。如果结果的值为整数，那么只需要输出整数，如果结果的值为分数，需要输出x&amp;#x2F;y的形式，并保证x,y互质。&lt;/p&gt;
&lt;h2 id=&#34;Sample-Input&#34;&gt;&lt;a href=&#34;#Sample-Input&#34; class=&#34;headerlink&#34; title=&#34;Sample Input&#34;&gt;&lt;/a&gt;Sample Input&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2 1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 3 1 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 8 5 8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Sample-Output&#34;&gt;&lt;a href=&#34;#Sample-Output&#34; class=&#34;headerlink&#34; title=&#34;Sample Output&#34;&gt;&lt;/a&gt;Sample Output&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1/3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3/4 -1/2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int gcd(int a,int b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(a%b == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gcd(b,a%b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int K;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(K--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int a1,a2,b1,b2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int fm=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int k=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int gys=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int fzh=0,fzc=0,m,n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d %d %d %d&amp;quot;,&amp;amp;a1,&amp;amp;a2,&amp;amp;b1,&amp;amp;b2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fm = a2*b2;//通分&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fzh = a1*b2+b1*a2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fzc = a1*b2-b1*a2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(fzh%fm == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;//整数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%d &amp;quot;,fzh/fm);    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;//约分&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            n = fzh;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            m = fm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            gys = gcd(n,m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fzh /= gys;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fm /= gys;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%d/%d &amp;quot;,fzh,fm);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(fzc &amp;lt; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;//方便公约数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fzc = -fzc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        fm = a2*b2;//在上一步已经变化了，这里需要重新赋值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(fzc%fm == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fzc = k*fzc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%d\n&amp;quot;,fzc/fm);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            n = fzc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            m = fm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            gys = gcd(n,m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fzc = k*fzc;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fzc /= gys;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fm /= gys;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%d/%d\n&amp;quot;,fzc,fm);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1331%E5%AF%86%E7%A0%81/</guid>
            <title>XTUOJ_1331密码</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1331%E5%AF%86%E7%A0%81/</link>
            <pubDate>Sat, 26 Nov 2022 09:49:49 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Password&#34;&gt;&lt;a href=&#34;#Password&#34; class=&#34;headerlink&#34; title=&#34;Password&#34;&gt;&lt;/a&gt;Password&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Eric喜欢使用数字1,2,3,4作为密码，而且他有个怪癖，相邻数字不能相同，且相差不能超过2。当然只用数字做密码，会比较弱，Eric想知道当长度为n时，这样的密码有多少种？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;第一行是一个整数T(1≤T≤45),表示样例的个数。 每行一个样例，为整数n(1≤T≤45)。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h.&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__int64 arr[46];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr[1] = 4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr[2] = 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __int64 a=2,b=3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=3;i&amp;lt;=45;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;    //打表，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __int64 temp1,temp2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    temp1 = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    temp2 = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    arr[i] = temp2*2*2+(temp1*2+temp2)*2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a = temp2*2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b = temp1*2+temp2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int K,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(K--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;m);//不要乱加空格&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%I64d\n&amp;quot;,arr[m]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1194Recipient/</guid>
            <title>XTUOJ_1194Recipient</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1194Recipient/</link>
            <pubDate>Sat, 26 Nov 2022 09:43:11 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Recipient&#34;&gt;&lt;a href=&#34;#Recipient&#34; class=&#34;headerlink&#34; title=&#34;Recipient&#34;&gt;&lt;/a&gt;Recipient&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;快递小哥每天都辛苦的送快递，今天他需要送N份快递给N个收件人，第i份快递需要送给第i个收件人。 请问其中发生恰好K个送错了的情况数是多少？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;存在多样例。 每行输入两个整数N和K，1≤N≤1000,0≤K≤N。 如果两个都为0，则表示输入结束，这个样例不需要处理。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果，因为数值会比较大，所有结果需要对10^9+7取模。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1000 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37043040&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int mo = 1000000007;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//#define ll __int64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__int64 d[1001];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__int64 c[1001][1001];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//务必注意数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //求错排&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    d[2] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=3; i&amp;lt;1001; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;//芝士一个公式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        d[i] = (i-1)*(d[i-1]+d[i-2])%mo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //求组合数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1; i&amp;lt;1001; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c[i][0] = c[i][i] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=2; i&amp;lt;1001;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(j=1; j&amp;lt;i; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            c[i][j] = (c[i-1][j-1]+c[i-1][j])%mo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            //芝士公式，杨辉三角&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int N,K;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    __int64 ans;//注意数据类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;N,&amp;amp;K) != EOF&amp;amp;&amp;amp;N+K != 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;//N和K都为0退出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(K == 0)//if(!K)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;1\n&amp;quot;);//特殊情况特殊考虑&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans = (d[K]*c[N][K])%mo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%I64d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1238BinaryString/</guid>
            <title>XTUOJ_1238BinaryString</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1238BinaryString/</link>
            <pubDate>Sat, 26 Nov 2022 09:34:54 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Binary-String&#34;&gt;&lt;a href=&#34;#Binary-String&#34; class=&#34;headerlink&#34; title=&#34;Binary String&#34;&gt;&lt;/a&gt;Binary String&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;求n位01串含连续至少2个1的串的个数。&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;第一行是一个整数K（K≤10000），表示样例的个数。 每行样例是一个整数n(1≤1000000)。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果，因为数目可能很大，请对10^9+7取模。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1000000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;782550144&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int mo = 1000000007;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int a[1000001];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int K;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[1] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[2] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,k=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=3; i&amp;lt;=1000000; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k *= 2;//规律&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(k&amp;gt;mo)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k %= mo;//数据可能很大，注意取模&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i] = ((a[i-1]+a[i-2])%mo+k)%mo;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;    //随时注意取模&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(K--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d\n&amp;quot;,a[n]);//下标对应的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1270%E6%95%B0%E4%BD%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0/</guid>
            <title>XTUOJ_1270数位不同的数</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1270%E6%95%B0%E4%BD%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0/</link>
            <pubDate>Sat, 26 Nov 2022 09:27:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;数位不同的数&#34;&gt;&lt;a href=&#34;#数位不同的数&#34; class=&#34;headerlink&#34; title=&#34;数位不同的数&#34;&gt;&lt;/a&gt;数位不同的数&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;数位不同的数是指所有数位上的数码都不一样的数，比如“123”三个数码1,2,3，都不一样，所以是数位不同的数；但是“1232”中有两个相同的数码2，所以不是。请写一个程序，计算第几个符合条件的数是什么？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;每行输入一个整数n(1≤n≤8877691)。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个整数，为对应样例的结果。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8877691&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9876543210&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h.&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef __int64 ll;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ll sq[8877700];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int mark[10];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int temp[32];//答案暂存器&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int count=2;//表[1]为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//dfs首位为0会直接跳过，但是01存在。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void dfs(int deep,int maxdeep)//深度优先搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;//经常用于搜索可行解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(deep == maxdeep)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;//当深度到最深时存储答案并跳出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ll output = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0; i&amp;lt;deep; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;//temp存放每一位数字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output *= 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            output += temp[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        sq[count] = output;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return;//返回函数调用处&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0; i&amp;lt;=9; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;//判断数字是否被用过&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(mark[i] != 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;//不等于1，说明没被用过&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(deep == 0&amp;amp;&amp;amp;i ==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;//首位为0直接跳过&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mark[i] = 1;//标记该数字已经被用过&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            temp[deep] = i;//存储目标数字的这一位&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dfs(deep+1,maxdeep);//继续深度搜索&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mark[i] = 0;//用过后擦除，使判断继续&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-12570%E5%92%8C1/</guid>
            <title>XTUOJ_12570和1</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-12570%E5%92%8C1/</link>
            <pubDate>Sat, 26 Nov 2022 09:23:45 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;0和1&#34;&gt;&lt;a href=&#34;#0和1&#34; class=&#34;headerlink&#34; title=&#34;0和1&#34;&gt;&lt;/a&gt;0和1&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;一个01字符串，长度是n，其中1比0多m个，请问不同的排列方案数有多少个？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;第一行是一个整数K，表示样例的个数。 以后每行两个整数n和m，1≤n≤33,0≤m≤n。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;线索&#34;&gt;&lt;a href=&#34;#线索&#34; class=&#34;headerlink&#34; title=&#34;线索&#34;&gt;&lt;/a&gt;线索&lt;/h2&gt;&lt;p&gt;第一个样例为”01”和”10”；第二、三个样例不存在这样的串；第四个样例为”011”,”101”,”110”&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//组合数公式：C(n,m) = C(n-1,m-1)+C(n,m-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//C(0,i)=C(i,i)=0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//阶乘：C(n,m) = m!/(n!*(m-n)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;double fact(int a)//求阶乘函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(a == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return a*fact(a-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int K;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(K--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n,m,n1,m1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        double ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;n,&amp;amp;m);//1比0多m个，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //0有(m+n)/2个，1有(n-m)/2个；&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n1 = (m+n)/2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m1 = (n-m)/2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if((n1+m1) == n)//判断存不存在这样的串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;//阶乘公式：C(n,m) = m!/(n!*(m-n)!)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans = fact(n)/(fact(n1)*fact(m1));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%.0lf\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1090%E7%BB%84%E5%90%88%E6%95%B0/</guid>
            <title>XTUOJ_1090组合数</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1090%E7%BB%84%E5%90%88%E6%95%B0/</link>
            <pubDate>Sat, 26 Nov 2022 09:17:55 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;组合数&#34;&gt;&lt;a href=&#34;#组合数&#34; class=&#34;headerlink&#34; title=&#34;组合数&#34;&gt;&lt;/a&gt;组合数&lt;/h1&gt;&lt;h2 id=&#34;Description&#34;&gt;&lt;a href=&#34;#Description&#34; class=&#34;headerlink&#34; title=&#34;Description&#34;&gt;&lt;/a&gt;Description&lt;/h2&gt;&lt;p&gt;2^n&amp;#x3D;C(n,0)+C(n,1)+…+C(n,n)。其中^表示幂，C(n,x)表示组合数，即C(n,x)&amp;#x3D;n!&amp;#x2F;（(n-x)!x!）。现在给你n（0&amp;lt;&amp;#x3D;n&amp;lt;&amp;#x3D;33），要你输出2^n的组合数之和的表达式&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;每行一个整数n，如果n为负数则输入结束。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个表达式，表达式格式形似为2^n&amp;#x3D;C(n,0)+C(n,1)+…+C(n,n)。&lt;/p&gt;
&lt;h2 id=&#34;Sample-Input&#34;&gt;&lt;a href=&#34;#Sample-Input&#34; class=&#34;headerlink&#34; title=&#34;Sample Input&#34;&gt;&lt;/a&gt;Sample Input&lt;/h2&gt;&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;-1&lt;/p&gt;
&lt;h2 id=&#34;Sample-Output&#34;&gt;&lt;a href=&#34;#Sample-Output&#34; class=&#34;headerlink&#34; title=&#34;Sample Output&#34;&gt;&lt;/a&gt;Sample Output&lt;/h2&gt;&lt;p&gt;2^2&amp;#x3D;1+2+1&lt;/p&gt;
&lt;p&gt;2^3&amp;#x3D;1+3+3+1&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int tri[40][40];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    memset(tri,0,sizeof(tri));//务必初始化，否则结果乱码。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    tri[0][0] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;=33;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;//杨辉三角打表算组合数。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tri[i][0] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tri[i][i] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(j=1;j&amp;lt;=i;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            tri[i][j] = tri[i-1][j]+tri[i-1][j-1]; //杨辉三角规律&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(scanf(&amp;quot;%d&amp;quot;,&amp;amp;n) != EOF &amp;amp;&amp;amp; n&amp;gt;=0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;2^%d=1&amp;quot;,n);//为了输出+1，提前输出一个1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(j=1;j&amp;lt;=n;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;+%d&amp;quot;,tri[n][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1297Homework/</guid>
            <title>XTUOJ_1297Homework</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1297Homework/</link>
            <pubDate>Sat, 26 Nov 2022 09:10:28 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Homework&#34;&gt;&lt;a href=&#34;#Homework&#34; class=&#34;headerlink&#34; title=&#34;Homework&#34;&gt;&lt;/a&gt;Homework&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;鉴于很多同学Ctrl+A,Ctrl+C,Ctrl+V的问题，Eric想重新计算一下作业成绩，成绩计算的规则如下：&lt;/p&gt;
&lt;p&gt;1.每道题按正确提交的先后顺序给分，第1-12名32，13-24名16分，25-48名8分，49-96名4分，97-192名2分，其余1分。&lt;br&gt;2.学生所有题目的分数累加和为其积分。&lt;br&gt;3.作业成绩&amp;#x3D;round(100+log(1+(本人积分−最高积分)&amp;#x2F;最高积分)×10)，其中round为四舍五入取整，log以自然对数为底。&lt;br&gt;Eric已经通过查询数据库得到每个人每道题的排名情况，请写一个程序帮Eric算一下所有人的作业成绩。  &lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;输入包含若干行，每行是三个部分，题目号，学号，排名。&lt;br&gt;学生人数不超过500，题目数量不超过200。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;输出学号和成绩，按成绩逆序，学号，并按作业成绩逆序，学号正序排列显示。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551111 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551101 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551119 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551115 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551110 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551114 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551128 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551118 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551102 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551130 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551139 11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551135 12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551120 13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551129 14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551104 15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551112 16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551116 17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551138 18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551103 19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551131 20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551132 21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551106 22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551136 23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551124 24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551126 25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551113 26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551109 27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551117 28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551125 29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551127 30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551123 31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551133 32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551134 33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551121 34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551122 35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1054 2015551137 36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2015551101 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551102 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551110 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551111 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551114 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551115 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551118 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551119 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551128 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551130 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551135 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551139 100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551103 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551104 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551106 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551112 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551116 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551120 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551124 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551129 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551131 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551132 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551136 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551138 93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551109 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551113 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551117 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551121 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551122 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551123 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551125 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551126 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551127 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551133 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551134 86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2015551137 86&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;__int64 a[501];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int b[501];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//数组a存学号，数组b存排名，通过下标联系&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int trans(int x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;//积分转换函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(x&amp;gt;=1&amp;amp;&amp;amp;x&amp;lt;=12)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = 32;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else if(x&amp;gt;=13&amp;amp;&amp;amp;x&amp;lt;=24)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = 16;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else if(x&amp;gt;=25&amp;amp;&amp;amp;x&amp;lt;=48)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = 8;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else if(x&amp;gt;=49&amp;amp;&amp;amp;x&amp;lt;=96)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = 4;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else if(x&amp;gt;=97&amp;amp;&amp;amp;x&amp;lt;=192)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else if(x&amp;gt;=193)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        x = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int swap(int x,int y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;//交换位置函数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    temp = a[x];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[x] = a[y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    a[y] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    temp = b[x];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x] = b[y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[y] = temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    memset(a,0,sizeof(a));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    memset(b,0,sizeof(b));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;//题号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int rank;//排名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int flag = 1;//学号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(scanf(&amp;quot;%d %I64d %d&amp;quot;,&amp;amp;n,&amp;amp;a[flag],&amp;amp;rank) != EOF)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0; i&amp;lt;flag; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(a[i] == a[flag])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //排名转换为积分&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b[i] += trans(rank);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(i == flag)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            flag++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int num,judge=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    num = flag-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(judge)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;//冒泡将积分排序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        judge = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=1;i&amp;lt;num;i++)//注意i的初始值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(b[i]&amp;lt;b[i+1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                swap(i,i+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                judge = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    double q,w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    q = b[1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1; i&amp;lt;=num; i++)//没有=会变得不幸，（最后一位会只有积分值）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        w = log(b[i]/q)*10+100.5;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b[i] = w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i = 1; i&amp;lt;num; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        k = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(b[i] == b[i+1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        judge = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(judge)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            judge = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(j=k;j&amp;lt;i;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(a[j]&amp;gt;a[j+1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    swap(j,j+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    judge = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;=num;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%I64d %d\n&amp;quot;,a[i],b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1365Rotate/</guid>
            <title>XTUOJ_1365Rotate</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1365Rotate/</link>
            <pubDate>Sat, 26 Nov 2022 09:06:25 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Rotate&#34;&gt;&lt;a href=&#34;#Rotate&#34; class=&#34;headerlink&#34; title=&#34;Rotate&#34;&gt;&lt;/a&gt;Rotate&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;一个4×4的矩阵，我们可以把矩阵看成内外两圈，我们可以把外圈按顺时钟或者逆时钟转动，每次转动90度。 我们想得到一个2×2的子矩阵，使得这个子矩阵4个元素的累加和最大。请问最大子矩阵的元素累加和是多少？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;第一行是一个整数T(1≤T≤1000)，表示样例的个数。 每个样例占4行,每行4个整数,所有元素在[1,1000]范围内。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2 3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5 6 7 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9 10 11 12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13 14 15 16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1 2 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 3 4 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 2 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4 4 3 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;提示&#34;&gt;&lt;a href=&#34;#提示&#34; class=&#34;headerlink&#34; title=&#34;提示&#34;&gt;&lt;/a&gt;提示&lt;/h2&gt;&lt;p&gt;第一个样例，最大子矩阵为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;11 12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15 16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第二个样例，顺时钟旋转两次，得到最大子矩阵为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3 4 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 4 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int a[16];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int b[4][4];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int max;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j,m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(T--)//输入4X4矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;4;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(j=0;j&amp;lt;4;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                scanf(&amp;quot;%d&amp;quot;,&amp;amp;b[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m = 4;//旋转次数，转动90°&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max = b[0][1]+b[0][0]+b[1][0]+b[1][1];//初始化，=0也可&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while(m--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(i=0;i&amp;lt;3;i++)//遍历矩阵寻找最大2X2子矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                for(j=0;j&amp;lt;3;j++)//注意不要大于4，会越界&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    if(b[i][j]+b[i][j+1]+b[i+1][j]+b[i+1][j+1] &amp;gt; max)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        max = b[i][j]+b[i][j+1]+b[i+1][j]+b[i+1][j+1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(m == 0)//一圈后退出&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(i=0;i&amp;lt;4;i++)//暂存原矩阵最外圈&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[i] = b[0][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[i+4] = b[3][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[i+8] = b[i][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[i+12] = b[i][3];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(i=0;i&amp;lt;4;i++)//旋转后的结果存入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b[i][3] = a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b[i][0] = a[i+4];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b[0][3-i] = a[i+8];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b[3][3-i] = a[i+12];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d\n&amp;quot;,max);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1327%E5%AD%97%E7%AC%A6%E7%9F%A9%E9%98%B5/</guid>
            <title>XTUOJ_1327字符矩阵</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1327%E5%AD%97%E7%AC%A6%E7%9F%A9%E9%98%B5/</link>
            <pubDate>Sat, 26 Nov 2022 09:03:16 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;字符矩阵&#34;&gt;&lt;a href=&#34;#字符矩阵&#34; class=&#34;headerlink&#34; title=&#34;字符矩阵&#34;&gt;&lt;/a&gt;字符矩阵&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;按照示例的规律输出字符矩阵。 比如输入字母D时，输出字符矩阵如下&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ABCDCBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BBCDCBB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CCCDCCC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;DDDDDDD&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CCCDCCC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BBCDCBB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABCDCBA&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字符矩阵行首、尾都无空格。&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;每行一个大写英文字母，如果字符为#，表示输入结束，不需要处理。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;依次输出对应的字符矩阵&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;B&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;C&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;A&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BBB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABCBA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BBCBB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CCCCC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BBCBB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABCBA&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int min(int a,int b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(a&amp;gt;=b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char cnt[55][55];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(scanf(&amp;quot;%c&amp;quot;,&amp;amp;m)!=EOF&amp;amp;&amp;amp;m!=&amp;#x27;#&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int n= m-&amp;#x27;A&amp;#x27;+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;2*n-1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(j=0;j&amp;lt;2*n-1;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                cnt[i][j] = m-min(abs(n-i-1),abs(n-j-1));//利用n-i-1与行的关系以及绝对值的利用进行输出6666&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;2*n-1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(j=0;j&amp;lt;2*n-1;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                printf(&amp;quot;%c&amp;quot;,cnt[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1326Diagram/</guid>
            <title>XTUOJ_1326Diagram</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1326Diagram/</link>
            <pubDate>Sat, 26 Nov 2022 08:57:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Diagram&#34;&gt;&lt;a href=&#34;#Diagram&#34; class=&#34;headerlink&#34; title=&#34;Diagram&#34;&gt;&lt;/a&gt;Diagram&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给你一个字符串，请统计各个字符出现的个数，并使用字符打印一幅统计图表。&lt;/p&gt;
&lt;p&gt;图表的格式是&lt;/p&gt;
&lt;p&gt;1.x轴是字符，y轴是字符出现个数&lt;br&gt;2.x轴的字符为字符串中出现过的字符，并按字典顺序排列&lt;br&gt;3.y轴中的出现次数使用’&lt;em&gt;‘表示。为了让图表不至于太长，一个’&lt;/em&gt;‘表示的数量要尽可能的大。&lt;br&gt;4.每行的行末不允许多余的空格。  &lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;存在多个测试用例，处理到文件末尾。&lt;br&gt;每行一个只含英文大写字母的字符串，长度不超过1000。  &lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果，每个结果之后有一个空行。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;AABBCC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AAAABBBBCC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;AABBBBDDDE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABC&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;****&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ABDE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;提示&#34;&gt;&lt;a href=&#34;#提示&#34; class=&#34;headerlink&#34; title=&#34;提示&#34;&gt;&lt;/a&gt;提示&lt;/h2&gt;&lt;p&gt;第一个样例，ABC都是出现2次，所以我们可以用一个星号表示出现2次。&lt;br&gt;第二个样例的第一行坐标C的位置是行末，没有空格，是回车。ABC分别出现4，4，2次，所以使用一个星号表示出现2次&lt;br&gt;第三个样例没有C字符，所有没有C字符的统计信息。第1,2行的A字符位置是空格。  &lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int gnum(int a,int b)//求最大公因数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(b == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return gnum(b,a%b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    char qzx[1009];//存入输入的字符串 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j,n,m,max;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(scanf(&amp;quot;%s&amp;quot;,qzx) != EOF)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //printf(&amp;quot;1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int letter[27]=&amp;#123;0&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;qzx[i] != &amp;#x27;\0&amp;#x27;;i++)//求总数量 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            //printf(&amp;quot;1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            letter[qzx[i]-65]++;//相应字母的数量（字典序） &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            n = letter[qzx[i]-65];//初始化 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;26;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(letter[i] == &amp;#x27;\0&amp;#x27;)//有的字母未出现 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            n = gnum(letter[i],n);//判断总的公因数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;26;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            letter[i] = letter[i]/n;//不要取余！！！！！！ &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        max = letter[0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;26;i++)//找出数量最多的一个字母，代表高度 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(letter[i]&amp;gt;max)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                max = letter[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=max;i&amp;gt;0;i--)//控制层数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            m = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(j=0;j&amp;lt;26&amp;amp;&amp;amp;m!=26;j++)//输出每一行的空格和星号 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(letter[j] == &amp;#x27;\0&amp;#x27;) //遇到不在字符串的字母就跳过 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                else if(letter[j] &amp;gt;= i)//大于等于数量最多的那个字母（也就是该层会输出星号） &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    printf(&amp;quot;*&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    /*printf(&amp;quot;1&amp;quot;);*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    for(m=j+1;m&amp;lt;26;m++)//防止行尾多余空格的出现，否则PE &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        if(letter[m]&amp;lt;i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                else//如果没有输出空格 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    printf(&amp;quot; &amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;\n&amp;quot;);//进入下一行 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;26;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if(letter[i] == &amp;#x27;\0&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    printf(&amp;quot;%c&amp;quot;,i+65);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;\n\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/26/XTUOJ-1271Color/</guid>
            <title>XTUOJ_1271Color</title>
            <link>https://mangpumo.github.io/2022/11/26/XTUOJ-1271Color/</link>
            <pubDate>Sat, 26 Nov 2022 08:53:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Color&#34;&gt;&lt;a href=&#34;#Color&#34; class=&#34;headerlink&#34; title=&#34;Color&#34;&gt;&lt;/a&gt;Color&lt;/h1&gt;&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a href=&#34;#题目描述&#34; class=&#34;headerlink&#34; title=&#34;题目描述&#34;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;Alice在玩一个游戏，她在一个m×n的格子里，随机涂黑k个格子。然后她每次可以把一行或者一列的格子染成红色，但是这一行中不能有黑色的格子。 请问她最多能把多少个格子涂成红色？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a href=&#34;#输入&#34; class=&#34;headerlink&#34; title=&#34;输入&#34;&gt;&lt;/a&gt;输入&lt;/h2&gt;&lt;p&gt;第一行是一个整数T(T≤100)，表示样例的个数。 每个样例的第一行是m(1≤m≤100),n(1≤n≤100),k(0≤k≤m×n)。 以后的k行,每行两个整数x(1≤x≤m),y(1≤y≤n)，表示(x,y)为黑色格子。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a href=&#34;#输出&#34; class=&#34;headerlink&#34; title=&#34;输出&#34;&gt;&lt;/a&gt;输出&lt;/h2&gt;&lt;p&gt;每行输出一个样例的结果。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a href=&#34;#样例输入&#34; class=&#34;headerlink&#34; title=&#34;样例输入&#34;&gt;&lt;/a&gt;样例输入&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 4 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a href=&#34;#样例输出&#34; class=&#34;headerlink&#34; title=&#34;样例输出&#34;&gt;&lt;/a&gt;样例输出&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a href=&#34;#参考源码&#34; class=&#34;headerlink&#34; title=&#34;参考源码&#34;&gt;&lt;/a&gt;参考源码&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int a[101],b[101];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //memset(a,0,sizeof(a));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //memset(b,0,sizeof(b));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        memset(a,0,sizeof(a));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        memset(b,0,sizeof(b));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int m,n,k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int i,j,aa,bb;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d %d %d&amp;quot;,&amp;amp;m,&amp;amp;n,&amp;amp;k);//存数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=0;i&amp;lt;k;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;aa,&amp;amp;bb);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             a[aa] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;             b[bb] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int countx=0,county=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=1;i&amp;lt;=m;i++)//没有黑色的行&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(a[i]==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                countx++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s = countx*n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(i=1;i&amp;lt;=n;i++)//没有黑色的列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(b[i]==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                county++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        s = s+county*m-countx*county;//减去交叉地带&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d\n&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</guid>
            <title>计算机网络体系结构</title>
            <link>https://mangpumo.github.io/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</link>
            <pubDate>Fri, 25 Nov 2022 22:24:32 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;计算机网络体系结构&#34;&gt;&lt;a href=&#34;#计算机网络体系结构&#34; class=&#34;headerlink&#34; title=&#34;计算机网络体系结构&#34;&gt;&lt;/a&gt;计算机网络体系结构&lt;/h1&gt;&lt;h2 id=&#34;2-1-常用的计算机网络体系结构&#34;&gt;&lt;a href=&#34;#2-1-常用的计算机网络体系结构&#34; class=&#34;headerlink&#34; title=&#34;2.1 常用的计算机网络体系结构&#34;&gt;&lt;/a&gt;2.1 常用的计算机网络体系结构&lt;/h2&gt;&lt;h3 id=&#34;2-1-1-OSI体系结构&#34;&gt;&lt;a href=&#34;#2-1-1-OSI体系结构&#34; class=&#34;headerlink&#34; title=&#34;2.1.1 OSI体系结构&#34;&gt;&lt;/a&gt;2.1.1 OSI体系结构&lt;/h3&gt;&lt;p&gt;1、为了使不同体系结构的计算机网络都能够互联，国际标准化组织于1977年成立了专门机构研究该问题，不久他们就提出了一个试图使各种计算机在世界范围内都能够互连成网的标准框架，也就是著名的“&lt;strong&gt;开放系统互连参考模型&lt;/strong&gt;”，&lt;strong&gt;简称为OSI，OSI体系结构有时候我们也称之为OSI模型&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2、OSI是一个&lt;strong&gt;七层协议&lt;/strong&gt;的体系结构：从下往上依次是&lt;strong&gt;物理层、数据链路层、网络层、运输层、会话层、表示层、应用层&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b844f5a8acdb4f3ba77a8cb67eafff30.png&#34;&gt;&lt;br&gt;3、OSI试图达到一种理想境界，即全球计算机网络都遵循这个统一标准，因而全球的计算机将能够很方便地进行互连和交换数据。在20世纪80年代，许多大公司甚至一些国家的政府机构纷纷表示支持OSI。当时看来似乎在不久的将来全世界一定会按照OSI制定的标准来构造自己的计算机网络。&lt;/p&gt;
&lt;p&gt;4、然而到了20世纪90年代初期，虽然整套的OSI国际标准都已经制定出来了，但由于基于TCP&amp;#x2F;IP 的互联网已抢先在全球相当大的范围成功地运行了，而与此同时却几乎找不到有什么厂家生产出符合OSI标准的商用产品。因此人们得出这样的结论：&lt;strong&gt;OSI 只获得了一些理论研究的成果，但在市场化方面则事与愿违地失败了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;现今规模最大的、覆盖全球的、基于TCP&amp;#x2F;IP的互联网并未使用OSI标准。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;5、OSI失败的原因可归纳为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OSI的专家们缺乏实际经验，他们在完成OSI标准时缺乏商业驱动力;&lt;/li&gt;
&lt;li&gt;OSI的协议实现起来过分复杂，而且运行效率很低;&lt;/li&gt;
&lt;li&gt;OSI标准的制定周期太长，因而使得按OSI标准生产的设备无法及时进入市场;&lt;/li&gt;
&lt;li&gt;OSI的层次划分不太合理，有些功能在多个层次中重复出现。&lt;br&gt;6.&lt;strong&gt;OSI体系结构是法律上的国际标准， TCP&amp;#x2F;IP体系结构是事实上的国际标准&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-1-2具有五层协议的体系结构&#34;&gt;&lt;a href=&#34;#2-1-2具有五层协议的体系结构&#34; class=&#34;headerlink&#34; title=&#34;2.1.2具有五层协议的体系结构&#34;&gt;&lt;/a&gt;2.1.2具有五层协议的体系结构&lt;/h3&gt;&lt;p&gt;1.TCP&amp;#x2F;IP是一个&lt;strong&gt;四层&lt;/strong&gt;的体系结构，它包含&lt;strong&gt;应用层、运输层、网际层和网络接口层&lt;/strong&gt;（用网际层这个名字是强调这一层是为了解决不同网络的互连问题)。&lt;/p&gt;
&lt;p&gt;2、OSI的七层协议体系结构概念清楚，理论也比较完整，但是太过于复杂不实用。TCP&amp;#x2F;IP体系结构不同，但是现在却得到了非常广泛的应用。&lt;/p&gt;
&lt;p&gt;3、在学习计算机网络的原理时往往采取折中的办法，即综合OSI和TCP&amp;#x2F;IP 的优点，&lt;strong&gt;采用一种只有五层协议的体系结构&lt;/strong&gt;，这样既简洁又能将概念阐述清楚。有时为了方便，也可把最底下两层称为&lt;strong&gt;网络接口层&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e2756b4c1b244b9d862e1eba6e4e80ef.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、下面我们结合互联网的情况，自上而下地，非常简要的介绍一下各层的主要功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;应用层（application layer）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用层是体系结构中的最高层。应用层的任务是通过应用进程间的交互来完成特定网络应用。应用层协议定义的是应用进程间通信和交互的规则。这里的进程就是指主机中正在运行的程序。对于&lt;strong&gt;不同的网络应用需要有不同的应用层协议&lt;/strong&gt;。在互联网中的应用层协议很多，如&lt;strong&gt;域名系统DNS，支持万维网应用的 HTTP 协议，支持电子邮件的SMTP协议&lt;/strong&gt;，等等。**我们把应用层交互的数据单元称为报文(message)**。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;运输层（transport layer）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;运输层的任务就是负责&lt;strong&gt;向两台主机中进程之间的通信提供通用的数据传输服务&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;运输层主要使用以下两种协议:&lt;ul&gt;
&lt;li&gt;**传输控制协议TCP (Transmission Control Protocol)**：提供面向连接的、可靠的数据传输服务&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户数据报协议UDP (User Datagram Protocol）&lt;/strong&gt;：提供无连接的、尽最大努力(best-effort)的数据传输服务（不保证数据传输的可靠性)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;TCP和UDP协议都有固定的格式，数据在经过运输层时会根据所选择的运输协议在应用层传递过来的数据基础上加上对应协议的头部。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;网络层（network layer）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主要作用是实现&lt;strong&gt;两个网络系统之间的数据透明传送&lt;/strong&gt;，具体包括&lt;strong&gt;路由选择&lt;/strong&gt;，&lt;strong&gt;拥塞控制&lt;/strong&gt;和&lt;strong&gt;网际互连&lt;/strong&gt;等。&lt;/li&gt;
&lt;li&gt;在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP&amp;#x2F;IP体系中，由于网络层使用IP协议，因此分组也叫做&lt;strong&gt;IP数据报&lt;/strong&gt;，简称为&lt;strong&gt;数据报&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;数据在经过网络层时会加上IP协议的头部&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据链路层（data link layer）&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;物理层上所传输数据的单位是比特。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1b32f919f9a245369e56542ac6c89cae.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-2-物理层&#34;&gt;&lt;a href=&#34;#2-2-物理层&#34; class=&#34;headerlink&#34; title=&#34;2.2 物理层&#34;&gt;&lt;/a&gt;2.2 物理层&lt;/h2&gt;&lt;h3 id=&#34;2-2-1-物理层的基本概念&#34;&gt;&lt;a href=&#34;#2-2-1-物理层的基本概念&#34; class=&#34;headerlink&#34; title=&#34;2.2.1 物理层的基本概念&#34;&gt;&lt;/a&gt;2.2.1 物理层的基本概念&lt;/h3&gt;&lt;p&gt;1、物理层主要解决在各种传输媒体上传输比特0和1的问题，进而给数据链路层提供透明传输比特流的服务&lt;/p&gt;
&lt;p&gt;2、由于传输媒体的种类太多（例如&lt;strong&gt;同轴电缆、光纤、无线电波&lt;/strong&gt;等），物理连接方式也有很多例如&lt;strong&gt;点对点连接、广播连接&lt;/strong&gt;等，因此物理层协议种类也比较多。但是物理层为了解决在各种传输媒体上传输比特0和1的问题，无论是那种物理层协议都需要满足主以下四个任务：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/691eefef65b04a50af678f33529edda3.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-2-2-传输媒体&#34;&gt;&lt;a href=&#34;#2-2-2-传输媒体&#34; class=&#34;headerlink&#34; title=&#34;2.2.2 传输媒体&#34;&gt;&lt;/a&gt;2.2.2 传输媒体&lt;/h3&gt;&lt;p&gt;1、导引型传输媒体：电磁波被导引沿着固体媒体传播&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;同轴电缆&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9c5b4fac605c4b8c869bd18b4302497f.png&#34;&gt;&lt;ul&gt;
&lt;li&gt;以从上图看出同轴电缆的各层都是共圆心的，也就是同轴心的&lt;/li&gt;
&lt;li&gt;同轴电缆有两种&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基带同轴电缆&lt;/strong&gt;：数字传输，过去用于局域网&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;宽带同轴电缆&lt;/strong&gt;：模拟传输，目前主要用于有线电视&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;同轴电缆价格较贵且布线不够灵活和方便，随着集线器的出现，在局域网领域基本上都是采用双绞线作为传输媒体&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;双绞线&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;双绞线是最常用的传输媒体&lt;/strong&gt;，把两根互相绝缘的铜导线放在一起，然后按照一定规则绞合起来就构成了双绞线。&lt;/li&gt;
&lt;li&gt;常用的双绞线包含&lt;strong&gt;八根铜导线&lt;/strong&gt;，每两根绞合成一条双绞线，绞合组合如下：&lt;ul&gt;
&lt;li&gt;蓝色线和蓝白双色线绞合&lt;/li&gt;
&lt;li&gt;橙色线和橙白双色线绞合&lt;/li&gt;
&lt;li&gt;绿色线和绿白双色线绞合&lt;/li&gt;
&lt;li&gt;棕色线和棕白双色线绞合&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绞合的作用：&lt;ul&gt;
&lt;li&gt;抵御部分来自外界的电磁干扰&lt;/li&gt;
&lt;li&gt;减少相邻导线的电磁干扰&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;根据有无屏蔽层，双绞线分为：&lt;strong&gt;无屏蔽双绞线&lt;/strong&gt;和&lt;strong&gt;屏蔽双绞线&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;无屏蔽&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ff9dba22158c4bc785a587d5219d4191.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;屏蔽双绞线：在双绞线与外层绝缘封套之间有一个&lt;strong&gt;金属屏蔽层&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4246f54fcba640798a92a4a76a727ab5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;常用的绞合线类别、带宽及典型应用&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2750e276192c407584373703beb5f0c0.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;光纤&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/94132b8f5e5f4fcf86a141a888731198.png&#34;&gt;&lt;ul&gt;
&lt;li&gt;光纤的优点&lt;ul&gt;
&lt;li&gt;通信容量大(25000~30000GHz的带宽)&lt;/li&gt;
&lt;li&gt;传输损耗小，远距离传输时更加经济。&lt;/li&gt;
&lt;li&gt;抗雷电和电磁干扰性能好。这在大电流脉冲干扰的环境下尤为重要。&lt;/li&gt;
&lt;li&gt;无串音干扰，保密性好，不易被窃听。&lt;/li&gt;
&lt;li&gt;体积小，重量轻。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、非导引型传输媒体：非导引型传输媒体是指自由空间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无线电波&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微波&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;红外线&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可见光&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-3-数据链路层&#34;&gt;&lt;a href=&#34;#2-3-数据链路层&#34; class=&#34;headerlink&#34; title=&#34;2.3 数据链路层&#34;&gt;&lt;/a&gt;2.3 数据链路层&lt;/h2&gt;&lt;h3 id=&#34;2-3-1-数据链路层概述&#34;&gt;&lt;a href=&#34;#2-3-1-数据链路层概述&#34; class=&#34;headerlink&#34; title=&#34;2.3.1 数据链路层概述&#34;&gt;&lt;/a&gt;2.3.1 数据链路层概述&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、数据链路层在网络体系结构中所处的地位&lt;/strong&gt;&lt;br&gt;如下图所示：主机H1给主机H2发送数据，中间要经过三个路由器、电话网、局域网、广域网等多种网络。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/91fdba580fea42278cc5b83989260b4c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;从五层协议原理体系结构的角度来看，主机应该具有体系结构中的各个层次，而路由器只需要具有体系结构中的网络层、数据链路层、物理层。网络中的各个设备通过传输媒体进行互连，主机H1将需要发送的数据&lt;strong&gt;逐层封装&lt;/strong&gt;后通过物理层将构成数据包的各个比特转换为电信号发送到传输媒体，数据包进入到路由器后，&lt;strong&gt;从下网上逐层解封到网络层&lt;/strong&gt;，路由器根据数据包的&lt;strong&gt;目的网络地址&lt;/strong&gt;和&lt;strong&gt;自身的转发表&lt;/strong&gt;确定数据包的转发端口，然后从网络层向下逐层封装数据包，最后通过物理层将数据包发送到传输媒体，最后到达主机H2，主机H2在接收到数据包后再逐层解封。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/23504ea18c834ebc8f510bbccc61243d.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们研究数据链路层时，我们可以只关心数据链路层，而不考虑其他各层。我们可以想象，数据只在数据链路层从左至右沿水平方向传送。从数据链路层来看，主机H1到主机H2 的通信可以看作是在4段不同的链路上的通信所组成的。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8b5fe4d2c549488ebf4bf85df83edf95.gif&#34;&gt;&lt;br&gt;所谓的&lt;strong&gt;链路(Link)就是从一个结点到相邻结点的一段物理线路，而中间没有任何其他的交换结点。要在链路上传输数据，仅有链路还不够，还需要一些通信协议来控制这些数据的传输，如果把实现这些协议的硬件和软件加到链路上就构成了数据链路&lt;/strong&gt;（Data Link）&lt;/p&gt;
&lt;p&gt;在数据链路上传输的数据包，又称为&lt;strong&gt;帧&lt;/strong&gt;。（数据链路层是以帧作为单位传输和处理的）&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2d9c035a96f047dc8365d514662581be.png&#34;&gt;&lt;br&gt;&lt;em&gt;&lt;strong&gt;注意：结点就是网络中的一台主机。&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;数据链路层的协议有很多种，但是有三个基本问题是共同的。这三个基本问题就是：&lt;strong&gt;封装成帧、透明传输和差错检测&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-3-2-封装成帧&#34;&gt;&lt;a href=&#34;#2-3-2-封装成帧&#34; class=&#34;headerlink&#34; title=&#34;2.3.2 封装成帧&#34;&gt;&lt;/a&gt;2.3.2 封装成帧&lt;/h3&gt;&lt;p&gt;封装成帧是指数据链路层给上层交付的协议数据单元添加&lt;strong&gt;帧头&lt;/strong&gt;和&lt;strong&gt;帧尾&lt;/strong&gt;使之成为帧。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;帧头和帧尾中包含有重要的控制信息&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/3d3beb5089e24c3da336b85b25ede0fd.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6be3b1149ffa4640948b7803fa44e859.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;帧头和帧尾的作用之一就是&lt;strong&gt;帧定界&lt;/strong&gt;  &lt;ul&gt;
&lt;li&gt;例如：PPP帧的第一个字节和最后一个字节就是帧定界，通过这两个字节就能够从物理层交付的比特流中提取出一个一个的帧。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/80f2954c7be444f2b82c9dc5dc4f91a1.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;并不是每种数据链路层协议的帧都包含有帧定界标志&lt;/strong&gt;，例如MAC帧在帧头和帧尾中是没有包含帧定界的标志的， 那么接收方是如何从物理层交付的比特流中提取出一个个的以太网帧的呢？&lt;ul&gt;
&lt;li&gt;第一步：数据链路层封装好MAC帧，将其交付给物理层&lt;/li&gt;
&lt;li&gt;第二步：物理层在MAC帧的前面添加8字节的&lt;strong&gt;前导码&lt;/strong&gt;，前导码的&lt;strong&gt;前7个字节&lt;/strong&gt;为&lt;strong&gt;前同步码&lt;/strong&gt;，其作用是使接收方的时钟同步，之后的1个字节为帧开始定界符，表明其后紧跟着的就是MAC帧。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/28087c89f5064d9eb5260ba32ccb9e47.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-3-3-透明传输&#34;&gt;&lt;a href=&#34;#2-3-3-透明传输&#34; class=&#34;headerlink&#34; title=&#34;2.3.3 透明传输&#34;&gt;&lt;/a&gt;2.3.3 透明传输&lt;/h3&gt;&lt;p&gt;1、透明传输是指数据链路层对上层交付的传输数据没有任何限制，就好像数据链路层不存在一样。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当数据帧中的数据是帧定界标志时，发送端的数据链路层该如何处理呢？&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当物理链路提供的是面向字符的传输服务时（物理链路以字符为单位传输数据）：&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c117eb47d7c14ca092fa9700d055c0cb.png&#34;&gt;&lt;br&gt;数据链路层在交付数据给物理层时，对帧进行扫描，首先扫描到SOH，然后每扫描到一个SOH或者EOT就在前面加&lt;strong&gt;转义字符ESC&lt;/strong&gt;，直至扫描到最后一个EOT，这种方式称之为：&lt;strong&gt;字节填充(byte stuffing)&lt;strong&gt;或&lt;/strong&gt;字符填充(character stuffing)&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/34569f396b4946b1be876697e73c7dc9.png&#34;&gt;&lt;br&gt;接收端的数据链路层在将数据送往网络层之前删除插入的转义字符&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;当物理链路提供的是面向比特的传输服务时（物理链路以比特为单位传输数据）：&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/22d90f1eb3d442a2a98d019e0f1bedc0.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/453f687f13da443c841af18a50812b65.png&#34;&gt;&lt;br&gt;考研真题：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/f4d50abca05f4af99733104de0e69ac0.png&#34;&gt;&lt;br&gt;2、为了提高帧的传输效率，应当使帧的数据部分的长度尽可能大些。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、考虑到差错控制等多种因素，每一种数据链路层协议都规定了帧的数据部分的长度上限，即最大传送单元&lt;strong&gt;MTU(Maximum Transfer Unit)。&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4b711c41092649eb8e426d59fb178618.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-4-差错校验&#34;&gt;&lt;a href=&#34;#2-3-4-差错校验&#34; class=&#34;headerlink&#34; title=&#34;2.3.4 差错校验&#34;&gt;&lt;/a&gt;2.3.4 差错校验&lt;/h3&gt;&lt;p&gt;1、实际的通信链路都不是理想的，比特流在传输过程中由于受到各种干扰可能会产生差错: 1可能会变成0,而0也可能变成1。这称为&lt;strong&gt;比特差错&lt;/strong&gt;，或者称为&lt;strong&gt;误码。&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1d2c97131cc3466eab199bb965ce7aa8.gif&#34;&gt;  &lt;/p&gt;
&lt;p&gt;2、一段时间内，传输错误的比特占所传输比特总数的比率称为&lt;strong&gt;误码率（Bit Error Rate）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;3、接收方是如何知道数据在传输的过程中出现差错了呢？使用&lt;strong&gt;差错检测码&lt;/strong&gt;来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一。&lt;/p&gt;
&lt;p&gt;4、在封装好的帧中利用若干个字节表示帧校验序列FCS字段。FCS :Frame Check Sequence(帧校验序列)。FCS字段由一些差错校验算法计算得出，常用的校验算法为：**循环冗余校验CRC(Cyclic Redundancy Check)**。&lt;/p&gt;
&lt;p&gt;5、接收方在接收到数据后计算出一个FCS，然后将计算得出的FCS与接收到的数据帧中的FCS进行比较。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ab8ac756b833450aac48e0ca272410b5.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ab8ac756b833450aac48e0ca272410b5.png&#34;&gt;  &lt;/p&gt;
&lt;p&gt;由于判断FCS是否正确只能检测出帧在传输过程中出现了差错，但并不能定位错误，因此&lt;strong&gt;无法纠正错误&lt;/strong&gt;。接收方可以通过&lt;strong&gt;检错重传&lt;/strong&gt;方式来纠正传输中的差错,或者仅仅是&lt;strong&gt;丢弃检测到差错的帧&lt;/strong&gt;，这取决于数据链路层向其上层提供的是&lt;strong&gt;可靠传输服务&lt;/strong&gt;还是&lt;strong&gt;不可靠传输服务&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;2-3-4-以太网&#34;&gt;&lt;a href=&#34;#2-3-4-以太网&#34; class=&#34;headerlink&#34; title=&#34;2.3.4 以太网&#34;&gt;&lt;/a&gt;2.3.4 以太网&lt;/h3&gt;&lt;p&gt;1.&lt;strong&gt;以太网概念&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以太网是一种计算机局域网技术&lt;/strong&gt;。&lt;strong&gt;IEEE&lt;/strong&gt;（电气与电子工程师协会：Institute of Electrical and Electronics Engineers）组织的&lt;strong&gt;IEEE 802.3标准&lt;/strong&gt;制定了以太网的技术标准，它规定了包括&lt;strong&gt;物理层的连线、电子信号和介质访问层协议&lt;/strong&gt;的内容。&lt;strong&gt;以太网是应用最普遍的局域网技术&lt;/strong&gt;，取代了其他局域网技术如令牌环、FDDI和ARCNET。&lt;/li&gt;
&lt;li&gt;以太网是一种有线系统，最初使用&lt;strong&gt;同轴电缆&lt;/strong&gt;进行数据传输，后来发展到使用双绞线和光纤并延续至今。  &lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b681fbc83c974dac8142a48b9d65b1a0.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/d7e76738da654a189c597d303f5ff6ef.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2、&lt;strong&gt;以太网的两个标准&lt;/strong&gt;  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1980年9月，&lt;strong&gt;DEC公司&lt;/strong&gt;、&lt;strong&gt;英特尔(Intel)公司&lt;/strong&gt;和&lt;strong&gt;施乐公司&lt;/strong&gt;联合提出了10 Mbit&amp;#x2F;s 以太网规约的第一个版本&lt;strong&gt;DIX V1&lt;/strong&gt;(DIX是这三个公司名称的缩写)。&lt;/li&gt;
&lt;li&gt;1982年又修改为第二版规约（实际上也就是最后的版本)，即&lt;strong&gt;DIX Ethernet V2&lt;/strong&gt;，成为世界上第一个局域网产品的规约。  &lt;/li&gt;
&lt;li&gt;1983年，&lt;strong&gt;IEEE 802委员会&lt;/strong&gt;的&lt;strong&gt;802.3工作组&lt;/strong&gt;制定了第一个IEEE的以太网标准&lt;strong&gt;IEEE 802.3&lt;/strong&gt;[W-IEEE802.3]，数据率为&lt;strong&gt;10 Mbit&amp;#x2F;s&lt;/strong&gt;。以太网的两个标准 DIX Ethernet V2与IEEE的802.3标准只有很小的差别，因此很多人也常把802.3局域网简称为”以太网”。&lt;/li&gt;
&lt;li&gt;IEEE 802委员会的介绍（引用自《计算机网络-谢希仁》）&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2d7adb93d22c4f57ba9f34e4dc9a1ece.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;IEEE 802.3 定义了以太网的&lt;strong&gt;物理层&lt;/strong&gt;和&lt;strong&gt;数据链路层&lt;/strong&gt;的介质访问控制部分，其中物理层由两个组件组成：&lt;strong&gt;线缆&lt;/strong&gt;和&lt;strong&gt;设备&lt;/strong&gt;，数据链路层可以分为两部分：&lt;strong&gt;逻辑链路控制（LLC）&lt;/strong&gt;、&lt;strong&gt;介质访问控制（MAC）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c41ad929dadc4d92a26cf68a7a9d2139.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;物理层&lt;ul&gt;
&lt;li&gt;线缆：以太网的通信线缆由最先的同轴电缆发展到今天的双绞线和光纤。&lt;ul&gt;
&lt;li&gt;双绞线两端配有&lt;strong&gt;RJ45&lt;/strong&gt;八针连接器，这种八针连接器用于在半双工和全双工模式下进行数据的发送和接收。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/5dc054651c1b4fadaecf8036d98ae5fa.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;半双工模式：数据一次沿一个方向传输&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/dbb0aba241e54bbbb302b4e156101f41.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;全双工模式：数据沿两个方向传输，以太网的全双工模式可以通过使用一对双绞线实现&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/d13a6f9287b74a639a50fb86537d54aa.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;光纤线缆：光纤线缆使用&lt;strong&gt;玻璃光纤&lt;/strong&gt;或&lt;strong&gt;塑料光纤&lt;/strong&gt;作为光脉冲的传输通道来传输数据&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/14749298c181408bb285f5657971bcd4.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;光纤电缆可以根据实际需求使用不同类型的连接器：&lt;strong&gt;SFP连接器&lt;/strong&gt;、&lt;strong&gt;SC连接器&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/3922a682840d49ff825a8adee3adf9ea.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设备：以太网设备由计算机、打印机等具有网络接口卡的设备所组成，常用的以太网设备有&lt;strong&gt;路由器&lt;/strong&gt;、&lt;strong&gt;交换机&lt;/strong&gt;、&lt;strong&gt;网桥&lt;/strong&gt;，而工作在数据链路层上的设备为交换机、网桥，路由器工作在五层体系结构中的网络层。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据链路层&lt;ul&gt;
&lt;li&gt;逻辑链路控制LLC：为网络层提供统一的接口以便数据在设备间传输。很多厂商生产的适配器上就仅装有 MAC 协议而没有 LLC 协议。&lt;/li&gt;
&lt;li&gt;介质访问控制MAC：使用分配给网络接口卡的硬件地址来标识特定的计算机或设备接口，通过这种方法来表示数据传输的源地址和目的地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-3-5-以太网的MAC层&#34;&gt;&lt;a href=&#34;#2-3-5-以太网的MAC层&#34; class=&#34;headerlink&#34; title=&#34;2.3.5 以太网的MAC层&#34;&gt;&lt;/a&gt;2.3.5 以太网的MAC层&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、MAC层的硬件地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;MAC地址 （英语：Media Access Control Address）&lt;/strong&gt; ，直译为&lt;strong&gt;媒体存取控制位址&lt;/strong&gt; ，也称为&lt;strong&gt;局域网地址&lt;/strong&gt; （LAN Address），&lt;strong&gt;MAC位址&lt;/strong&gt; ，&lt;strong&gt;以太网地址&lt;/strong&gt; （Ethernet Address）或物理地址 （Physical Address），它是一个用来确认网络设备位置的位址。&lt;/li&gt;
&lt;li&gt;IEEE 802标准为局域网规定了一种&lt;strong&gt;48位（6字节）的全球地址（一般简称为“地址”）&lt;/strong&gt;，&lt;strong&gt;这个地址会固化在适配器&lt;/strong&gt;的&lt;strong&gt;ROM&lt;/strong&gt;中。&lt;/li&gt;
&lt;li&gt;IEEE 的&lt;strong&gt;注册管理机构 RA &lt;strong&gt;负责向厂家分配地址字段的&lt;/strong&gt;前三个字节(即高位 24 位)&lt;strong&gt;。地址字段中的后三个字节(即低位 24 位)由&lt;/strong&gt;厂家自行指派&lt;/strong&gt;，称为&lt;strong&gt;扩展标识符&lt;/strong&gt;，必须保证生产出的适配器没有重复地址。世界上凡要生产局域网适配器的厂家都必须向IEEE购买由这三个字节构成的这个号（即地址块)，这个号的正式名称是组织唯一标识符。&lt;ul&gt;
&lt;li&gt;例如，3Com公司生产的适配器的MAC地址的前三个字节是 02-60-8C。地址字段中的后三个字节（即低位24位）则由厂家自行指派，只要保证生产出的适配器没有重复地址即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一个地址块可以生成&lt;strong&gt;2^24&lt;/strong&gt;个（二百八十多万亿个）不同的地址。这种 48 位地址称为&lt;strong&gt;MAC-48&lt;/strong&gt;，它的通用名称是&lt;strong&gt;EUI-48&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一般情况下，用户主机会包含两个网络适配器：&lt;strong&gt;有线局域网适配器（有线网卡）和无线局域网适配器（无线网卡)&lt;strong&gt;。每个网络适配器都有一个全球唯一的MAC地址。而&lt;/strong&gt;交换机和路由器往往拥有更多的网络接口&lt;/strong&gt;，&lt;strong&gt;所以会拥有更多的MAC地址&lt;/strong&gt;。综上所述，严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识。&lt;/li&gt;
&lt;li&gt;我们可以在&lt;strong&gt;DOS窗口&lt;/strong&gt;输入命令：**ipconfig &amp;#x2F;all **， 查看本机网卡的MAC地址。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/74c99c8537b349f7b640dba5955d2c3d.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2、MAC地址的格式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MAC地址的表示方法&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/3e0b09b0f2734ede8248842253c75be8.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;MAC地址的含义&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8c5afaae80d24a2b9130a2440cc80e8d.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3、MAC 帧的格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据链路层在网络层交付的IP数据包前面加上&lt;strong&gt;“目的地址”、“源地址”、“类型”&lt;/strong&gt;字段，并且在最后加入&lt;strong&gt;4字节的FCS字段&lt;/strong&gt;，组成一个&lt;strong&gt;以太网MAC帧&lt;/strong&gt;，然后再交付给物理层&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;目的地址：接收主机的MAC地址&lt;/li&gt;
&lt;li&gt;源地址：发送主机的MAC地址&lt;/li&gt;
&lt;li&gt;类型：类型字段标志上一层使用的是什么&lt;strong&gt;协议&lt;/strong&gt;，以便把收到的 MAC 帧的数据上交给上一层的这个协议。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4c9bb345081742f0b323ede915fd81db.png&#34;&gt;&lt;br&gt;&lt;em&gt;注意：当数据字段的长度小于 46 字节时，应在数据字段的后面加入整数字节的填充字段，以保证以太网的 MAC 帧长不小于 64 字节。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4、MAC地址的识别&lt;/strong&gt;&lt;br&gt;当多个主机连接到同一个广播信道上，要实现两个主机之间的通信，每个主机发送的帧中包含了目的地址和源地址，广播信道上的每一台主机都能够收到该帧，接收到帧的主机将帧中的目的地址与保存在网络适配器的电可擦除可编程只读存储器EEPROOM中的MAC地址进行比较，如果匹配则接受该帧，否则就丢弃该帧。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/acca62e431994803bf8a385783927a40.gif&#34;&gt;&lt;/p&gt;
&lt;p&gt;根据MAC地址为单播MAC地址还是广播MAC地址还是多播MAC地址，在计算机网络中“&lt;strong&gt;发往本站（本主机）的帧&lt;/strong&gt;”分为三种：&lt;strong&gt;单播(unicast)帧（一对一）&lt;/strong&gt;、&lt;strong&gt;广播(broadcast)帧（一对全体）&lt;/strong&gt;、&lt;strong&gt;多播(multicast)帧（一对多）&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;单播MAC地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c021328943174d60bb7a810fb2507654.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;广播MAC地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/454f6a4545d14d129dc0c1aeb6d538f1.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多播MAC地址&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/80e9ab14efee4497bd47a5f67d0de5e9.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;随机MAC地址：&lt;/strong&gt;&lt;br&gt;据斯诺登介绍，美国国家安全局有一套系统通过监视电子设备的MAC地址来跟踪城市中每个人的行动，因此苹果率先在&lt;strong&gt;ios&lt;/strong&gt;系列设备扫描网络时采用随机MAC地址技术，随后&lt;strong&gt;Windows10&lt;/strong&gt;，&lt;strong&gt;安卓6.0以及内核版本3.18的Linux&lt;/strong&gt;系统也提供随机MAC地址功能。 目前大多数移动设备都采用了随机MAC地址技术。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/5bea4a4bcec747c085b2f71538bab2c5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;以太网交换机&#34;&gt;&lt;a href=&#34;#以太网交换机&#34; class=&#34;headerlink&#34; title=&#34;以太网交换机&#34;&gt;&lt;/a&gt;以太网交换机&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、以太网交换机的基本功能&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太网交换机是基于&lt;strong&gt;以太网传输数据&lt;/strong&gt;的交换机，以太网交换机通常都有多个接口，每个接口都可以直接与一台主机或另一个以太网交换机相连，一般都工作在&lt;strong&gt;全双工方式&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;以太网交换机具有并行性，能同时连通多对接口，使多对主机能同时通信。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6270e1455ff44ad78ceeab545ee4c25c.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;**以太网交换机工作在数据链路层（也包括物理层)**，它收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/83e4adf17560421a8ece390f97488cae.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;帧的两种转发方式：&lt;ul&gt;
&lt;li&gt;存储转发：交换机在转发之前必须&lt;strong&gt;接收整个帧&lt;/strong&gt;，并进行&lt;strong&gt;错误校检&lt;/strong&gt;，如无错误再将这一帧发往目的地址。帧通过交换机的转发时延随帧长度的不同而变化。&lt;/li&gt;
&lt;li&gt;直接交换：采用基于硬件的&lt;strong&gt;交叉矩阵&lt;/strong&gt;（交换机只要检查到帧头中所包含的目的地址就立即转发该帧，而无需等待帧全部的被接收，也不进行错误校验。由于以太网帧头的长度总是固定的，因此帧通过交换机的转发时延也保持不变。）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以太网交换机是一种即插即用设备，其内部的&lt;strong&gt;帧交换表&lt;/strong&gt;是通过&lt;strong&gt;自学习算法&lt;/strong&gt;自动的逐渐建立起来的。&lt;br&gt;&lt;strong&gt;2、以太网交换机自学习和转发帧的流程&lt;/strong&gt;&lt;br&gt;刚上电时以太网交换机内部的帧交换表是空的，随着网络中各主机间的通信，通过&lt;strong&gt;自学习算法&lt;/strong&gt;自动的逐渐建立起来&lt;strong&gt;帧交换表&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图所示相互连接的“以太网交换机1”和“以太网交换机2”各自连接了三台主机，构成了一个交换式以太网。为了简单起见各台主机的MAC地址我们用一个大写字母表示，并且假设各台主机知道网络中其他各主机的MAC地址。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4d214d084357421fb3715f41cee0e73a.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面我们来了解以太网交换机是如何进行自学习和转发帧的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机A发送数据给主机B&lt;ul&gt;
&lt;li&gt;该帧从交换机1的接口1进入交换机，交换机1首先进行登记工作，将该帧中的源MAC地址A记录到自己的帧交换表中，并且将接口号1与MAC地址A相对应也记录到帧交换表中。以上的登记工作就称之为交换机的自学习。&lt;/li&gt;
&lt;li&gt;交换机1对该帧进行转发，该帧中的目的MAC地址是B，在帧交换表中查找MAC地址B，发现找不到就对该帧进行盲目地转发（也成为泛洪），也就说会将该帧在除接口1以外的其他所有接口进行转发。&lt;/li&gt;
&lt;li&gt;主机B在接收到该帧后，根据该帧的目的MAC地址B与自己的MAC地址比较，发现相等就说明该帧是发送给自己的，于是主机B接受该帧，主机C则会丢弃该帧。&lt;/li&gt;
&lt;li&gt;该帧从交换机1的接口4通过交换机2的接口2进入交换机2，交换机2首先进行登记工作，将该帧中的源MAC地址A记录到自己的帧交换表中，并且将接口号2与MAC地址A相对应也记录到帧交换表中&lt;/li&gt;
&lt;li&gt;交换机2对该帧进行转发，该帧中的目的MAC地址是B，在帧交换表中查找MAC地址B，发现找不到就对该帧进行盲目地转发（也成为泛洪），也就说会将该帧在除接口2以外的其他所有接口进行转发。&lt;/li&gt;
&lt;li&gt;主机D、E、F丢弃该帧&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/afc92e070ffd42bb9de873bf7989417a.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;注意：在帧交换表中每条记录都有自己的有效时间，到期自动删除。这是因为MAC地址与交换机接口的对应关系并不是永久性的（对应的接口可能会更换计算机）&lt;/em&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/f7ad9fa661544ffdbe6bf75faab51916.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、以太网交换机的生成树协议STP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思考：如何提高以太网的可靠性？假如在网络中有三台交换机A、B、C，他们之间的连接方式如下图所示，假如他们之间的链路出现了故障则会影响各个交换机之间的通信&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c61f250b028847c8bd5ee61ef1fe6c35.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;添加&lt;strong&gt;冗余链路&lt;/strong&gt;可以提高以太网的可靠性：在交换机B和C之间添加冗余链路。但是冗余链路也会带来负面效应—-形成&lt;strong&gt;网络环路&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8f898a1bafd0463ea91e45d10fafa3d6.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;网络环路带来的问题&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;广播风暴&lt;/strong&gt;：广播帧在各个交换机之间反复转发，分别按顺时针和逆时针方向同时兜圈。广播风暴会大量消耗网络资源，使得网络无法正常转发其他数据帧。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/45e9a422372e4ac7870aeb4e127e9cd7.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主机收到反复的广播帧&lt;/strong&gt;，会大量消耗主机的资源。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换机的帧交换表震荡&lt;/strong&gt;：同一个MAC地址的记录在其他错误记录之间反复震荡。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/956f05ba2a864f088f5240b104da21c5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;以太网交换机使用&lt;strong&gt;生成树协议STP(Spanning Tree Protocol)&lt;strong&gt;可以在增加冗余链路来提高网络可靠性的同时又&lt;/strong&gt;避免网络环路带来的各种问题&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;不论交换机之间采用怎样的物理连接，交换机都能够&lt;strong&gt;自动计算并构建一个逻辑上没有环路的网络&lt;/strong&gt;，其逻辑拓扑结构必须是&lt;strong&gt;树型&lt;/strong&gt;的（无逻辑环路)。最终生成的树型逻辑拓扑要&lt;strong&gt;确保连通整个网络&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/bad45fd1097c46439538d4e775dc9330.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;当首次连接交换机或网络&lt;strong&gt;物理拓扑发生变化&lt;/strong&gt;时(有可能是人为改变或故障)，交换机都将进行&lt;strong&gt;生成树的重新计算&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9f1163b32c0349b5a401016c8f2fe070.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;说明：生成树算法STA需要大家自行了解。&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-3-7-虚拟局域网VLAN&#34;&gt;&lt;a href=&#34;#2-3-7-虚拟局域网VLAN&#34; class=&#34;headerlink&#34; title=&#34;2.3.7 虚拟局域网VLAN&#34;&gt;&lt;/a&gt;2.3.7 虚拟局域网VLAN&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、广播域&lt;/strong&gt;&lt;br&gt;使用一个或多个以太网交换机互连起来的交换式以太网，其所有站点都属于同一个广播域。随着交换式以太网规模的扩大，广播域相应扩大，从而形成一个巨大的广播域。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/7cd6ccc8a1ff46fcae783b93767b6c97.png&#34;&gt;  &lt;/p&gt;
&lt;p&gt;但是巨大的广播域会带来很多的弊端：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;广播风暴&lt;/li&gt;
&lt;li&gt;难以管理和维护&lt;/li&gt;
&lt;li&gt;潜在的安全问题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如，网络中的某台主机A需要向另外一台主机B发送数据，此时主机A只有主机B的IP地址，但是没有主机B的MAC地址，主机A需要发送ARP（ARP属于体系结构的网络层，在后续的课程中我们会介绍）广播请求来获取主机B的MAC地址，该ARP请求会传遍整个网络，网络中的其他所有主机都能够收到广播。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b3d39209b80e45748a16d0e034e867e1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;广播风暴会浪费网络资源和各个主机的CPU资源，但是在实际应用中网络中会频繁出现广播信息，TCP&amp;#x2F;IP协议栈中的很多协议都会使用广播：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;地址解析协议ARP（已知IP地址，找出对应的MAC地址）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态主机配置协议DHCP（用于自动配置IP地址）&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以使用&lt;strong&gt;分割广播域&lt;/strong&gt;的方法对广播域进行&lt;strong&gt;隔离&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用路由器隔离广播域&lt;/strong&gt;：但是路由器的成本较高，局域网中如果全部用路由器隔离广播域不大现实&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/a05712142deb48e6bb1755ba0eebb5f1.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用虚拟局域网VLAN&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2、虚拟局域网VLAN概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;虚拟局域网VLAN&lt;/strong&gt;(Virtual Local Area Network)是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。&lt;/p&gt;
&lt;p&gt;假如在网络中有三个局域网，分别叫做局域网1、局域网2、局域网3，我们可以使用一个&lt;strong&gt;交换机S4&lt;/strong&gt;将三个局域网互连成一个更大的局域网。原来每个局域网就成为新的大的局域网中的各个&lt;strong&gt;网段&lt;/strong&gt;。我们可以在S4上将整个局域网划分成两个VLAN：VLAN1和VLAN2，这样两个&lt;strong&gt;不同的VLAN之间的广播数据包不会互相传输&lt;/strong&gt;，当然如果是在同一个VLAN中的主机依然可以进行广播通信。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：不是所有的交换机都能够进行VLAN划分，一般需要企业级交换机才可以。&lt;/em&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/bf54235f6dd94777bb14fe37fbe94968.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-3-8-华为eNSP-VLAN实验&#34;&gt;&lt;a href=&#34;#2-3-8-华为eNSP-VLAN实验&#34; class=&#34;headerlink&#34; title=&#34;2.3.8 华为eNSP VLAN实验&#34;&gt;&lt;/a&gt;2.3.8 华为eNSP VLAN实验&lt;/h3&gt;&lt;p&gt;下面我们使用华为的eNSP进行VLAN的实验。&lt;/p&gt;
&lt;p&gt;1、新建一个拓扑，然后在拓扑中加入两台S5700的交换机LSW1和LSW2，LSW1和LSW2互相连接，并且每台交换机上接入两台PC。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/61164790fff44f8ca510845b37beb561.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、如上图所示：LSW1交换机的 GE 0&amp;#x2F;0&amp;#x2F;1和GE 0&amp;#x2F;0&amp;#x2F;2接口分别接PC1和PC2， LSW2交换机的 GE 0&amp;#x2F;0&amp;#x2F;1和GE 0&amp;#x2F;0&amp;#x2F;2接口分别接PC3和PC4，LSW1和LSW2的GE 0&amp;#x2F;0&amp;#x2F;3接口互连。&lt;/p&gt;
&lt;p&gt;3、对PC1、PC2、PC3、PC4进行如下设置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP地址分别设置为192.168.1.101, 192.168.1.102, 192.168.1.103, 192.168.1.104&lt;/li&gt;
&lt;li&gt;子网掩码全部设置为：255.255.255.0&lt;/li&gt;
&lt;li&gt;网关全部设置为：192.168.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、设置完成以后，将两台交换机和4台PC启动，然后分别在每台PC的命令行使用ping命令查看能够ping同其他PC。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b1e6f3dc490941efb9a898acb587f28e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、配置交换机LSW1，构建vlan2和vlan3&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;进入命令行输入 system-view命令进入系统试图&lt;/li&gt;
&lt;li&gt;输入 display vlan 查看交换机中的vlan&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4ba5f05ed2f540eb93550fb5d774c718.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;通过命令行，创建vlan2&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8b5f9b611538454aa041afd367520e16.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;通过命令行，创建vlan3&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2242b9748b3f4793b32202539daffc39.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;输入命令 display vlan 查看交换机中的vlan，发现有三个vlan&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8378ff6944164e0e9640ba7b0f430f9a.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;将0&amp;#x2F;0&amp;#x2F;1和0&amp;#x2F;0&amp;#x2F;2端口设置为access类型：通过access端口的数据包都是不带VLAN tag的，且只属于一个VLAN，在access端口进方向，交换机接收到数据包后，先判断是否带VLAN tag，有则丢弃数据包，没有则打上该端口已配置的VLAN tag，在access端口出方向，交换机将打了与端口相同VLAN tag的数据包转发出去，并且去掉VLAN tag变成普通数据包，一般连接计算机&lt;ul&gt;
&lt;li&gt;输入命令 dis cur 查看端口名称，注意：按回车键可以显示更多信息，按 ctrl + c可以退出该命令&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/631e9003a02d41c2918b355bc52c413a.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;设置access类型，并且将端口分配给不同的VLAN&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/821fba44c98a466b8bcec572c88e700f.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;因为GE 0&amp;#x2F;0&amp;#x2F;1端口接PC1，并且GE 0&amp;#x2F;0&amp;#x2F;1端口分配给了vlan2，所以PC1就在vlan 2中了，同理，PC3在vlan3中，此时如果我们在PC1的命令行中ping PC2是不能ping通了，因为他们已经不在同一个局域网中了。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ec6a55f4c59b471c8524a4767658ce72.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;将0&amp;#x2F;0&amp;#x2F;3端口设置为trunk类型：端口可以承载多个VLAN，通过trunk端口的数据包都必须带上VLAN tag，在trunk端口进方向，交换机接收到数据包后，先判断是否带VLAN tag，没有则丢弃数据包，有则按照对应VLAN进行转发，在trunk端口出方向，交换机将带VLAN tag的数据包原封不动转发出去，没有带VLAN tag数据包不会从trunk端口转发出去，一般用来接其他交换机&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/428ad8d56c5e42fda197a9fa7c3e5ba3.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;设置完交换机LSW1后，用同样的方法设置交换机LSW2，同样的将0&amp;#x2F;0&amp;#x2F;1端口分配给vlan2，将0&amp;#x2F;0&amp;#x2F;2端口分配给vlan3，0&amp;#x2F;0&amp;#x2F;3端口设置为trunk模式。&lt;/li&gt;
&lt;li&gt;设置完成以后，PC1和PC3属于vlan2， PC2和PC4属于vlan3&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4872f8c95a314fa8b0073508ea0c63a0.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;我们可以在PC1和PC2上使用ping命令验证&lt;ul&gt;
&lt;li&gt;PC1 ping命令&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9b1696b0696c45409ed65640e705fcfa.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;PC2 ping 命令  &lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/7fc63ad33a8a44b1af2b9c6b82f6f6be.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-4-网络层&#34;&gt;&lt;a href=&#34;#2-4-网络层&#34; class=&#34;headerlink&#34; title=&#34;2.4 网络层&#34;&gt;&lt;/a&gt;2.4 网络层&lt;/h2&gt;&lt;h3 id=&#34;2-4-1-网络层概述&#34;&gt;&lt;a href=&#34;#2-4-1-网络层概述&#34; class=&#34;headerlink&#34; title=&#34;2.4.1 网络层概述&#34;&gt;&lt;/a&gt;2.4.1 网络层概述&lt;/h3&gt;&lt;p&gt;网络层的主要任务是实现&lt;strong&gt;网络互连&lt;/strong&gt;，进而&lt;strong&gt;实现数据包在各网络之间的传输&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b3e6d491758c463e9e15f20412dc5b19.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;要实现网络层任务，需要解决以下主要问题：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网络层向运输层提供怎样的服务（“可靠传输”还是“不可靠传输”)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;TCP&amp;#x2F;IP协议体系结构的网际层提供的是无连接的、不可靠的数据包服务&lt;/li&gt;
&lt;li&gt;ATM、帧中继和X.25的网络层提供的是面向连接的、可靠的虚电路服务&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4d4d2143a06949dabd36e556678ae73b.gif&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络层寻址问题&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4a220f98164244a7852948329d14224e.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由选择问题&lt;/strong&gt;：路由器根据路由表选择下一跳&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/d15391af039249de8233d043f9097ec4.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;因特网(Internet)是目前全世界用户数量最多的互联网，它使用TCP&amp;#x2F;IP协议栈&lt;/strong&gt;。由于TCP&amp;#x2F;IP协议栈的网络层使用&lt;strong&gt;网际协议IP&lt;/strong&gt;，它是整个协议栈的核心协议，因此在TCP&amp;#x2F;IP协议栈中网络层常称为&lt;strong&gt;网际层&lt;/strong&gt;。本章节我们通过学习TCP&amp;#x2F;IP协议栈的网际层来学习网络层的理论知识和实践技术。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e8aed8f8e204465286478ce215d5578f.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-4-2-IPv4地址概述&#34;&gt;&lt;a href=&#34;#2-4-2-IPv4地址概述&#34; class=&#34;headerlink&#34; title=&#34;2.4.2 IPv4地址概述&#34;&gt;&lt;/a&gt;2.4.2 IPv4地址概述&lt;/h3&gt;&lt;p&gt;1、在因特网中，为了实现计算机之间的相互通信，通常需要为每台计算机分配一个IP地址。在互联网的发展过程中主要有两个版本的互联网协议，分别是&lt;strong&gt;IPv4&lt;/strong&gt;（Internet Protocol version 4）和 &lt;strong&gt;IPv6&lt;/strong&gt;（Internet Protocol version 6）。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/cc5e2eccc2d1450daf1168a36c462a68.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;  &lt;em&gt;注意：在本课程中我们不对IPv4和IPv6的协议内容进行对比，只对比IPv4的IP地址和IPv6的IP地址。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  2、IPv4 的IP地址就是给因特网(Internet)上的每一台主机(或路由器)）的每一个接口分配一个在全世界范围内是唯一的&lt;strong&gt;32比特&lt;/strong&gt;的标识符，地址总数为&lt;strong&gt;2^32&lt;/strong&gt;个。&lt;/p&gt;
&lt;p&gt;3、IPv6 的 IP地址采用&lt;strong&gt;128比特&lt;/strong&gt;地址长度，地址总数为&lt;strong&gt;2^128&lt;/strong&gt;个。&lt;/p&gt;
&lt;p&gt;4、IP地址由&lt;strong&gt;因特网名字和数字分配机构ICANN&lt;/strong&gt;(Internet Corporation for Assigned Names and Numbers)进行分配。我国用户可向&lt;strong&gt;亚太网络信息中心APNIC&lt;/strong&gt;(Asia Pacific Network Information Center)申请IP地址，需要&lt;strong&gt;缴费&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;5、因为当下互联网中的绝大多数设备采用的是IPv4的IP地址，所以本课程我们只学习IPv4的IP地址的相关知识。&lt;/p&gt;
&lt;p&gt;6、由于32比特的IPv4地址不方便阅读、记录以及输入等，因此IPv4地址采用&lt;strong&gt;点分十进制&lt;/strong&gt;表示方法以方便用户使用，例如：192.168.1.100&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/13b0092476264bb8896ba06fb40f7420.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;7、八位无符号二进制整数转十进制：二进制表示中从右至左分别表示低比特位和高比特位。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/84e23b1a218f4f7aa58bed76b5949271.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;8、十进制正整数转8位无符号二进制数的方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;方法1：除2取余法，直到最后商为0&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/29b27d5759d44104bfd22974471bc7ab.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;方法2：凑值法&lt;/strong&gt;(必须熟记8位二进制数各位的权值128 64 32 16 8 4 2 1)&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/77e2e3081651413582dbc509b1b6926e.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-4-3-IPv4-地址的分类&#34;&gt;&lt;a href=&#34;#2-4-3-IPv4-地址的分类&#34; class=&#34;headerlink&#34; title=&#34;2.4.3 IPv4 地址的分类&#34;&gt;&lt;/a&gt;2.4.3 IPv4 地址的分类&lt;/h3&gt;&lt;p&gt;1、IPv4 的IP地址由&lt;strong&gt;网络号&lt;/strong&gt;（指定主机所属的网络）和 &lt;strong&gt;主机号&lt;/strong&gt;（指定被寻址的子网中的某个节点）组成，IP地址可以分为A、B、C、D、E五类。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6464fc4fe345420e8947b63e1c5127ff.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、注意事项：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/10dd518c2fa1475285bc8651361bcf3b.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、各类IP地址的细节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A类地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A类地址的取值范围：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/306288ebc1084f9682ee3dcf184d93a9.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;A类地址可指派的网络数量：因为网络号占8个bit，并且最高位固定为0，网络号有2^7&amp;#x3D;128中组合，但是因为最小网络号0和最大网络号127不能指派，所以最终A类IP地址能够指派的网络数量为：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6ced5ed4c9294f8095580e8e7745bb27.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;A类地址每个网络中可以分配的地址数量：因为主机号站24个bit，主机号有2^24种组合，因为全0的网络号和全1的广播地址不能指派，所以需要减2&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b69ad7bf6cb94c558057384a12d22c51.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;B类地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;B类地址的取值范围：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/05de7fefd7ef4fb78f26469ed1004cb4.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;B类地址可指派的网络数量：因为网络号占16个bit，并且最高位固定为10，网络号有2^(16-2)种组合&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/a5d051c1e4ba401599405e2e57164d29.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;B类地址每个网络中可以分配的地址数量：因为主机号站16个bit，主机号有2^16种组合，因为全0的网络号和全1的广播地址不能指派，所以需要减2&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/98cb0741c2024e1198750e4cab33ca51.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;C类地址&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C类地址的取值范围&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/53e7a6fbc25a418baa2234dbc27351f0.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;C类地址可指派的网络数量：因为网络号占24个bit，并且最高位固定为110，网络号有2^(24-3)&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/f29b2b0e71e44c878174d84236f98a6a.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;C类地址每个网络中可以分配的地址数量：因为主机号站8个bit，主机号有2^8种组合，因为全0的网络号和全1的广播地址不能指派，所以需要减2&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/5b617427ab1f4ccd9cdf3926f4daacb2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;D类、E类地址&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/5d719a58afbb4b33870fdf7b48645552.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;练习1&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/aa63d155eeb24abda1d051f2257359a1.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;练习2&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4fb123caa43b4ea1b437b53dd26ad535.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-4-4-子网的划分&#34;&gt;&lt;a href=&#34;#2-4-4-子网的划分&#34; class=&#34;headerlink&#34; title=&#34;2.4.4 子网的划分&#34;&gt;&lt;/a&gt;2.4.4 子网的划分&lt;/h3&gt;&lt;p&gt;1、我们先来看一道笔试题：用一根网线直接相连的两台主机的IP地址分别为192.168.1.100、192.168.2.100，请问使用什么方法可以让这两台主机能够进行正常的数据通信？&lt;/p&gt;
&lt;p&gt;答案：&lt;strong&gt;将两台主机的子网掩码设置为255.255.0.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、子网掩码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;子网掩码(subnet mask)是一个&lt;strong&gt;32位&lt;/strong&gt;地址，又叫网络掩码、地址掩码，它用来&lt;strong&gt;指明一个IP地址的哪些位标识的是主机所在的子网，以及哪些位标识的是主机&lt;/strong&gt;。子网掩码不能单独存在，它必须结合IP地址一起使用。子网掩码&lt;strong&gt;将某个IP地址划分成网络地址和主机地址两部分&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;左边是网络位，用二进制数字“1”表示，1的数目等于网络位的长度；右边是主机位，用二进制数字“0”表示，0的数目等于主机位的长度。这样做的目的是为了让掩码与IP地址做按位与运算时用0遮住原主机数，而不改变原网络段数字，而且很容易通过0的位数确定子网的主机数。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/74c187924a954a20b17c0e2be9be8ae7.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子网掩码的两个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;屏蔽IP地址的一部分以区别网络标识和主机标识&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将一个大的IP网络划分为若干小的子网络&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子网掩码的工作流程：将32位的子网掩码与IP地址进行二进制形式的按位逻辑“与”运算，得到该IPv4地址所在的网络地址&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1fa492a5203a4e3e81e95fdb663dd989.png&#34;&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/81f103348f44489ca28910a60dda06ba.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、子网的划分&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;子网掩码是在IPv4地址资源紧缺的背景下为了解决lP地址分配而产生的&lt;strong&gt;虚拟lP技术&lt;/strong&gt;，通过子网掩码将A、B、C三类地址划分为&lt;strong&gt;若干子网&lt;/strong&gt;，从而显著&lt;strong&gt;提高了IP地址的分配效率&lt;/strong&gt;，有效解决了IP地址资源紧张的局面。另一方面，在企业内网中为了更好地管理网络，网管人员也利用子网掩码的作用，人为地&lt;strong&gt;将一个较大的企业内部网络划分为更多个小规模的子网&lt;/strong&gt;，再利用三层交换机的路由功能实现子网互联，从而有效&lt;strong&gt;解决了网络广播风暴和网络病毒&lt;/strong&gt;等诸多网络管理方面的问题。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ac640d017ed242c995ec60898751cfbf.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们举例说明划分子网的细节：已知某个网络的地址为218.75.230.0，使用子网掩码255.255.255.128对其进行子网划分，请给出划分细节。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;解析流程：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从IP地址坐起第一个十进制为218，所以该IP地址为C类地址，C类地址的子网掩码默认为：255.255.255.0，而此时给出的子网掩码为255.255.255.128，则说明子网掩码向主机号借用了一个bit作为子网号&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/3b970806648446af9d613ec384a94f77.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;因为子网掩码向主机号借用了一个bit作为子网号，所以可划分出来的子网数量为2^1 &amp;#x3D; 2 个。每个子网可分配的地址数量为：2^(8-1) - 2 &amp;#x3D; 126个。因为主机号的最高位被子网掩码借用了，主机号只有7位了，所以最多可分配2^(8-1)&amp;#x3D;128个地址，但是还需要去掉主机号为全0的网络地址和主机号为全1的广播地址所以还需要减2。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/bc5b19420f224db2849fbba1a528b544.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;详细的子网划分&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/bddeb4ea38a14ae081114a3685cd707e.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、练习题：我们通过一道考研真题对子网的划分方法进行巩固&lt;br&gt;  &lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2ad399def58a4a848545929082aeaaf5.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、子网掩码的&lt;strong&gt;CIDR斜线记法&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;格式：IP地址&amp;#x2F;n&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;说明：n表示子网掩码所使用的bit数，表示子网掩码中网络号的长度，通过n的个数确定子网的主机数&amp;#x3D;2^(32-n)-2&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;例1：192.168.1.100&amp;#x2F;24，其子网掩码表示为255.255.255.0&lt;/p&gt;
&lt;p&gt;例2：172.16.198.12&amp;#x2F;20，其子网掩码表示为255.255.240.0&lt;/p&gt;
&lt;h3 id=&#34;2-4-5-IP-协议&#34;&gt;&lt;a href=&#34;#2-4-5-IP-协议&#34; class=&#34;headerlink&#34; title=&#34;2.4.5 IP 协议&#34;&gt;&lt;/a&gt;2.4.5 IP 协议&lt;/h3&gt;&lt;p&gt;1、&lt;strong&gt;用户数据&lt;/strong&gt;在网络层（网际层）中使用&lt;strong&gt;IP协议&lt;/strong&gt;进行封装，然后交付给数据链路层。IP协议提供&lt;strong&gt;不可靠无连接&lt;/strong&gt;的&lt;strong&gt;数据报传输服务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2、使用IP协议封装的数据我们称之为&lt;strong&gt;IP数据报&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;3、IP数据报的首部：IP数据报的首部由20个字节组成，IP数据报的首部常以32个比特为单位进行描述，下图中的每一行都由32个比特（也就是4个字节）构成，每个小格子称为字段或者域。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6a8fa94e8e6249e09d21fcff4035332e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/0e59eaf8ddc34256889d3ebaf941473c.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;版本：占4比特，表示IP协议的版本&lt;/li&gt;
&lt;li&gt;首部长度：占4比特，表示IP数据报首部的长度。该字段的取值以4字节为单位。最小十进制取值为5，表示lP数据报首部只有20字节固定部分，最大十进制取值为15，表示IP数据报首部包含20字节固定部分和最大40字节可变部分&lt;/li&gt;
&lt;li&gt;区分服务：8比特，一般不使用&lt;/li&gt;
&lt;li&gt;总长度：占16比特，表示IP数据报的总长度（首部+数据载荷)。最大取值为十进制的65535，以字节为单位（实际使用中不会传输这么长的IP数据报）。&lt;/li&gt;
&lt;li&gt;标识、标志、片偏移：这三个字段共同用于IP数据报分片，以太网中数据链路层规定MTU的值为1500字节，如果某个IP数据报总长度超过MTU，需要将原IP数据报分片成多个小的数据报，再将每个小的数据报封装成帧。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1af7ec03c9754fc6b106836f0289e92f.png&#34;&gt;&lt;ul&gt;
&lt;li&gt;标识：占16比特，属于同一个数据报的各分片数据报应该具有相同的标识。IP软件维持一个计数器，每产生一个数据报，计数器值加1，并将此值赋给标识字段。&lt;/li&gt;
&lt;li&gt;标志：占3比特，各比特含义如下：&lt;ul&gt;
&lt;li&gt;DF位：1表示不允许分片,0表示允许分片&lt;/li&gt;
&lt;li&gt;MF位：1表示“后面还有分片”，0表示“这是最后一个分片”&lt;/li&gt;
&lt;li&gt;保留位：必须为0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;片偏移：占13比特，指出分片数据报的数据载荷部分偏移其在原数据报的位置有多少个单位，片偏移以8个字节为单位。&lt;/li&gt;
&lt;li&gt;IP数据报分片举例&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/793e45ed3eb84af59a97785c1d246c50.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;生存时间：占8比特，最初以秒为单位，最大生存周期为255秒。路由器转发IP数据报时将IP数据报首部中的该字段的值减去IP数据报在本路由器上所耗费的时间，若不为0就转发，否则就丢弃。现在以“跳数”为单位，路由器转发IP数据报时，将IP数据报首部中的该字段的值减1，若不为0就转发，否则就丢弃。&lt;ul&gt;
&lt;li&gt;TTL作用可以防止IP数据报再网络中永久兜圈&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/612745a6ede640d6afd93607b4bafc50.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;协议：占8比特，指明IPv4数据报的数据部分是何种协议数据单元。常用的一些协议和相应的协议字段值如下。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/79377238a89043919e018374f3d2ffd3.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;首部检验和：占16比特，用来检测首部在传输过程中是否出现差错。比CRC检验码简单，称为因特网检验和。IP数据报每经过一个路由器，路由器都要重新计算首部检验和，因为某些字段（生存时间、标志片偏移等)的取值可能发生变化。&lt;/li&gt;
&lt;li&gt;源IP地址：占32比特，表示发送主机的IP地址。&lt;/li&gt;
&lt;li&gt;目的IP地址：占32比特，表示目的主机的IP地址。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-4-6-IP数据报的发送和转发过程&#34;&gt;&lt;a href=&#34;#2-4-6-IP数据报的发送和转发过程&#34; class=&#34;headerlink&#34; title=&#34;2.4.6 IP数据报的发送和转发过程&#34;&gt;&lt;/a&gt;2.4.6 IP数据报的发送和转发过程&lt;/h3&gt;&lt;p&gt;IP数据报的发送和转发过程包含两部分：&lt;strong&gt;主机发送IP数据报、路由器转发数据报&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设在网络中由一台路由器连接了两个局域网，每个局域网的网络地址、子网掩码，以及每台主机的IP地址分配如下图所示：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c40175bcaad741188ca47b24958c9b9f.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;请同学们思考：为什么左边网络的网络地址是：192.168.0.0，右边网络的网络地址是192.168.0.128?&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9592d08b343a47c59b6ceff582d2e0da.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;同一个网络中的主机是可以直接通信的， 这叫做&lt;strong&gt;直接交付&lt;/strong&gt;，而不同网络中间的主机是不能直接通信的，需要通过路由器进行中转，这属于&lt;strong&gt;间接交付&lt;/strong&gt;。那&lt;strong&gt;源主机是如何判断目的主机和自己是否在同一个网络中呢&lt;/strong&gt;？&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/19ca23c240b5425f82b87927deefea20.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;主机C将自己的IP地址与子网掩码进行按位与操作得到主机C的网络地址：192.168.0.0，然后将目的主机的IP地址与自己的子网掩码进行按位与操作得到目的网络地址：192.168.0.128，发现两个网路并不相等，说明主机C和主机F不在同一个网络中，不能进行直接交付，主机C将数据发送给路由器R，由路由器R再转发给主机F，这样就实现了主机F和主机F之间的数据通信（间接交付）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/0da67e5afd59402a8ccece46d4c7f271.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是问题又来了：&lt;strong&gt;主机C又是如何知道要将数据发送给路由器R呢？我们需要将路由器的接口地址192.168.0.126作为主机C的默认网关&lt;/strong&gt;，这样当主机C发现目的地址与自己不在同一网络中时则将数据发送给设置好的默认网关（路由器）。因此我们可以将左边网络中所有主机的默认网关填写为192.168.0.126，将右边网络所有主机的默认网关填写为192.168.0.254。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/60feba4a6ff94260a66942fb9fd63aa2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;那么路由器又是如何对数据进行转发的呢？假设主机A需要将数据发送给主机D，因为主机A与主机D不在同一个网络，所以主机A将数据发送给路由器R，路由器会进行如下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先&lt;strong&gt;检查lP数据报首部是否出错&lt;/strong&gt;：若出错，则直接丢弃该lP数据报并通告源主机，若没有出错，则进行转发&lt;/li&gt;
&lt;li&gt;然后&lt;strong&gt;根据IP数据报的目的地址在路由表中查找匹配的条目&lt;/strong&gt;：若找到匹配的条目，则转发给条目中指示的下一跳若找不到，则丢弃该IP数据报并通告源主机&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/67c3d16955764a238dabe8c3825f1148.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-4-7-路由表&#34;&gt;&lt;a href=&#34;#2-4-7-路由表&#34; class=&#34;headerlink&#34; title=&#34;2.4.7 路由表&#34;&gt;&lt;/a&gt;2.4.7 路由表&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、什么是路由？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;路由就是报文从源端到目的端的路径&lt;/strong&gt;。当报文从路由器到目的网段有多条路由可达时，路由器可以根据路由表中最佳路由进行转发。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8201cdba7aaa47839645e53190adb8a9.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、什么是路由表？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在计算机网络中，路由表（routing table）是一个&lt;strong&gt;存储在路由器或者联网计算机中的电子表格（文件）或类数据库。路由表存储着指向特定网络地址的路径。路由表建立的主要目标是为了实现路由协议和静态路由选择。路由表就相当于一张地图告诉数据报该如何去往目的地。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;路由器会根据路由表进行数据包的转发：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/369ba24380f547558e9707647cff01e1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在ubuntu系统下我们可以使用&lt;strong&gt;route -n&lt;/strong&gt; 命令查看系统的路由表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/cd926f3edc0c4d5e93455da903db9395.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;在windows下可以使用 &lt;strong&gt;route print&lt;/strong&gt; 命令查看系统的路由表：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/17f7e6a44a3e4a2dafc78142a2b31ec0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们发现ubuntu和windows系统的路由表中都有一条特殊的路由：目标地址为全网地址0.0.0.0 ，子网掩码为0.0.0.0，对应下一跳的地址为网关地址。那么这条路由的作用是什么呢？&lt;/p&gt;
&lt;p&gt;我们先了解一下，计算机或者路由器是如何将一条数据通过网络发送出去的。首先将目的IP地址与自己的子网掩码进行按位与运算得到目的主机的主机号，然后拿该主机号与路由表中的路由进行匹配，如果匹配到了则将数据转发给指定的下一跳，如果没有匹配到，则转发给目标地址为0.0.0.0所对应的下一跳。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因此目标地址为0.0.0.0所对应的那条路由的作用就是：这条路由就是我们所说的默认路由，是对IP数据包中的目的地址找不到存在的其他路由时，路由器所选择的路由。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意1：当我们发现主机（尤其是一些嵌入式或者物联网的设备）不能够上网或者不能ping通外网的时候，假如检查了IP地址、DNS等设置都没问题后依然不能解决，我们可以查看系统的路由表中是否没有添加默认路由。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意2：不同的路由器查看路由表的命令不一样&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;思科路由器查看路由表命令为：show ip route&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;华为路由器查看路由表命令为：display ip routing-table&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、路由表的类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;路由表可以分为：静态路由和动态路由。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;动态路由&lt;/strong&gt;：动态路由是指动态路由协议(如RIP)自动建立路由，并且能够根据实际情况的变化适时地进行调整。&lt;ul&gt;
&lt;li&gt;动态路由之所以能根据网络的情况自动计算路由、选择转发路径，是由于当网络发生变化时，路由器之间彼此交换的路由信息会告知对方网络的这种变化，通过信息扩散使所有路由器都能得知网络变化。&lt;/li&gt;
&lt;li&gt;路由器根据某种路由算法（不同的动态路由协议算法不同）把收集到的路由信息加工成路由表，供路由器在转发IP报文时查阅&lt;/li&gt;
&lt;li&gt;常见的动态路由协议有：RIP、OSPF、IS-IS、BGP、IGRP&amp;#x2F;EIGRP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态路由&lt;/strong&gt;：由网络管理员手动配置的路由。&lt;ul&gt;
&lt;li&gt;Linux系统静态路由操作：&lt;ul&gt;
&lt;li&gt;添加路由：&lt;strong&gt;route -n add -net 目标地址&amp;#x2F;子网掩码位数 gw 下一跳&lt;/strong&gt;，例如：route -n add -net 192.168.1.0&amp;#x2F;24 192.168.33.2&lt;/li&gt;
&lt;li&gt;添加默认路由：&lt;strong&gt;route add default gw IP&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;删除路由：&lt;strong&gt;route delete -net 目标地址&amp;#x2F;子网掩码位数&lt;/strong&gt;，例如：route delete -net 192.168.1.0&amp;#x2F;24&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意：参数-net 表示操作某个网段，如果操作的数具体某台主机的地址则使用-host选项&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;路由器静态路由操作：&lt;ul&gt;
&lt;li&gt;添加路由：&lt;strong&gt;ip route 目标地址 子网掩码 下一跳地址&lt;/strong&gt;，例如：ip route 192.168.3.0 255.255.255.0 192.168.1.1&lt;/li&gt;
&lt;li&gt;删除路由：&lt;strong&gt;no ip route 目标地址 子网掩码 下一跳地址&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4、路由表实验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下面我们使用思科的模拟器Cisco Packet Tracer进行路由表的实验&lt;/p&gt;
&lt;p&gt;1）首先我们先搭建基础的网络，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/12bbff9b306e404aa674f9e7070108e7.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2）在此次实验中我们通过设置三个路由器的路由表实现主机PC0与主机PC1之间的通信&lt;/p&gt;
&lt;p&gt;3）分别设置主机PC0与主机PC1的ip地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e77b2a0699894561af591792694c3f1b.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/801c18c5050049c29aa4f28b61e30c6d.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;4）分别设置三台路由器的IP地址&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4b6100b8a1d7457884d3243864ffdd58.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c13b9dde6117465fb83e5eda615b1c6b.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e94f894fb5dd47afa921b46f7ec4afe0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/95ef89948e9848af95110c53bc8a9861.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/69e3de3fb76a43d8b7888ba6ab7f11d0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/96ca5270764d40079c8f318feadbcc58.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5）分别为三个路由器设置静态路由&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/a7244af258fa42c5ab16f0205245b6ed.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/5e71211c041542ff99590cdfe59fa281.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/a03f5983b1e842c88bfdb7cf24ff3b69.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/3fbc6da2c94b4f58bf176648e59c3b3c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;6）在PC0尝试ping PC1&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/75166cbf55634638939decf683ac17e5.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-4-8-ARP高速缓存表&#34;&gt;&lt;a href=&#34;#2-4-8-ARP高速缓存表&#34; class=&#34;headerlink&#34; title=&#34;2.4.8 ARP高速缓存表&#34;&gt;&lt;/a&gt;2.4.8 ARP高速缓存表&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、地址解析协议ARP&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过前面的学习，我们知道：如果网络中的主机需要互相通信，那么源主机必须要知道目的主机的IP地址和MAC地址，因为在数据链路层封装的MAC帧中需要封装目的地址和源地址。当已知目的主机的IP地址时，可以&lt;strong&gt;通过ARP协议获得目的主机的MAC地址。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ARP请求报文封装在MAC帧中，目的地址为FF-FF-FF-FF，并且以广播的形式发送的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/25de6ea226184a57a6a730cf818b2d71.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ARP协议工作流程&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/984f2cb9f75549c2a6e4e1f249170816.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2、ARP高速缓存表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ARP高速缓存(ARP cache)，由最近的ARP项组成的一张临时表，表中记录了&lt;strong&gt;主机IP地址和MAC地址的对应关系&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9c0c0912b4dc4ad39587fd9c9a72d685.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：ARP报文只能在发送主机所在的广播域中被使用！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2ccf4bf2ce964086ac1bcc8ace63002e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、ARP欺骗&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;ARP 欺骗是一种以 &lt;strong&gt;ARP 地址解析协议为基础&lt;/strong&gt;的一种网络攻击方式。&lt;/p&gt;
&lt;p&gt;ARP欺骗的原理：利用&lt;strong&gt;ARP协议没有安全认证机制&lt;/strong&gt;，攻击者发送假的ARP数据包到网上，尤其是送到网关上。其目的是要让送至特定的IP地址的流量被错误送到攻击者所取代的地方。因此攻击者可将这些流量另行转送到真正的网关（被动式数据包嗅探，passive sniffing）或是篡改后再转送（中间人攻击，man-in-the-middle attack）。&lt;/p&gt;
&lt;p&gt;ARP欺骗分为两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主机型欺骗：攻击者向其他主机发送ARP响应包，攻击者在响应包中填入网关的IP地址和自己MAC地址，这样主机A应该发送给网关的数据包会被网关转发给主机B&lt;/li&gt;
&lt;li&gt;网关型欺骗：攻击者向网关发送ARP响应包，攻击者在响应包中填入被攻击主机的IP地址和自己MAC地址，这样网关接收到互联网中发给主机A的数据时也会转发给主机B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4435eed3d6ea419fb434761a876bc276.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;ARP欺骗的危害：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;信息安全收到威胁&lt;/li&gt;
&lt;li&gt;网络延迟增加&lt;/li&gt;
&lt;li&gt;网络通信中断&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ARP欺骗防范方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装补丁&lt;/li&gt;
&lt;li&gt;静态绑定：网内的主机与网关做IP和MAC绑定&lt;/li&gt;
&lt;li&gt;使用ARP防火墙&lt;/li&gt;
&lt;li&gt;不要点开通讯工具中的一些可疑链接、图片、文件等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-4-9-特殊IP地址&#34;&gt;&lt;a href=&#34;#2-4-9-特殊IP地址&#34; class=&#34;headerlink&#34; title=&#34;2.4.9 特殊IP地址&#34;&gt;&lt;/a&gt;2.4.9 特殊IP地址&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、127.0.0.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;回环地址，该地址还有 一个别名叫 “localhost”，无论是哪个程序，一旦使用该地址发送数据，协议软件会立即返回，不进行任何网络传输，除非出错，包含该网络号的分组是不能够出现 在任何网络上的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、10.&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;，172.16.&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;――172.31.&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;，192.168.&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面三个网段是私有地址，可以用于自己组网使用，这些地址主要用于企业内部网络中，但不能够在Internet网上使用，Internet网没有这些地址 的路由，而使用这三个网段的计算机要上网必须要通过网络地址转换(NAT)，将私有地址翻译成公用合法的IP地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、255.255.255.255&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;受限制的广播地址，对本机来说，这个地址指本网段内(同一个广播域)的所有主机，该地址用于主机配置过程中IP数据包的目的地址，这时主机可能还不知道它 所在网络的网络掩码，甚至连它的IP地址也还不知道。在任何情况下，路由器都会禁止转发目的地址为受限的广播地址的数据包，这样的数据包仅会出现在本地网络中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、224.0.0.0—239.255.255.255&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;组播地址&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;5、169.254.&lt;code&gt;*&lt;/code&gt;.&lt;code&gt;*&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你的主机使用了DHCP功能自动获得一个ip地址，那么当你的DHCP服务器发生故障或响应时间太长而超出系统规定的一个时间，windows系统会为你分配这样一个地址。如果你发现你的主机ip地址是个诸如此类的地址，很不幸，十有八九是你的网络不能正常运行了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6、114.114.114.114&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;中国电信DNS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7、8.8.8.8&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;谷歌DNS&lt;/p&gt;
&lt;h2 id=&#34;2-5-运输层&#34;&gt;&lt;a href=&#34;#2-5-运输层&#34; class=&#34;headerlink&#34; title=&#34;2.5 运输层&#34;&gt;&lt;/a&gt;2.5 运输层&lt;/h2&gt;&lt;h3 id=&#34;2-5-1-运输层概述&#34;&gt;&lt;a href=&#34;#2-5-1-运输层概述&#34; class=&#34;headerlink&#34; title=&#34;2.5.1 运输层概述&#34;&gt;&lt;/a&gt;2.5.1 运输层概述&lt;/h3&gt;&lt;p&gt;之前课程所介绍的计算机网络体系结构中的物理层、数据链路层以及网络层它们共同解决了将主机通过异构网络互联起来所面临的问题，实现了主机到主机的通信。两个主机进行通信实际上就是两个主机中的&lt;strong&gt;应用进程互相通信&lt;/strong&gt;，应用进程之间的通信又称为&lt;strong&gt;端到端的通信&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当网络的边缘部分中的两个主机使用网络的核心部分的功能进行端到端的通信时，只有位于&lt;strong&gt;网络边缘部分的主机&lt;/strong&gt;的协议栈才有运输层，而网络核心部分中的路由器在转发分组时都只用到下三层的功能。&lt;strong&gt;如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/35de417d8a074dfb898629ff42762bed.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;运输层提供的是应用进程间的&lt;strong&gt;逻辑通信&lt;/strong&gt;，“逻辑通信”的意思是：运输层之间的通信好像是沿水平方向传送数据。但事实上这两个运输层之间并没有一条水平方向的物理连接。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c3e695530ec4467db6883a5d8f664711.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-5-2-端口号&#34;&gt;&lt;a href=&#34;#2-5-2-端口号&#34; class=&#34;headerlink&#34; title=&#34;2.5.2 端口号&#34;&gt;&lt;/a&gt;2.5.2 端口号&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、思考&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主机A使用QQ向PC发送了一组数据，数据在网络中经过传输后到达主机B，主机B对数据进行解包以后又是如何知道该数据是发送给哪个进程的呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP&amp;#x2F;IP体系的运输层使用&lt;strong&gt;端口号&lt;/strong&gt;来区分应用层的不同应用进程。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、端口号的值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;端口号使用&lt;strong&gt;16比特&lt;/strong&gt;表示，取值范围0~65535&lt;/li&gt;
&lt;li&gt;熟知端口号：0~1023，IANA把这些端口号指派给了TCP&amp;#x2F;IP体系中最重要的一些应用协议，例如：&lt;strong&gt;FTP使用21&amp;#x2F;20，HTTP使用80，DNS使用53&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;登记端口号:1024~49151，为没有熟知端口号的应用程序使用。使用这类端口号必须在IANA按照规定的手续登记，以防止重复。例如：Microsoft RDP微软远程桌面使用的端口是3389。&lt;/li&gt;
&lt;li&gt;短暂端口号:49152~65535，留给客户进程选择暂时使用。当服务器进程收到客户进程的报文时，就知道了客户进程所使用的动态端口号。通信结束后，这个端口号可供其他客户进程以后使用。&lt;/li&gt;
&lt;li&gt;常用端口号及对应的网络应用程序表格如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c48154d2fc544ceeadd960656632e024.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Linux中&amp;#x2F;etc&amp;#x2F;service文件中保存了知名的服务器端口号&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/fd34cda6cf984c2a9a0fd954588e4154.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;端口号只具有本地意义&lt;/strong&gt;，即端口号只是为了标识本计算机应用层中的各进程，在因特网中,不同计算机中的相同端口号是没有联系的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-5-3-传输控制协议TCP&#34;&gt;&lt;a href=&#34;#2-5-3-传输控制协议TCP&#34; class=&#34;headerlink&#34; title=&#34;2.5.3 传输控制协议TCP&#34;&gt;&lt;/a&gt;2.5.3 传输控制协议TCP&lt;/h3&gt;&lt;p&gt;传输控制协议 TCP (Transmission Control Protocol)一种&lt;strong&gt;基于连接的可靠的稳定的无重复的传输协议&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、TCP头部信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP协议头部信息如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1635157ce88b4a5490fe330274ea253d.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/60f25c753f3545c4931ad4018307698d.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;16位源端口号（Source Port）&lt;/strong&gt;：发送主机中进程的端口号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位目的端口号（Destination Port）&lt;/strong&gt;：接收主机中进程的端口号&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;32位序列号（Sequence Number）&lt;/strong&gt;：每一个包中都包含序列号，序列号被系统初始化为某个随机值ISN。后续的TCP报文段中序号加上该报文段所携带数据的第一个字节在整个字节流中的偏移。例如，某个TCP报文段传送的数据是字节流中的第1025～2048字节，那么该报文段的序号值就是ISN+1025&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;32位确认号（Acknowledgment Number）&lt;/strong&gt;：目的主机返回确认号，使源主机知道某个或几个报文段已被接收&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;四位首部长度（Header Length）&lt;/strong&gt;：由于TCP首部包含一个长度可变的选项部分，所以需要这么一个值来指定这个TCP报文段到底有多长&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URG标志&lt;/strong&gt;：表示紧急指针（urgent pointer）是否有效&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ACK标志&lt;/strong&gt;：表示确认号是否有效。我们称携带ACK标识的TCP报文段为确认报文段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PSH标志&lt;/strong&gt;：提示接收端应用程序应该立即从TCP接收缓冲区中读走数据，为接收后续数据腾出空间（如果应用程序不将接收到的数据读走，它们就会一直停留在TCP接收缓冲区中）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RST标志&lt;/strong&gt;：表示要求对方重新建立连接。我们称携带RST标志的TCP报文段为复位报文段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SYN标志&lt;/strong&gt;：表示请求建立一个连接。我们称携带SYN标志的TCP报文段为同步报文段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FIN标志&lt;/strong&gt;：表示通知对方本端要关闭连接了。我们称携带FIN标志的TCP报文段为结束报文段&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位窗口大小（window size）&lt;/strong&gt; ：是TCP流量控制的一个手段。这里说的窗口，指的是接收通告窗口（Receiver Window，RWND）。它告诉对方本端的TCP接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位校验和（TCP check sum）&lt;/strong&gt;： 由发送端填充，接收端对TCP报文段执行CRC算法以检验TCP报文段在传输过程中是否损坏。注意，这个校验不仅包括TCP头部，也包括数据部分。这也是TCP可靠传输的一个重要保障。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;16位紧急指针（urgent pointer）&lt;/strong&gt; ：是一个正的偏移量。它和序号字段的值相加表示最后一个紧急数据的下一字节的序号。因此，确切地说，这个字段是紧急指针相对当前序号的偏移，不妨称之为紧急偏移。TCP的紧急指针是发送端向接收端发送紧急数据的方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP头部选项&lt;/strong&gt; ：TCP头部的最后一个选项字段（options）是可变长的可选信息。这部分最多包含40字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2、TCP运输连接的阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立TCP连接&lt;/li&gt;
&lt;li&gt;数据传输&lt;/li&gt;
&lt;li&gt;释放TCP连接&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/f769ce54c8ec4e77a8b1c9a5fb041c7d.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：三报文握手我们也称之为三次握手或者三路握手，四报文挥手我们也称之为四次挥手或者四路挥手&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、TCP连接的建立&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TCP连接的建立需要解决以下三个问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使TCP双方能够确知对方的存在&lt;/li&gt;
&lt;li&gt;使TCP双方能够协商一些参数（如最大窗口值、是否使用窗口扩大选项和时间戳选项以及服务质量等)&lt;/li&gt;
&lt;li&gt;使TCP双方能够对运输实体资源（如缓存大小、连接表中的项目等)进行分配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;三次握手过程&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;由客户端的某个进程主动发起TCP连接建立，最初两端的TCP进程都处于&lt;strong&gt;关闭状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TCP服务器被动等待客户进程的TCP请求，所以TCP服务器进入&lt;strong&gt;监听状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TCP客户进程向TCP服务器进程发送TCP建接请求报文段，并且进入&lt;strong&gt;同步已发送状态&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;TCP连接请求报文段首部中的同步位&lt;strong&gt;SYN&lt;/strong&gt;被设置为1，表明这是一个TCP连接请求报文段，32位序列号字段&lt;strong&gt;seq&lt;/strong&gt;被设置了一个初始值x，作为TCP客户进程所选择的初始序号。&lt;/li&gt;
&lt;li&gt;TCP服务器进程接收到TCP连接请求报文段后，如果同意建立连接，则向TCP客户进程发送TCP连接请求确认报文段，并且进入&lt;strong&gt;同步已接收状态&lt;/strong&gt;，该报文段首部中的&lt;strong&gt;同步位SYN和确认位ACK都设置为1&lt;/strong&gt;，表明这是一个TCP连接请求确认报文段。&lt;strong&gt;序号字段seq被设置了一个初始值y&lt;/strong&gt;，作为TCP服务器进进程选择的初始序号，&lt;strong&gt;确认号字段ack的值被设置成x+1&lt;/strong&gt;，表明接收到了TCP客户进程序号为x的报文。&lt;/li&gt;
&lt;li&gt;TCP客户进程收到TCP连接请求确认报文段后，还要向TCP服务器进程发送一个普通的TCP确认报文段，并且进入连接已建立状态，报文段首部中的&lt;strong&gt;确认位ACK设置为1&lt;/strong&gt;，表明这是一个普通的TCP确认报文段。序列号字段&lt;strong&gt;seq&lt;/strong&gt;设置为x+1，确认号字段&lt;strong&gt;ack的值被设置成y+1&lt;/strong&gt;，表明接收到了TCP服务进程序号为y的报文，TCP服务器进程收到该确认报文段后也进入&lt;strong&gt;连接已建立状态&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2a6ce72a806c44679a6f2bb7b31862e4.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思考：假如TCP连接的建立使用两次握手而不是三次握手可以吗？&lt;ul&gt;
&lt;li&gt;假设TCP客户进程发送了一个TCP请求报文段，但是该报文段在网络结点中被长时间滞留了，TCP客户采用超时重传机制重发TCP请求报文段并且被TCP服务进程接收，TCP服务进程发送一个TCP连接请求确认报文段，然后TCP服务进程和客户进程可以进行数据的传输，数据传输完成以后双方都处于关闭状态。&lt;/li&gt;
&lt;li&gt;随后滞留在网络结点中的那个失效的TCP请求报文段被TCP服务进程接收，TCP服务进程又发送一个TCP连接请求确认报文段，并且进入连接已建立状态，由于TCP客户进程并没有发起新的TCP连接请求，并且已经处于关闭状态了，因此不会理会TCP服务器发送的报文段，但是TCP服务器进程已经进入了连接已建立状态，他认为新的TCP连接已经建立好了，就会一直等待TCP客户进程发来数据，将会浪费TCP服务器主机的很多资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/3bbe482d02224af2a10b1878d3c20d2d.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因此：TCP连接的建立必须采用三次握手。&lt;/li&gt;
&lt;li&gt;练习：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6d8a06cf638e4c1abdee3216f2ce2681.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;四次挥手过程&lt;/strong&gt;：TCP通过四次挥手来释放连接，数据通信结束后，TCP双方都可以释放连接&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设由客户进程主动关闭TCP连接&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户进程发送连接释放报文段&lt;/strong&gt;，并且进入&lt;strong&gt;终止等待1状态&lt;/strong&gt;，该报文段中的首部终止位FIN设置位1，ACK设置为1，表明这是一个连接释放报文段，同时也对之前接收打报文段进行确认，seq&amp;#x3D;u表示TCP客户进程之前已发送过的数据的最后一个字节的序号+1，ack&amp;#x3D;v表示客户进程之前已收到的数据的最后一个字节的序号+1&lt;/li&gt;
&lt;li&gt;服务器进程接收到TCP连接释放报文段后，会&lt;strong&gt;发送一个普通的TCP确认报文段并且进入关闭等待状态&lt;/strong&gt;，此时TCP客户进程到服务器进程这个方向的连接就释放了，这时的TCP连接属于&lt;strong&gt;半关闭状态&lt;/strong&gt;，也就是TCP客户进程已经没有数据要发送了，但是TCP服务器进程如果还有数据需要发送，客户进程则还需要接收，这个状态可能会持续一段时间，直到TCP服务器进程将数据发送完毕。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TCP客户进程&lt;/strong&gt;收到TCP确认报文段后就进入&lt;strong&gt;终止等待2状态&lt;/strong&gt;，等待**TCP服务器进程发出的TCP连接释放报文段。&lt;/li&gt;
&lt;li&gt;当TCP服务器进程的没有数据要发送了后，释放连接（被动关闭），&lt;strong&gt;TCP服务器进程发送TCP连接释放报文段并进入最后确认状态&lt;/strong&gt;。FIN&amp;#x3D;1，ACK&amp;#x3D;1表明这是一个连接释放报文段，seq&amp;#x3D;w，ack&amp;#x3D;u+1同时也对之前收到的报文段进行确认。思考：为什么seq&amp;#x3D;w，而不是seq&amp;#x3D;v+1呢？&lt;/li&gt;
&lt;li&gt;TCP客户进程收到TCP连接释放报文段后，必须针对该报文段发送普通的TCP确认报文段，之后进入时间等待状态&lt;/li&gt;
&lt;li&gt;TCP服务器进程收到该报文段后就进入关闭状态&lt;/li&gt;
&lt;li&gt;而TCP客户进程还需要经过&lt;strong&gt;2MSL&lt;/strong&gt;后才能进入关闭状态。MSL(Maximum Segment Lifetime)意思是&lt;strong&gt;最长报文段寿命&lt;/strong&gt;，RFC793建议为&lt;strong&gt;2分钟&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e07d69f9129d47d4970fa4b45f340dad.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;思考：为什么TCP客户进程还需要经过&lt;strong&gt;2MSL&lt;/strong&gt;后才能进入关闭状态？&lt;ul&gt;
&lt;li&gt;假设TCP客户进程收到TCP连接释放报文段，并且针对该报文段发送普通的TCP确认报文段后马上进入关闭状态，但是该确认报文段丢失了，TCP服务器进程无法收到该确认报文段，TCP服务器程序就会以为之前发送的TCP连接释放报文段TCP客户进程没有收到，然后TCP服务器进程会对之前所发送的TCP连接释放报文段超时重传，并仍处于最后确认状态。由于TCP客户进程已经处于关闭状态了，不会处理TCP服务器进程发送的连接释放报文段，这样就会造成TCP服务器反复发送TCP连接释放报文段，并且一直处于最后确认状态而无法进入关闭状态。因此客户端等待2MSL可以确保服务器进程收到最后一个TCP确认报文。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/461b23d584c0464995a45a3fa1576713.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-5-4-TCP可靠传输的实现&#34;&gt;&lt;a href=&#34;#2-5-4-TCP可靠传输的实现&#34; class=&#34;headerlink&#34; title=&#34;2.5.4 TCP可靠传输的实现&#34;&gt;&lt;/a&gt;2.5.4 TCP可靠传输的实现&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、分段传输&lt;/strong&gt;：应用数据根据MSS（Maxitum Segment Size 最大分段大小，这个值TCP协议在实现的时候往往用MTU值代替（需要减去IP数据包包头的大小20Bytes和TCP数据段的包头20Bytes）所以往往MSS为1460 ）值被分割成TCP认为最适合发送的数据段。&lt;/p&gt;
&lt;p&gt;注意：在运输层的分段传输（分组传输）和网络层的IP数据报分片传输的区别：分段传输只有TCP协议才有的，并且分段的依据为MSS，分片传输的依据为MTU。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、超时重传&lt;/strong&gt;：当TCP发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、CRC校验和&lt;/strong&gt;：TCP将保持它首部和数据的检验和如果收到段的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、流量控制&lt;/strong&gt;：TCP 提供一种机制可以让「发送方」根据「接收方」的实际接收能力控制发送的数据量，这就是所谓的流量控制。TCP连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP使用的流量控制协议是&lt;strong&gt;可变大小的滑动窗口协议&lt;/strong&gt;。接收方有即时窗口（滑动窗口），随ACK报文发送。&lt;strong&gt;（TCP 利用滑动窗口实现流量控制）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、滑动窗口&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应答机制：假如TCP 每发送一个数据报，都要进行一次确认应答。当上一个数据包收到了应答了， 再发送下一个，这个模式就有点像我和你面对面聊天，你一句我一句。这样的传输方式有一个缺点：&lt;strong&gt;数据包的往返时间越长，通信的效率就越低&lt;/strong&gt;。为解决这个问题，我们可以使用累计应答。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/94702c93213041f7b4d74d25995dcd13.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;累计应答&lt;/strong&gt;：接收方在接收到多个数据包后再根据接收到的数据包进行应答，也称为&lt;strong&gt;累计确认&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;窗口&lt;/strong&gt;：窗口的实现实际上是操作系统开辟的一个&lt;strong&gt;缓存空间&lt;/strong&gt;，接收方根据实际情况在应答数据包中告知自己的接收窗口大小。&lt;strong&gt;窗口大小就是指无需等待确认应答，而可以继续发送数据的最大值（以字节为单位）&lt;/strong&gt;。发送方主机在等到确认应答返回之前，必须在缓冲区（发送窗口）中保留已发送的数据。如果按期收到确认应答，此时数据就可以从缓存区清除。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;滑动窗口&lt;/strong&gt;：如果发送窗口左部的字节已经发送并且收到了确认，那么就将发送窗口向右滑动一定距离，直到左部第一个字节不是已发送并且已确认的状态；接收窗口的滑动类似，接收窗口左部字节已经发送确认并交付主机，就向右滑动接收窗口。&lt;ul&gt;
&lt;li&gt;假设主机A发送数据给主机B，在建立TCP连接时，主机B在确认报文中将自己的接收窗口rwnd告知主机A。（假设接收窗口大小为400）&lt;/li&gt;
&lt;li&gt;主机A根据主机B的接收窗口大小创建自己的发送窗口（在内存上开辟一块空间缓存一个接收窗口大小的数据），并且假设每个数据包中载荷数据为100Bytes&lt;/li&gt;
&lt;li&gt;主机A分别将第一组数据（为了方便讲解假设seq&amp;#x3D;1，实际上应该为seq&amp;#x3D;ISN+1）, 第二组数据(seq&amp;#x3D;101)、第三组数据(seq&amp;#x3D;201)、第四组数据(seq&amp;#x3D;301)发送给主机B，中间不需要等待主机B的应答数据报（累计应答）&lt;/li&gt;
&lt;li&gt;假设第三组数据（seq&amp;#x3D;201）在输出过程中被丢失了，尽管主机B接收到了第四组数据，但是因为累计应答时只应答最大连续报文，所以应答数据包中ack&amp;#x3D;201表示序号201之前的所有数据全部正确接收。假设主机B将接收窗口大小调整为300，在应答报文中rwnd&amp;#x3D;300&lt;/li&gt;
&lt;li&gt;主机A接收到应答数据报后，将自己发送窗口中的序号1~200的数据删除，发送窗口往前（向右）移动并且将大小重新设置为300（开辟接收窗口大小的缓存序号为201-500的数据）&lt;/li&gt;
&lt;li&gt;主机B将序号为201，301，401的数据报发送给主机B&lt;/li&gt;
&lt;li&gt;假设以上三组数据报没有丢失，主机B在接收到所有数据后发送应答数据报，ack&amp;#x3D;501，并且将窗口调整为100，rwnd&amp;#x3D;100A&lt;/li&gt;
&lt;li&gt;主机A接收到应答数据报后，将自己发送窗口中的序号201~500的数据删除，发送窗口往前（向右）移动并且将大小重新设置为100（开辟接收窗口大小的缓存序号为501-600的数据）&lt;/li&gt;
&lt;li&gt;主机A将序号位600的数据报发送给主机B ，按照以上逻辑知道数据发送完毕。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1a6be778013148e2af24f50725672040.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/1a6be778013148e2af24f50725672040.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;接收窗口为0的处理&lt;/strong&gt;：当发送窗口被调整为0后，发送方就不能再发送数据了，假如接收方的接收窗口调整为大于0了，如果不采取特殊措施发送方是不知道的，因为接收方不会主动告知发送方自己接收窗口的大小。这时就需要持续计数器了，当发送方接收到接收窗口为0的应答报文时马上启动一个&lt;strong&gt;持续计时器&lt;/strong&gt;，当定时达到时主动向接收方发送一个&lt;strong&gt;零窗口探测报文&lt;/strong&gt;，该报文只携带一个字节的数据，然后这种逻辑直到接收方回复的接收窗口大于0。&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/d44e97c3a3b74fb0872e118d5f235858.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-5-5-用户数据报协议UDP&#34;&gt;&lt;a href=&#34;#2-5-5-用户数据报协议UDP&#34; class=&#34;headerlink&#34; title=&#34;2.5.5 用户数据报协议UDP&#34;&gt;&lt;/a&gt;2.5.5 用户数据报协议UDP&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、UDP概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;UDP 是User Datagram Protocol的简称， 中文名是用户数据包协议。&lt;/p&gt;
&lt;p&gt;UDP是一种无连接的不可靠的传输协议（不需要进行三次握手和四次挥手）。&lt;/p&gt;
&lt;p&gt;UDP不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的，因此适合实时数据传输，例如：&lt;strong&gt;IP电话、网络视频会议&lt;/strong&gt;等实时应用。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/0c34cec48016474689abbe7c127ddac0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、UDP的头部&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/59232102df5d4d7e8a6d0f5e454eab69.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、UDP的应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用UDP运输协议可以进行单播、多播和广播&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/956d8665e1f94a599442d91a23fab6ca.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单播应用：DNS域名解析&lt;/strong&gt;，域名系统是因特网上作为域名和IP(Internet Protocol Address)地址相互映射的一个分布式数据库。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器如何通过域名去查询URL对应的IP（对应服务器地址）呢？&lt;ul&gt;
&lt;li&gt;浏览器缓存：浏览器会按照一定的频率缓存DNS记录。&lt;/li&gt;
&lt;li&gt;操作系统缓存：如果浏览器缓存中找不到需要的DNS记录，那就去操作系统中找。&lt;/li&gt;
&lt;li&gt;路由缓存：路由器也有DNS缓存。&lt;/li&gt;
&lt;li&gt;ISP的DNS服务器：ISP是互联网服务提供商(Internet Service Provider)的简称，ISP有专门的DNS服务器应对DNS查询请求&lt;/li&gt;
&lt;li&gt;根服务器：ISP的DNS服务器还找不到的话，它就会向根服务器发出请求，进行递归查询&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/cfbd109c37634f678e769c57fdbe5b1b.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;当两个网络应用进程间需要快速传输大文件（音视频文件、图片文件等）时也可以使用UDP单播。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;多播应用：网络视频会议、教学，视频监控等&lt;/strong&gt;。IP多播（也称多址广播或组播）技术，是一种允许一台或多台主机（多播源）发送单一数据包到多台主机（一次的，同时的）的TCP&amp;#x2F;IP网络技术。IP多播通信必须依赖于IP多播地址，在IPv4中它是一个D类IP地址，范围从&lt;strong&gt;224.0.0.0&lt;/strong&gt;到&lt;strong&gt;239.255.255.255&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/88fba151b7a7492cac004773ffb46e5d.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;广播的应用：ARP数据报广播&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e6504209d9fb42e1857ef6c83c399dc4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;注意：在进行UDP编程时，UDP包的大小可以达到64k，但实际上MTU大小只有1k多，如果直接发一个超过MTU大小的包，就会在网络层被分片，这样的问题是，&lt;strong&gt;如果只要有一个分片在传输中出错了即校验不正确（这是较容易发生的），整个传输的udp包就被丢弃&lt;/strong&gt;。注意是整个而不是单个分片。这就是为什么&lt;strong&gt;发送UDP包通常也是1k多大小&lt;/strong&gt;的原因。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-5-6-TCP和UDP的区别&#34;&gt;&lt;a href=&#34;#2-5-6-TCP和UDP的区别&#34; class=&#34;headerlink&#34; title=&#34;2.5.6 TCP和UDP的区别&#34;&gt;&lt;/a&gt;2.5.6 TCP和UDP的区别&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、对比&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/93c80a9a5be54627824624e16e7cb9ee.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;除了上图所展示的区别外，使用TCP传输协议时，一旦建立好TCP连接后，系统需要实时的维护该连接，所以TCP所消耗的系统资源比UDP要多。&lt;/p&gt;
&lt;p&gt;另外因为TCP的可靠性传输机制导致TCP传输数据时比UDP要慢的多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、TCP的长连接和短链接&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;长连接&lt;/strong&gt;：TCP通信双方在建立好连接后，在较长一段时间内保持连接，直至某一方主动关闭连接。&lt;strong&gt;长连接多用于操作频繁，点对点的通讯&lt;/strong&gt;，例如在物联网开发中某下位机需要定时地频繁向服务发送数据等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e292fea06b494d25b2047c7e00dc1c11.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短链接&lt;/strong&gt;：通信双方有数据交互时，就建立一个TCP连接，数据发送完成后，则断开此TCP连接。短连接多用于操作不频繁，点对点的通讯，例如：在HTTP&amp;#x2F;1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/0bf86bde31be435e9cb7b42c612c3d9d.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;长连接短链接对比&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4903fbef95704e25be821ee2de95c3bb.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、UDP的灵活应用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;应用项目：高压线覆冰监测系统。&lt;/p&gt;
&lt;p&gt;监控中心为了较快显示工业摄像头采集到的高清照片，监控子站主机需要使用UDP与监控中心主机进行图像数据的传输，但是因为使用了UDP传输协议可能会导致某些数据报丢失。为了保证图像数据的完整性，我们需要在应用层设计私有协议保障丢失的数据报能够进行重传。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/fb3fead9a30247f5b9914a48ca50e9cc.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-6-wireshark&#34;&gt;&lt;a href=&#34;#2-6-wireshark&#34; class=&#34;headerlink&#34; title=&#34;2.6 wireshark&#34;&gt;&lt;/a&gt;2.6 wireshark&lt;/h2&gt;&lt;h3 id=&#34;2-6-1-wireshark的安装&#34;&gt;&lt;a href=&#34;#2-6-1-wireshark的安装&#34; class=&#34;headerlink&#34; title=&#34;2.6.1 wireshark的安装&#34;&gt;&lt;/a&gt;2.6.1 wireshark的安装&lt;/h3&gt;&lt;h3 id=&#34;2-6-2-界面介绍&#34;&gt;&lt;a href=&#34;#2-6-2-界面介绍&#34; class=&#34;headerlink&#34; title=&#34;2.6.2 界面介绍&#34;&gt;&lt;/a&gt;2.6.2 界面介绍&lt;/h3&gt;&lt;p&gt;1、网卡选择&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4001fb0bdca7439da87c3aeefd3d109e.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、首页&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/78d62a5b955b4d7691d26a81a02026ee.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;常用按钮从左到右的功能依次是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;列出可用接口。&lt;/li&gt;
&lt;li&gt;抓包时需要设置的一些选项。一般会保留最后一次的设置结果。&lt;/li&gt;
&lt;li&gt;开始新的一次抓包。&lt;/li&gt;
&lt;li&gt;暂停抓包。&lt;/li&gt;
&lt;li&gt;继续进行本次抓包。&lt;/li&gt;
&lt;li&gt;打开抓包文件。可以打开之前抓包保存后的文件。不仅可以打开wireshark软件保存的文件，也可以打开tcpdump使用-w参数保存的文件。&lt;/li&gt;
&lt;li&gt;保存文件。把本次抓包或者分析的结果进行保存。&lt;/li&gt;
&lt;li&gt;关闭打开的文件。文件被关闭后，就会切换到初始界面。&lt;/li&gt;
&lt;li&gt;重载抓包文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、数据包列表， 显示捕获到的数据包，每个&lt;strong&gt;数据包编号，时间戳，源地址，目标地址，协议，长度，以及数据包信息&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/0829330f959e4355971088f7b64b4bf0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、数据包详细信息，在数据包列表中选择指定数据包，在数据包详细信息中会显示数据包的所有详细信息内容。数据包详细信息面板是最重要的，用来查看协议中的每一个字段。各行信息分别为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frame: 物理层的数据帧概况&lt;/li&gt;
&lt;li&gt;Ethernet II: 数据链路层以太网帧头部信息&lt;/li&gt;
&lt;li&gt;Internet Protocol Version 4: 互联网层IP包头部信息&lt;/li&gt;
&lt;li&gt;User Datagram Protocol: 传输层的数据段头部信息，此处是UDP&lt;/li&gt;
&lt;li&gt;Hypertext Transfer Protocol: 应用层的信息，此处是HTTP协议&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/4d86bfe75dde4456889dd27aa7632f36.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、我们可以在过滤器窗口筛选出http协议的相关数据包，并且查看TCP包的每个字段&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/42d5ab22a35545ccb31f68933ee5cf5f.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-6-3-wireshark过滤器&#34;&gt;&lt;a href=&#34;#2-6-3-wireshark过滤器&#34; class=&#34;headerlink&#34; title=&#34;2.6.3 wireshark过滤器&#34;&gt;&lt;/a&gt;2.6.3 wireshark过滤器&lt;/h3&gt;&lt;p&gt;初学者使用wireshark时，将会得到大量的冗余数据包列表，以至于很难找到自己自己抓取的数据包部分。wireshar工具中自带了两种类型的过滤器，学会使用这两种过滤器会帮助我们在大量的数据中迅速找到我们需要的信息。&lt;/p&gt;
&lt;p&gt;1、设置数据抓取选项&lt;/p&gt;
&lt;p&gt;点击常用按钮中的设置按钮，就会弹出设置选项对话框。在这个对话框中我们可以选中需要监听的接口，设置混杂模式，设置抓取数据包的过滤条件。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/268eb63f45e34aa7a35926810948175a.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先，选中需要监听获取数据包的接口。接口列表区列出了所有可以使用的接口。如果接口前面的复选框被选中，说明对这个接口监听捕获数据包。&lt;/p&gt;
&lt;p&gt;其次，设置混杂模式。设置混杂模式的作用是将网卡设置到混杂模式。如果不设置混杂模式，你的计算机只能获取数据包发往的目标是你计算机和从你计算机出去的数据包。如果设置了混杂模式，你就可以捕获局域网中所有的数据包。如果窗口中的 “Use promiscuous mode on all interfaces”前面的复选框被选中，说明对所有的接口使用混杂模式。如果想单独设置，可以双击接口列表中的接口，会弹出如下的对话框。然后选中或者去掉“Capture packets in promiscuous mode”前面复选框。然后点ok按钮。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/befe6e30292e42baadefb2872733c70c.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、显示过滤器&lt;/p&gt;
&lt;p&gt;显示过滤器应用于捕获文件，用来告诉wireshark只显示那些符合过滤条件的数据包。显示过滤器比捕获过滤器更常用。他可以用来过滤不想看到的数据包，但是不会把数据删除。如果想恢复原状，只要把过滤条件删除即可。&lt;/p&gt;
&lt;p&gt;过滤器表达式对话框，是的wireshark的可以很简单的设置过滤表达式。点击“Expression”按钮就可以打开这个对话框。如下图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ea64bb7d09ab4d709a7c86f12a3bbef1.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;对话框分左中右三部分。左边为可以使用的所有协议域（过滤项）。右边为和协议域相关的条件值（过滤值）。中间为协议域与条件值之间的关系（过滤关系）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一条基本的表达式由过滤项、过滤关系、过滤值三项组成。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如：http contains baidu.com， http为过滤项， contains 为过滤关系， baidu.com 为过滤值，表示显示http协议包中包含关键词“baidu.com”的所有数据包&lt;/p&gt;
&lt;p&gt;比如：ip.addr &amp;#x3D;&amp;#x3D; 192.168.1.1，ip.addr是过滤项、&amp;#x3D;&amp;#x3D;是过滤关系，192.168.1.1是过滤值（整条表达示的意思是找出所有ip协议中源或目标ip、等于、192.168.1.1的数据包）&lt;/p&gt;
&lt;p&gt;3、过滤关系&lt;/p&gt;
&lt;p&gt;过滤关系就是大于、小于、等于等几种等式关系，我们可以直接看官方表格，注意其中有“English”和“C-like”两个字段，这个意思是说“English”和“C-like”这两种写法在wireshark中是等价的、都是可用的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/54b76760203a462eb1e34d0454b35a84.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、复合过滤表达式&lt;/p&gt;
&lt;p&gt;所谓复合过滤表达式，就是指由多条基本过滤表达式组合而成的表达示。基本过滤表达式的写法还是不变的，复合过滤表达示多出来的东西就只是基本过滤表达示的“连接词”。我们依然直接参照官方表格，同样“English”和“C-like”这两个字段还是说明这两种写法在wireshark中是等价的、都是可用的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2f027749692147d693f0fcbcc7cdaaea.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;5、执行ping &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb23ojrflj5bnmoTmlbDmja7ljIXliJfooajlpoLkuIsv&#34;&gt;www.baidu.com获取的数据包列表如下&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b2d1eb7761194ed4a1930c8774158ff4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;观察上述获取的数据包列表，含有大量的无效数据。这时可以通过设置显示器过滤条件进行提取分析信息。ip.addr &amp;#x3D;&amp;#x3D; 14.215.177.39 and icmp。并进行过滤&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/94fcd57091f444a69588010c49664464.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;6、常见用显示过滤需求及其对应表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据链路层：&lt;ul&gt;
&lt;li&gt;筛选mac地址为04:f9:38:ad:13:26的数据包：eth.src &amp;#x3D;&amp;#x3D; 04:f9:38:ad:13:26&lt;/li&gt;
&lt;li&gt;筛选源mac地址为04:f9:38:ad:13:26的数据包：eth.src &amp;#x3D;&amp;#x3D; 04:f9:38:ad:13:26&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;网络层：&lt;ul&gt;
&lt;li&gt;筛选ip地址为192.168.1.1的数据包：ip.addr &amp;#x3D;&amp;#x3D; 192.168.1.1&lt;/li&gt;
&lt;li&gt;筛选192.168.1.0网段的数据： ip contains 192.168.1&lt;/li&gt;
&lt;li&gt;筛选192.168.1.1和192.168.1.2之间的数据包：ip.addr &amp;#x3D;&amp;#x3D; 192.168.1.1 &amp;amp;&amp;amp; ip.addr &amp;#x3D;&amp;#x3D; 192.168.1.2&lt;/li&gt;
&lt;li&gt;筛选从192.168.1.1到192.168.1.2的数据包：ip.src &amp;#x3D;&amp;#x3D; 192.168.1.1 &amp;amp;&amp;amp; ip.dst &amp;#x3D;&amp;#x3D; 192.168.1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;传输层：&lt;ul&gt;
&lt;li&gt;筛选tcp协议的数据包：tcp&lt;/li&gt;
&lt;li&gt;筛选除tcp协议以外的数据包:!tcp&lt;/li&gt;
&lt;li&gt;筛选端口为80的数据包：tcp.port &amp;#x3D;&amp;#x3D; 80&lt;/li&gt;
&lt;li&gt;筛选12345端口和80端口之间的数据包：tcp.port &amp;#x3D;&amp;#x3D; 12345 &amp;amp;&amp;amp; tcp.port &amp;#x3D;&amp;#x3D; 80&lt;/li&gt;
&lt;li&gt;筛选从12345端口到80端口的数据包：tcp.srcport &amp;#x3D;&amp;#x3D; 12345 &amp;amp;&amp;amp; tcp.dstport &amp;#x3D;&amp;#x3D; 80&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;应用层：&lt;ul&gt;
&lt;li&gt;特别说明：http中http.request表示请求头中的第一行（如GET index.jsp HTTP&amp;#x2F;1.1），http.response表示响应头中的第一行（如HTTP&amp;#x2F;1.1 200 OK），其他头部都用http.header_name形式。&lt;/li&gt;
&lt;li&gt;筛选url中包含.php的http数据包：http.request.uri contains .php&lt;/li&gt;
&lt;li&gt;筛选内容包含username的http数据包：http contains username&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-6-4-使用wireshark分析TCP三次握手&#34;&gt;&lt;a href=&#34;#2-6-4-使用wireshark分析TCP三次握手&#34; class=&#34;headerlink&#34; title=&#34;2.6.4 使用wireshark分析TCP三次握手&#34;&gt;&lt;/a&gt;2.6.4 使用wireshark分析TCP三次握手&lt;/h3&gt;&lt;p&gt;1、设置过滤阿里云服务器的IP地址：ip.addr &amp;#x3D;&amp;#x3D; 47.104.157.132&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b7c664d6338649098284a98908783c98.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、使用TCP调试助手连接阿里云服务器上的TCP服务端&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/fd1c7d64af7d407799ed2339fbe7ab49.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;3、我们发现wireshark捕获到了3条TCP数据&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/09e2e3539d5e424b8e7ffe5d0c52c0c9.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;第一次握手数据包：客户端发送一个TCP，标志位为SYN，序列号为0， 代表客户端请求建立连接。 如下图&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/f05cbda06fef4912ba80f523934cef5d.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二次握手：服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的seq加1以.即0+1&amp;#x3D;1, 如下图&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/8d508b7d4b5742a4bffd1a487f9f3c99.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三次握手：客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1，如下图:&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b65a00d813384854b74dbcfd06591530.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-6-5-使用wireshark分析TCP数据包&#34;&gt;&lt;a href=&#34;#2-6-5-使用wireshark分析TCP数据包&#34; class=&#34;headerlink&#34; title=&#34;2.6.5 使用wireshark分析TCP数据包&#34;&gt;&lt;/a&gt;2.6.5 使用wireshark分析TCP数据包&lt;/h3&gt;&lt;p&gt;1、使用tcp调试助手向阿里云服务器TCP服务端发送hello，并且接收到服务器返回的hello world&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2a1752dfcc634809a6dddea92fd4f825.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;2、我们发现wireshark捕获到了四条TCP数据&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/a30ebf8f5f024c239be17c87eb3546c8.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-7-应用层&#34;&gt;&lt;a href=&#34;#2-7-应用层&#34; class=&#34;headerlink&#34; title=&#34;2.7 应用层&#34;&gt;&lt;/a&gt;2.7 应用层&lt;/h2&gt;&lt;h3 id=&#34;2-7-1-应用层概述&#34;&gt;&lt;a href=&#34;#2-7-1-应用层概述&#34; class=&#34;headerlink&#34; title=&#34;2.7.1 应用层概述&#34;&gt;&lt;/a&gt;2.7.1 应用层概述&lt;/h3&gt;&lt;p&gt;应用层是网络体系结构中的最上层，所有的网络应用程序和服务都工作在应用层。&lt;/p&gt;
&lt;p&gt;常见的网络应用程序：浏览器、手游、即时通信软件、网站的后台程序、网游的主程等。&lt;/p&gt;
&lt;p&gt;常见的网络服务：telnet、FTP、ssh等。&lt;/p&gt;
&lt;h3 id=&#34;2-7-2-万维网&#34;&gt;&lt;a href=&#34;#2-7-2-万维网&#34; class=&#34;headerlink&#34; title=&#34;2.7.2 万维网&#34;&gt;&lt;/a&gt;2.7.2 万维网&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、万维网概述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;万维网WWW (World Wide Web）&lt;strong&gt;并非某种特殊的计算机网络&lt;/strong&gt;。它是一个大规模的、联机式的信息储藏所，是&lt;strong&gt;运行在因特网上的一个分布式应用&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;万维网利用网页之间的&lt;strong&gt;超链接&lt;/strong&gt;将不同网站的网页链接成一张逻辑上的信息网。&lt;/p&gt;
&lt;p&gt;万维网是欧洲粒子物理实验室的Tim Berners-Lee（蒂姆伯纳斯李）最初于1989年3月提出的。&lt;/p&gt;
&lt;p&gt;1993年2月，第一个图形界面的浏览器Mosaic诞生，1995年著名的Netscape Navigator（网景）浏览器上市&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/43c5f0b677764b4aa55a8d4ccd4e40b0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;目前流行的浏览器有以下几种：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9ffb41cc2c8246b89e6ddd844ba5f393.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、统一资源定位符URL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当我们访问某个网页时，在浏览器的地址栏会出现一长串的字符，这一长串的字符我们称之为统一资源定位符URL。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/f78235aec8134c2bb960ba53b9e37178.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们所访问到的网页上的内容其实是服务器上的某个资源，每个资源在服务器上都对应着一个位置。&lt;/p&gt;
&lt;p&gt;万维网使用&lt;strong&gt;统一资源定位符URL&lt;/strong&gt;来指明因特网上任何种类“资源”的位置。&lt;/p&gt;
&lt;p&gt;URL的一般形式由以下四个部分组成：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/abc1d66f48ab4c4695a703d09d7a8a58.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以将某个网页另存为文件，存储后有一个html文件和一个文件夹。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/51b0b5db0f464c28990900488f9f65d0.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;文件夹中的内容如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/2b6acd8795724ee98b0af83703121780.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;万维网文档：由HTMLCSS、JavaSaript编写的方维网文档&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ea02ee0104a14f7ead63a55ce66cad07.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-7-3-HTTP协议&#34;&gt;&lt;a href=&#34;#2-7-3-HTTP协议&#34; class=&#34;headerlink&#34; title=&#34;2.7.3 HTTP协议&#34;&gt;&lt;/a&gt;2.7.3 HTTP协议&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、浏览器发送HTTP请求的过程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/13fae9cba081494caaa7d59928080de3.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、HTTP协议概述&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;超文本传输协议HTTP&lt;/strong&gt;(HyperText Transfer Protocol)定义了浏览器(即万维网客户进程)怎样向万维网服务器请求万维网文档，以及万维网服务器怎样把万维网文档传送给浏览器。是处理&lt;strong&gt;客户端&lt;/strong&gt;和&lt;strong&gt;服务端&lt;/strong&gt;之间的通信&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/5003fb85a70246428ce470f46e266a00.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、HTTP&amp;#x2F;1.0&lt;/strong&gt;&lt;br&gt;HTTP&amp;#x2F;1.0采用&lt;strong&gt;非持续连接&lt;/strong&gt;方式。在该方式下，每次浏览器要请求一个文件都要与服务器建立TCP连接,当收到响应后就立即关闭连接。每请求一个文档就要有两倍的RTT的开销。若一个网页上有很多引用对象（例如图片等)&lt;br&gt;那么请求每一个对象都需要花费2RTT的时间。&lt;/p&gt;
&lt;p&gt;为了减小时延，浏览器通常会建立多个并行的TCP连接同时请求多个对象。但是，这会大量占用万维网服务器的资源，特别是万维网服务器往往要同时服务于大量客户的请求，这会使其负担很重。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/d33e35b5176645018a4328e80c931235.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、HTTP&amp;#x2F;1.1&lt;/strong&gt;&lt;br&gt;HTTP&amp;#x2F;1.1采用&lt;strong&gt;持续连接&lt;/strong&gt;方式。在该方式下，万维网服务器在发送响应后仍然保持这条连接，使同一个客户（浏览器）和该服务器可以继续在这条连接上传送后续的HTTP请求报文和响应报文。这并不局限于传送同一个页面上引用的对象，而是只要这些文档都在同一个服务器上就行。&lt;/p&gt;
&lt;p&gt;为了进一步提高效率，HTTP&amp;#x2F;1.1的持续连接还可以使用&lt;strong&gt;流水线方式工作&lt;/strong&gt;，即浏览器在收到HTTP的响应报文之前就能够连续发送多个请求报文。这样的一个接一个的请求报文到达服务器后，服务器就发回一个接一个的响应报文。这样就节省了很多个RTT时间，使TCP连接中的空闲时间减少，提高了下载文档的效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5、HTTP报文格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP是面向文本的，其报文中的每一个字段都是一些ASCII码串，并且每个字段的长度都是不确定的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c0a52c946ffd4bc4a743795acf13c968.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们可以利用浏览器的开发者工具查看某个HTTP请求的报文：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/d1cd6c9ab6074cd7ae75a504ee314e26.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP协议支持的请求方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/987a8c10209e448d987e27db4ee881f2.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP常见的请求头：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/78f94636dec64a4f9e2dafafc9491f86.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Connection&lt;/strong&gt;：决定HTTP连接（不是TCP连接）是否在当前事务完成后关闭。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/6fa9992f40ea4c13996185a80be22f7f.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Keep-Alive：多次请求复用一个TCP连接。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Keep-Alive: timeout&amp;#x3D;5, max&amp;#x3D;1000&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User-Agent&lt;/strong&gt;：这个字段可以帮助统计客户端用了什么浏览器、操作系统等&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b28437c21cf54864a7120b6361a9785f.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content-Type&lt;/strong&gt;：请求的时候，告知服务端数据的媒体类（MediaType&amp;#x2F;MIME Type)。返回的时候告知客户端，数据的媒体类型。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/e2ae87d81c394c879e3fc6520bdccac4.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cookie&lt;/strong&gt;：Cookie提供了一种机制使得万维网服务器能够“记住”用户，而无需用户主动提供用户标识信息。也就是说，&lt;strong&gt;Cookie是一种对无状态的HTTP进行状态化的技术&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;HTTP是无状态的：协议对于事务处理没有记忆能力，对同一个url请求没有上下文关系，每次的请求都是独立的，它的执行情况和结果与前面的请求和之后的请求是无直接关系的，它不会受前面的请求应答情况直接影响，也不会直接影响后面的请求应答情况&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用Cookie在服务器上记录用户信息：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/ce270ff6dc2f4630a6febca90bbc79cd.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;状态码&lt;/strong&gt;：web服务器告诉客户端请求的状态&lt;/p&gt;
&lt;p&gt;常见的状态码为以下四类：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/08d4d95a41694a57b0eb58dc527fd117.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;200状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/b1c7dc6d095946f2ae4349e86667950f.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;3xx状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/9544b1ec1c46464fa419a8fd96e10a91.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4xx状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/27b5808f632f4fea87bf5538edbbec37.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5xx状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632193000/c8db49c7712045acaec1281b767e67d4.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</guid>
            <title>计算机网络概述</title>
            <link>https://mangpumo.github.io/2022/11/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/</link>
            <pubDate>Fri, 25 Nov 2022 00:11:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;计算机网络概述&#34;&gt;&lt;a href=&#34;#计算机网络概述&#34; class=&#34;headerlink&#34; title=&#34;计算机网络概述&#34;&gt;&lt;/a&gt;计算机网络概述&lt;/h1&gt;&lt;h2 id=&#34;1-1-计算机网络在信息时代中的作用&#34;&gt;&lt;a href=&#34;#1-1-计算机网络在信息时代中的作用&#34; class=&#34;headerlink&#34; title=&#34;1.1 计算机网络在信息时代中的作用&#34;&gt;&lt;/a&gt;1.1 计算机网络在信息时代中的作用&lt;/h2&gt;&lt;p&gt;21世纪的一些重要特征就是数字化、网络化和信息化，它是一个以网络为核心的信息时代。&lt;br&gt;思考：大家每天最离不开的一件物品是什么？&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/044baa91182e4645bb08c3670fd09702.png&#34;&gt;  &lt;/p&gt;
&lt;p&gt;如果没有了网络，没有了互联网，没有了互联网上丰富多彩的信息和应用，人们还会对手机痴迷吗？&lt;/p&gt;
&lt;p&gt;那我们平时所说的网络到底是什么呢？  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络（Network）由若干结点（Node）和连接这些结点的链路（Link）所组成。 网络中的结点可以是计算机、集线器、交换机或者路由器等。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/5aa7c393730742919ce57f7f4f8ba36f.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个网络还可以通过&lt;strong&gt;路由器&lt;/strong&gt;互连起来,这样就构成了一个覆盖范围更大的计算机网络。这样的网络称为&lt;strong&gt;互连网(internetwork 或 internet)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/987d822e83204eab8b2e283465a8ea17.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们使用一朵云来表示网络时，可能会有两种不同的情况。一种情况如上图所示，用云表示的网络已经包含了和网络相连的计算机。但有时为了讨论问题的方便(例如，要讨论几个计算机之间如何进行通信)，也可以把有关的计算机画在云的外面，如下图所示。习惯上，与网络相连的计算机常称为**主机(host)**。这样，用云表示的互连网里面就只剩下许多路由器和连接这些路由器的链路了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/41570dd769fa42d2bf77675844c98d0f.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;因特网(Internet)&lt;/strong&gt; 是世界上最大的互连网络(用户数以亿计，互连的网络数以百万计)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/8c927e38c5434f0089e2fbd22967f24b.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;internet 和 Internet的区别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/0641710afa054100a8bfd54f9b453991.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-2-因特网发展的三个阶段&#34;&gt;&lt;a href=&#34;#1-2-因特网发展的三个阶段&#34; class=&#34;headerlink&#34; title=&#34;1.2 因特网发展的三个阶段&#34;&gt;&lt;/a&gt;1.2 因特网发展的三个阶段&lt;/h2&gt;&lt;p&gt;因特网的基础结构大致经历了如下三个阶段的演进：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/b94407ab2b77463a8da5ae209603a566.png&#34;&gt;&lt;br&gt;&lt;strong&gt;第一阶段：1969年出现了美国军用计算机网ARPANET(“阿帕网”)&lt;strong&gt;，也就是今天互联网的雏形。&lt;/strong&gt;数据集中式处理，数据处理和通信处理都是通过主机完成&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;当时的阿帕网仅连接四个结点，&lt;strong&gt;传输速率低&lt;/strong&gt;，因为当时的计算机图形界面没有发展起来，信息的只能通过文字终端进行展示，&lt;strong&gt;没应用场景&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;1969年四个节点的分布位置。分别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;加州大学洛杉矶分校 — UCLA&lt;/li&gt;
&lt;li&gt;加州大学圣巴巴拉分校 — UCSB&lt;/li&gt;
&lt;li&gt;斯坦福研究所 —SRI&lt;/li&gt;
&lt;li&gt;犹他大学 — Utah&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/afa10f42230e410e953ef9ed3681e024.png&#34;&gt;&lt;br&gt;&lt;strong&gt;1983年，TCP&amp;#x2F;IP协议&lt;/strong&gt;成为ARPANET的标准协议，因此人们将1983年认为是Internet的诞生时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二阶段：建成了三级结构的互联网&lt;/strong&gt;。从1985 年起，美国国家科学基金会NSF(National Science Foundation)就围绕六个大型计算机中心建设计算机网络，即国家科学基金网NSFNET，它是一个三级计算机网络，分为**主干网、地区网和校园网(或企业网)**。这种三级计算机网络覆盖了全美国主要的大学和研究所，并且成为互联网中的主要组成部分。1991年，NSF和美国的其他政府机构开始认识到，互联网必将扩大其使用范围，不应仅限于大学和研究机构。世界上的许多公司纷纷接入到互联网，网络上的通信量急剧增大，使互联网的容量已满足不了需要。于是美国政府决定将互联网的主干网转交给私人公司来经营,并开始对接入互联网的单位收费。1992 年互联网上的主机超过100 万台。1993 年互联网主干网的速率提高到45 Mbit&amp;#x2F;s (T3 速率)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三阶段：逐渐形成了多层次ISP结构的互联网&lt;/strong&gt;。从1993 年开始，由美国政府资助的NSFNET逐渐被若千个商用的互联网主干网替代，而政府机构不再负责互联网的运营。这样就出现了-一个新的名词：**互联网服务提供者ISP (Internet Service Provider)**。在许多情况下，ISP 就是一个进行商业活动的公司，因此ISP又常译为互联网服务提供商。例如，中国电信、中国联通和中国移动等公司都是我国最有名的ISP。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;互联网服务提供者ISP (Internet Service Provider)&lt;ul&gt;
&lt;li&gt;ISP可以从互联网管理机构申请到很多IP 地址（互联网上的主机都必须有IP地址才能上网），同时拥有通信线路(大ISP自己建造通信线路，小ISP则向电信公司租用通信线路)以及路由器等连网设备，因此任何机构和个人只要向某个ISP交纳规定的费用，就可从该ISP获取所需IP地址的使用权，并可通过该ISP接入到互联网。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/84528c8b8a2140fb903ae2f281c82dac.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据提供服务的覆盖面积大小以及所拥有的IP地址数目的不同，ISP也分为不同层次的1ISP：&lt;strong&gt;主干ISP、地区ISP和本地ISP（从层次关系上我们也称为第一层ISP、第二层ISP、本地ISP）&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;主干ISP由几个专门的公司创建和维持，服务面积最大(一般都能够覆盖国家范围),并且还拥有高速主干网(例如10 Gbit&amp;#x2F;s 或更高)。有一些地区ISP网络也可直接与主干ISP相连。&lt;/li&gt;
&lt;li&gt;地区ISP是一些较小的ISP。这些地区ISP通过-一个或多个主干ISP连接起来。它们位于等级中的第二层，数据率也低一些。&lt;/li&gt;
&lt;li&gt;本地ISP 给用户提供直接的服务(这些用户有时也称为端用户，强调是末端的用户)。本地ISP可以连接到地区ISP，也可直接连接到主干ISP。 绝大多数的用户都是连接到本地ISP的。本地ISP可以是一个仅仅提供互联网服务的公司，也可以是一个拥有网络并向自己的雇员提供服务的企业，或者是一个运行自己的网络的非营利机构(如学院或大学)。本地ISP可以与地区ISP或主干ISP连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/3548139e72bb46d59c1968466c612ff8.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;说明：因特网发展到今天因为规模太大，已经很难对整个网络的结构给出细致的描述，上图所示的只是一个简单的示意图。&lt;/p&gt;
&lt;h2 id=&#34;1-3-因特网的标准化工作&#34;&gt;&lt;a href=&#34;#1-3-因特网的标准化工作&#34; class=&#34;headerlink&#34; title=&#34;1.3 因特网的标准化工作&#34;&gt;&lt;/a&gt;1.3 因特网的标准化工作&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;因特网的标准化工作对因特网的发展起到了非常重要的作用。&lt;/li&gt;
&lt;li&gt;因特网在制定其标准上的一个很大的特点是面向公众。&lt;ul&gt;
&lt;li&gt;因特网所有的RFC(Request For Comments)技术文档都可从因特网上免费下载;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5pZXRmLm9yZy9yZmMuaHRtbA==&#34;&gt;http://www.ietf.org/rfc.html&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;任何人都可以随时用电子邮件发表对某个文档的意见或建议。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因特网协会ISOC是一个国际性组织，它负责对因特网进行全面管理，以及在世界范围内促进其发展和使用&lt;ul&gt;
&lt;li&gt;因特网体系结构委员会IAB,负责管理因特网有关协议的开发;&lt;/li&gt;
&lt;li&gt;因特网工程部IETF,负责研究中短期工程问题，主要针对协议的开发和标准化;&lt;/li&gt;
&lt;li&gt;因特网研究部IRTF,从事理论方面的研究和开发一些需要长期考虑的问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/03d6d895817748149a8a24153c252982.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-4-因特网的组成&#34;&gt;&lt;a href=&#34;#1-4-因特网的组成&#34; class=&#34;headerlink&#34; title=&#34;1.4 因特网的组成&#34;&gt;&lt;/a&gt;1.4 因特网的组成&lt;/h2&gt;&lt;h3 id=&#34;1-4-1-功能划分&#34;&gt;&lt;a href=&#34;#1-4-1-功能划分&#34; class=&#34;headerlink&#34; title=&#34;1.4.1 功能划分&#34;&gt;&lt;/a&gt;1.4.1 功能划分&lt;/h3&gt;&lt;p&gt;因特网的拓扑结构虽然非常复杂，并且在地理上覆盖了全球，但从功能上看。可以划分为以下两部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;边缘部分&lt;/strong&gt;：由所有连接在互联网上的&lt;strong&gt;主机&lt;/strong&gt;组成。这部分是用户&lt;strong&gt;直接使用&lt;/strong&gt;的，用来进行&lt;strong&gt;通信&lt;/strong&gt;(传送数据、音频或视频)和&lt;strong&gt;资源共享&lt;/strong&gt;。&lt;ul&gt;
&lt;li&gt;边缘部分中的主机，可以是台或电脑或大型服务器，也可以是笔记本、平板电脑&lt;/li&gt;
&lt;li&gt;可以是智能手机、智能手表&lt;/li&gt;
&lt;li&gt;物联网智能硬件：智能摄像头等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;核心部分&lt;/strong&gt;：由大量网络和连接这些网络的&lt;strong&gt;路由器&lt;/strong&gt;组成。这部分是为边缘部分提供服务的(提供连通性和交换)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/e96ad8542cdc42af883ebf42821546c7.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-4-2-边缘部分&#34;&gt;&lt;a href=&#34;#1-4-2-边缘部分&#34; class=&#34;headerlink&#34; title=&#34;1.4.2 边缘部分&#34;&gt;&lt;/a&gt;1.4.2 边缘部分&lt;/h3&gt;&lt;p&gt;1、处在因特网边缘的部分就是连接在因特网上的所有的主机。这些主机又称为**端系统(end system)**。&lt;/p&gt;
&lt;p&gt;2、“主机 A 和主机 B 进行通信”，实际上是指：“运行在主机 A 上的某个程序和运行在主机 B 上的另一个程序进行通信”。&lt;/p&gt;
&lt;p&gt;3、即“主机 A 的某个进程和主机 B 上的另一个进程进行通信”。或简称为“计算机之间通信”&lt;/p&gt;
&lt;p&gt;4、在网络边缘的端系统中运行的程序之间的通信方式通常可划分为两大类：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;客户服务器方式（C&amp;#x2F;S 方式）&lt;/strong&gt;，即Client&amp;#x2F;Server方式&lt;ul&gt;
&lt;li&gt;客户(client)和服务器(server)都是指通信中所涉及的两个&lt;strong&gt;应用进程&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;客户服务器方式所描述的是进程之间&lt;strong&gt;服务和被服务&lt;/strong&gt;的关系。&lt;/li&gt;
&lt;li&gt;客户是&lt;strong&gt;服务的请求方&lt;/strong&gt;，服务器是&lt;strong&gt;服务的提供方&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/f7939ddf2055490f9f9a722da3af3995.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;客户程序必须知道服务器程序的IP地址，不需要特殊的硬件和很复杂的操作系统。&lt;/li&gt;
&lt;li&gt;服务器程序不需要知道客户程序的IP地址，但是系统需要不断的运行着，并且需要有强大的硬件和高级的操作系统支持。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对等方式（P2P 方式）&lt;/strong&gt;，即 Peer-to-Peer方式&lt;ul&gt;
&lt;li&gt;对等连接(peer-to-peer，简写为 P2P)是指两个主机在通信时并不区分哪一个是服务请求方还是服务提供方。&lt;/li&gt;
&lt;li&gt;只要两个主机都运行了对等连接软件（P2P 软件），它们就可以进行平等的、对等连接通信。&lt;/li&gt;
&lt;li&gt;双方都可以下载对方已经存储在硬盘中的共享文档。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/3ddeaf7d60594abdbc56274dda8a70e0.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;对等连接方式从本质上看仍然是使用客户服务器方式，只是对等连接中的每一个主机既是客户又同时是服务器。&lt;/li&gt;
&lt;li&gt;例如主机 C 请求 D 的服务时，C 是客户，D 是服务器。但如果 C 又同时向 F提供服务，那么 C 又同时起着服务器的作用。&lt;/li&gt;
&lt;li&gt;P2P网络技术的特点体现在以下几个方面：&lt;ul&gt;
&lt;li&gt;非中心化：网络中的资源和服务分散在所有节点上，信息的传输和服务的实现都直接在节点之间进行，可以无需中间环节和服务器的介入，避免了可能的瓶颈&lt;/li&gt;
&lt;li&gt;健壮性：P2P架构天生具有耐攻击、高容错的优点。由于服务是分散在各个节点之间进行的，部分节点或网络遭到破坏对其它部分的影响很小。&lt;/li&gt;
&lt;li&gt;高性价比：性能优势是P2P被广泛关注的一个重要原因。采用P2P架构可以有效地利用互联网中散布的大量普通结点，将计算任务或存储资料分布到所有节点上。利用其中闲置的计算能力或存储空间，达到高性能计算和海量存储的目的。&lt;/li&gt;
&lt;li&gt;隐私保护：在P2P网络中，由于信息的传输分散在各节点之间进行而无需经过某个集中环节，用户的隐私信息被窃听和泄漏的可能性大大缩小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-4-3-核心部分&#34;&gt;&lt;a href=&#34;#1-4-3-核心部分&#34; class=&#34;headerlink&#34; title=&#34;1.4.3 核心部分&#34;&gt;&lt;/a&gt;1.4.3 核心部分&lt;/h3&gt;&lt;p&gt;1、在网络核心部分起特殊作用的是**路由器(router)**。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/e06bfa105bb840b090accc00bb6a6d9b.png&#34;&gt;&lt;br&gt;2、三种交换方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;电路交换(Circuit Switching)：电话交换机接通电话线的方式称为电路交换;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/3143c67bb0cc4470bd739f2d203a9081.png&#34;&gt;&lt;br&gt;电话交换机：可以把电话交换机简单地看成是一个有多个开关的开关器，可以将需要通信的任意两部电话的电话线路按需接通，从而大大减少了连接的电话线数量&lt;br&gt;从通信资源的分配角度来看，交换(Switching)就是按照某种方式动态地分配传输线路的资源;&lt;br&gt;电路交换的三个步骤:&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建立连接&lt;/strong&gt;（分配通信资源)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通话&lt;/strong&gt;（一直占用通信资源)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;释放连接&lt;/strong&gt;（归还通信资源)&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/1e4aa4b19e2447cabf45c5a0171877f1.png&#34;&gt;&lt;br&gt;电路交换的缺点：当用户正在输入和编辑一份待传输的文件时，用户所与用的通信资源暂时未被利用，该通信资源也不能被其他用户利用，宝贵的线路资源就被白白浪费掉了，因此&lt;strong&gt;电路交换的传输效率非常低，不适用于计算机和计算机之间的通信&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组交换(Packet Switching)：&lt;strong&gt;路由器&lt;/strong&gt;是实现分组交换(packet switching)的关键构件，其任务是&lt;strong&gt;转发收到的分组&lt;/strong&gt;，这是网络核心部分最重要的功能&lt;ul&gt;
&lt;li&gt;分组交换则采用&lt;strong&gt;存储转发&lt;/strong&gt;技术。如下图所示，&lt;strong&gt;把一个报文划分为几个分组后再进行传送&lt;/strong&gt;。通常我们把要发送的整块数据称为一个&lt;strong&gt;报文(message)&lt;strong&gt;。在发送报文之前，先把较长的报文划分成为一个个更小的等长数据段，例如，每个数据段为1024&lt;/strong&gt;bit（比特）&lt;/strong&gt;。在每一个数据段前面，加上一些由必要的控制信息组成的&lt;strong&gt;首部(header)&lt;strong&gt;后，就构成了一个&lt;/strong&gt;分组(packet)&lt;strong&gt;。分组又称为“&lt;/strong&gt;包&lt;/strong&gt;”，而分组的首部也可称为“&lt;strong&gt;包头&lt;/strong&gt;”。分组是在互联网中传送的数据单元。分组中的“首部”是非常重要的，正是由于分组的首部包含了诸如目的地址和源地址等重要控制信息，每一个分组才能在互联网中独立地选择传输路径，并被正确地交付到分组传输的终点。&lt;/li&gt;
&lt;li&gt;分组交换过程&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/d5f5965169cc43fab0e377d8d3d70c77.gif&#34;&gt;&lt;/li&gt;
&lt;li&gt;分组交换的特点：构成原始报文的一个个分组在各结点路由器上进行存储转发，并且可以进行差错校验，保证报文的完整性和准确性。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/cece743eb1d8422fa425a6dcf7e4711f.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/1da17ca19473430db99d358e3ba585d5.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;说明：分组交换过程中可能会出现分组丢失、重复等问题在后面的章节会详细介绍报文交换(Message Switching)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;报文交换(Message Switching)&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;整个报文先传送到相邻结点，全部存储下来后查找转发表，转发到下一个节点&lt;/li&gt;
&lt;li&gt;对报文的大小不做限制，因此对接收报文的设备缓存空间有要求&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/a9f89835dc2e43079e7d92b9e957d0fb.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;三种交换方式的对比&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/11ec65e619c4400abfd8751493b4cbc6.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-5-计算机网络的分类&#34;&gt;&lt;a href=&#34;#1-5-计算机网络的分类&#34; class=&#34;headerlink&#34; title=&#34;1.5 计算机网络的分类&#34;&gt;&lt;/a&gt;1.5 计算机网络的分类&lt;/h2&gt;&lt;h3 id=&#34;1-5-1-按照网络的作用范围进行分类&#34;&gt;&lt;a href=&#34;#1-5-1-按照网络的作用范围进行分类&#34; class=&#34;headerlink&#34; title=&#34;1.5.1 按照网络的作用范围进行分类&#34;&gt;&lt;/a&gt;1.5.1 按照网络的作用范围进行分类&lt;/h3&gt;&lt;p&gt;1、&lt;strong&gt;广域网WAN（Wide Area Network）&lt;/strong&gt;：广域网的作用范围通常为几十到几千公里，因而有时也称为远程网(long haul network)。&lt;strong&gt;广域网是互联网的核心部分，其任务是通过长距离（例如，跨越不同的国家）运送主机所发送的数据&lt;/strong&gt;。连接广域网各结点交换机的链路一般都是高速链路，具有较大的通信容量。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/aa25c3acafad4d1ca3562005852dd29b.png&#34;&gt;&lt;br&gt;2、&lt;strong&gt;城域网MAN（Metropolitan Area Network）&lt;/strong&gt;：城域网的作用范围一般是一个城市，可跨越几个街区甚至整个城市，其作用距离约为5 ~50 km。城域网可以为一个或几个单位所拥有，但也可以是一种公用设施，用来将多个局域网进行互连。目前很多城域网采用的是以太网技术，因此有时也常并入局域网的范围进行讨论。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/3f38b0ea3c834991b36e74b1efeb15e2.png&#34;&gt;&lt;br&gt;3、局域网LAN（Local Area Network）：局域网一般用微型计算机或工作站通过高速通信线路相连（速率通常在10 Mbit&amp;#x2F;s 以上)，但地加士A个局城网，但现在局域网已非常右)。在局域网发展的初期，一个学校或工厂往往只拥有一个局域网，但现在局域网已非常广泛地使用，学校或企业大都拥有许多个互连的局域网（这样的网络常称为校园网或企业网)。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/8e394abd45b54bbc9576cf4c22063676.png&#34;&gt;&lt;br&gt;4、个人区域网PAN（Personal Area Network）：个人区域网就是在个人工作的地方把属于个人使用的电子设备（如便携式电脑等）用无线技木连接起来，其范围很小，大约在10 m左右。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/cda6df83b2f842a9a6f6e35fb770ec0a.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-5-2-按网络的线路结构进行分类&#34;&gt;&lt;a href=&#34;#1-5-2-按网络的线路结构进行分类&#34; class=&#34;headerlink&#34; title=&#34;1.5.2 按网络的线路结构进行分类&#34;&gt;&lt;/a&gt;1.5.2 按网络的线路结构进行分类&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1、星型&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/43b518b553524171a73a92b6b3112e01.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;星型拓扑结构是目前局域网普遍采用的一种拓扑结构。&lt;/li&gt;
&lt;li&gt;星型拓扑结构是用一个节点作为中心节点，其他节点直接与中心节点相连构成的网络。中心节点可以是文件服务器，也可以是连接设备。常见的中心节点为集线器或者路由器。&lt;/li&gt;
&lt;li&gt;星型拓扑结构的网络属于集中控制型网络，整个网络由中心节点执行集中式通行控制管理，各节点间的通信都要通过中心节点。每一个要发送数据的节点都将要发送的数据发送中心节点，再由中心节点负责将数据送到目地节点。因此，中心节点相当复杂，而各个节点的通信处理负担都很小，只需要满足链路的简单通信要求。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/9eccc955d67c484493b07375717b1034.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;优点：&lt;ul&gt;
&lt;li&gt;控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。&lt;/li&gt;
&lt;li&gt;故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。&lt;/li&gt;
&lt;li&gt;方便服务。中央节点可以方便地对各个站点提供服务和网络重新配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：&lt;ul&gt;
&lt;li&gt;需要耗费大量的电缆，安装、维护的工作量也骤增。&lt;/li&gt;
&lt;li&gt;中央节点负担重，形成“瓶颈”，一旦发生故障，则全网受影响。&lt;/li&gt;
&lt;li&gt;各站点的分布处理能力较低。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2、总线型&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/d5824da01b15490cbaf5117b2f71ab0b.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;总线型网络拓扑结构中所有设备都直接与总线相连，它所采用的介质一般也是同轴电缆(包括粗缆和细缆)，不过现在也有采用光缆作为总线型传输介质的。&lt;/li&gt;
&lt;li&gt;总线结构是指各工作站和服务器均挂在一条总线上，各工作站地位平等，无中心节点控制，公用总线上的信息多以基带形式串行传递，其传递方向总是从发送信息的节点开始向两端扩散，如同广播电台发射的信息一样，因此又称广播式计算机网络。各节点在接受信息时都进行地址检查，看是否与自己的工作站地址相符，相符则接收网上的信息。&lt;/li&gt;
&lt;li&gt;总线型结构的网络特点如下：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;结构简单&lt;/strong&gt;：网络各接点通过简单的搭线器（T头）即可接入网络，施工类似接电视天线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;走线量小&lt;/strong&gt;：星型网络需要从中心集线器向每个网络接点单独甩线，如果不用线槽走线的话，地面上经常爬满一捆一捆的网线。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本较低&lt;/strong&gt;；总线型网络因用线量小，无需集线器等昂贵的网络设备，不用线槽、接线盒等结构化布局材料，成本要大大低于星型网络。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩充灵活&lt;/strong&gt;：星型网络在增加接点数目时有时是一件极其痛苦的事，如果在网络最初规划时留的空间较小，可能会遇到下列情况 可能会因为只增加一个接点而必须购买一个交换机；而总线型网络只需增加一段电缆和一个T头就可增加一个接点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;故障诊断和隔离比较困难&lt;/strong&gt;：当节点发生故障，隔离起来还比较方便，—旦传输介质出现故障时，就需要将整个总线切断。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;易于发生数据碰撞&lt;/strong&gt;，线路争用现象比较严重。&lt;br&gt;&lt;strong&gt;3、环型&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/132d4d9fd320446ab8200fd68264de19.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;环型结构由网络中若干节点通过点到点的链路首尾相连形成一个闭合的环，这种结构使公共传输电缆组成环型连接，数据在环路中沿着一个方向在各个节点间传输，信息从一个节点传到另一个节点。&lt;/li&gt;
&lt;li&gt;这种结构的网络形式主要应用于&lt;strong&gt;令牌网&lt;/strong&gt;中，在这种网络结构中各设备是直接通过&lt;strong&gt;电缆&lt;/strong&gt;来串接的，最后形成一个闭环，整个网络发送的信息就是在这个环中传递，通常把这类网络称之为”&lt;strong&gt;令牌环网&lt;/strong&gt;“。&lt;/li&gt;
&lt;li&gt;实际上大多数情况下这种拓扑结构的网络不会是所有计算机真的要连接成物理上的环型，一般情况下，环的两端是通过一个阻抗匹配器来实现环的封闭的，因为在实际组网过程中因地理位置的限制不方便真的做到环的两端物理连接。&lt;/li&gt;
&lt;li&gt;什么是令牌环&lt;ul&gt;
&lt;li&gt;令牌环网的媒体接入控制机制采用的是分布式控制模式的循环方法。&lt;strong&gt;在令牌环网中有一个令牌(Token)沿着环形总线以逆时针方向在入网节点计算机间依次传递&lt;/strong&gt; ，令牌实际上是一个特殊格式的帧，本身并不包含信息，仅控制信道的使用，确保在同一时刻只有一个节点能够独占信道。当环上节点都空闲时，令牌绕环行进。节点计算机只有取得令牌后才能发送数据帧，因此不会发生碰撞。由于令牌在网环上是按顺序依次传递的，因此对所有入网计算机而言，访问权是公平的。&lt;/li&gt;
&lt;li&gt;令牌在工作中有“闲”和“忙”两种状态。“闲”表示令牌没有被占用，即网中没有计算机在传送信息；“忙”表示令牌已被占用，即网中有信息正在传送。希望传送数据的计算机必须首先检测到“闲”令牌，将它置为“忙”的状态，然后在该令牌后面传送数据。当所传数据被目的节点计算机接收后，数据被从网中除去，令牌被重新置为“闲”。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/dcaac854f0af46668698b33507d04a0f.gif&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;4、网状型&lt;/strong&gt;&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/adb2753a3ae4495b84f359001101bd33.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网状拓扑结构，这种拓扑结构主要指各节点通过传输线互联连接起来，并且每一个节点至少与其他两个节点相连，网状拓扑结构具有较高的可靠性，但其结构复杂，实现起来费用较高，不易管理和维护，不常用于局域网&lt;/li&gt;
&lt;li&gt;优点：&lt;ul&gt;
&lt;li&gt;网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。&lt;/li&gt;
&lt;li&gt;网络可组建成各种形状，采用多种通信信道，多种传输速率。&lt;/li&gt;
&lt;li&gt;可选择最佳路径，传输延迟小。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：&lt;ul&gt;
&lt;li&gt;控制复杂，软件复杂。&lt;/li&gt;
&lt;li&gt;线路费用高，不易扩充。&lt;/li&gt;
&lt;li&gt;在以太网中，如果设置不当，会造成广播风暴，严重时可以使网络完全瘫痪。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-6-计算机网络的性能指标&#34;&gt;&lt;a href=&#34;#1-6-计算机网络的性能指标&#34; class=&#34;headerlink&#34; title=&#34;1.6 计算机网络的性能指标&#34;&gt;&lt;/a&gt;1.6 计算机网络的性能指标&lt;/h2&gt;&lt;p&gt;常用的计算机网络的性能指标有7个：&lt;strong&gt;速率、带宽、吞吐量、时延、往返时间、利用率、丢包率&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-6-1-速率&#34;&gt;&lt;a href=&#34;#1-6-1-速率&#34; class=&#34;headerlink&#34; title=&#34;1.6.1 速率&#34;&gt;&lt;/a&gt;1.6.1 速率&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;计算机发送的信号是以二进制数字形式的。&lt;/li&gt;
&lt;li&gt;一个二进制数字就是一个比特（bit， binary digit）&lt;/li&gt;
&lt;li&gt;字节：Byte， 1Byte &amp;#x3D; 8bit (1B &amp;#x3D; 8b)&lt;br&gt;常用数据量单位：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/235f1f64977d42b9afd00144075a2148.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;速率：连接在计算机网络上的主机在数字信道上传送比特数据的速率，也称为&lt;strong&gt;比特率&lt;/strong&gt;或&lt;strong&gt;数据率&lt;/strong&gt;。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/485586be89a24f358e7e7acd2ff9f04d.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;思考：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/49bd44c7b8764548ae35050939031ee2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-6-2-带宽&#34;&gt;&lt;a href=&#34;#1-6-2-带宽&#34; class=&#34;headerlink&#34; title=&#34;1.6.2 带宽&#34;&gt;&lt;/a&gt;1.6.2 带宽&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;在计算机网络中，带宽用来表示网络中某通道传送数据的能力，因此网络带宽表示在单位时间内网络中的某信道所能通过的“最高数据率”&lt;/li&gt;
&lt;li&gt;单位：b&amp;#x2F;s (kbs, Mb&amp;#x2F;s, Gb&amp;#x2F;s, Tb&amp;#x2F;s)&lt;/li&gt;
&lt;li&gt;宽带的带宽是100兆：出口网速最高100Mb&amp;#x2F;s&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-6-3-吞吐量&#34;&gt;&lt;a href=&#34;#1-6-3-吞吐量&#34; class=&#34;headerlink&#34; title=&#34;1.6.3 吞吐量&#34;&gt;&lt;/a&gt;1.6.3 吞吐量&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;吞吐量表示在单位时间内通过某个网络(或信道、接口)的数据量&lt;/li&gt;
&lt;li&gt;吞吐量被经常用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。&lt;/li&gt;
&lt;li&gt;吞吐量受网络的带宽或额定速率的限制&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/9aba8ec8cd0e4488bef10f3b18a3e899.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;注意吞吐量和带宽的区别：带宽指的是最大的传输速度，而吞吐量指的是实际传输速度&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/ea0881f79f494bf9927d78ba679536ea.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-6-4-时延&#34;&gt;&lt;a href=&#34;#1-6-4-时延&#34; class=&#34;headerlink&#34; title=&#34;1.6.4 时延&#34;&gt;&lt;/a&gt;1.6.4 时延&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;时延(delay或latency)是指数据（一个报文或分组，甚至比特）从网络（或链路）的一端传送到另一端所需的时间。时延是个很重要的性能指标，它有时也称为延迟或迟延。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/7dc1d67a714c49f1afd475b242d85bd3.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络中的时延是由以下几个不同的部分组成的：&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;发送时延&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;主机或路由器发送数据帧所需要的时间，也就是从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间。&lt;/li&gt;
&lt;li&gt;发送时延的计算公式为：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/320856b61b254d1bba0ac79b1a1ff1f9.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;主机的发送速率和网卡的发送速率、信道的带宽、接口速率有关&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/a0bf536bd9704311b1e565313956469a.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;传播时延&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;电磁波在信道中传播一定的距离需要花费的时间&lt;/li&gt;
&lt;li&gt;传播时延的计算公式：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/b85db8e4487047f4a45f605e98c2c85f.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;各介质的传播速度：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/c8168894000842e7ba983d197313ede5.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;处理时延&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;处理时延指的是主机或者路由器在收到分组信息时花费的时间。例如分析分组的首部、从分组中提取数据部分、查找适当的路由等。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;思考：现在我们暂时忽略处理时延。假定有一个长度为100 MB 的数据块（这里的M显然不是指10^6而是指2^20。B是字节，1字节&amp;#x3D;8比特)。在带宽为1 Mbits的信道上(这里的M显然是10^6）连续发送（即发送速率为1 Mbit&amp;#x2F;s)，其发送时延是多少？&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/6bbc6f6b24bf4c778a274dae4ad2ca5c.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现在把这个数据块用光纤传送到1000 km远的计算机。由于在1000 km的光纤上的传播时延约为5 ms，因此在这种情况下，发送100 MB的数据块的总时延&amp;#x3D; 838.9 s + 0.005 s &amp;#x3D; 838.9005 s。可见对于这种情况，&lt;strong&gt;发送时延决定了总时延的数值&lt;/strong&gt;。如果我们把发送速率提高到100倍，即提高到100 Mbitls，那么总时延就变为8.389+0.005&amp;#x3D;8.394 s，缩小到原有数值的1&amp;#x2F;100。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-6-5-往返时间&#34;&gt;&lt;a href=&#34;#1-6-5-往返时间&#34; class=&#34;headerlink&#34; title=&#34;1.6.5 往返时间&#34;&gt;&lt;/a&gt;1.6.5 往返时间&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;RTT(Round-Trip Time)往返时间在计算机网络中它是一个重要的性能指标。表示&lt;strong&gt;从发送端将数据发送到传输媒介开始，到发送端收到来自接收端的确认总共经历的时间（不包含发送时延）&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;RTT由三个部分决定：链路的传播时间、末端系统的处理时间、路由器的缓存中的排队和处理时间&lt;/strong&gt;。其中前两个部分的值作为一个TCP连接相对固定，路由器的缓存中的排队和处理时间会随着整个网络拥塞程度的变化而变化。所以&lt;strong&gt;RTT的变化在一定程度上反映了网络拥塞程度的变化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;例如，A向B发送数据。如果数据长度是100 MB，发送速率是100 Mbit&amp;#x2F;s，那么&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/22fadccbcda2416599d0baeddacbf421.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;如果B正确收完100 MB的数据后，就立即向A发送确认。再假定A只有在收到B的确认信息后，才能继续向B发送数据。显然，这需要等待一个往返时间RTT(这里假定确认信息很短，可忽略B发送确认的时间)。如果返回时间&amp;#x3D; 2 s，那么可以算出A向B发送数据的有效数据率为80Mbit&amp;#x2F;s。比原来的数据率100Mbit&amp;#x2F;s小很多。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/1804fbb473fd4e22b28e392acc439aad.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-6-6-利用率&#34;&gt;&lt;a href=&#34;#1-6-6-利用率&#34; class=&#34;headerlink&#34; title=&#34;1.6.6 利用率&#34;&gt;&lt;/a&gt;1.6.6 利用率&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;利用率有&lt;strong&gt;信道利用率&lt;/strong&gt;和&lt;strong&gt;网络利用率&lt;/strong&gt;两种。&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/52964d128132432189b59d1f466d1c1b.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;根据排队论，当某信道的利用率增大时，该信道引起的时延也会迅速增加。&lt;/li&gt;
&lt;li&gt;如果令Do表示网络空闲时的时延，D表示网络当前的时延，那么在适当的假定条件下，可以用下面的简单公式来表示D、Do和利用率U之间的关系为：&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/7a5ff44747ee4ac2accc4e76213995f6.png&#34;&gt;&lt;ul&gt;
&lt;li&gt;这里U是网络的利用率，数值在0到1之间；&lt;/li&gt;
&lt;li&gt;当网络的利用率达到50%时，时延就要加倍;当网络的利用率超过50%时，时延急剧增大；&lt;/li&gt;
&lt;li&gt;当网络的利用率接近100%时，时延就趋于无穷大；&lt;/li&gt;
&lt;li&gt;因此，一些拥有较大主干网的ISP通常会控制它们的信道利用率不超过50%。如果超过了，就要准备扩容，增大线路的带宽；&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/a8a3bbab53124844995e4521f57f30ba.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;因此，&lt;strong&gt;信道利用率并非越高越好&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-6-7-丢包率&#34;&gt;&lt;a href=&#34;#1-6-7-丢包率&#34; class=&#34;headerlink&#34; title=&#34;1.6.7 丢包率&#34;&gt;&lt;/a&gt;1.6.7 丢包率&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;丢包率即分组丢失率，是指在一定的时间范围内，传输过程中&lt;strong&gt;丢失的分组数量与总分组数量的比率&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;丢包率是网络运维人员非常关心的一个网络性能指标，但对于普通用户来说往往并不关心这个指标，因为他们通常意识不到网络丢包。&lt;/li&gt;
&lt;li&gt;分组丢失主要有两种情况:&lt;ul&gt;
&lt;li&gt;分组在传输过程中出现误码，被结点丢弃&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/1019015b3ed94fce941f905fea33c7dd.gif&#34;&gt;&lt;ul&gt;
&lt;li&gt;主机发送的分组在传输过程中出现了误码,当分组进入传输路径中的结点交换机后，被结点交换机检测出了误码。进而被丢弃。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分组到达一台队列已满的分组交换机时被丢弃;在通信量较大时就可能造成网络拥塞&lt;br&gt;&lt;img data-src=&#34;https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/402/1637632112000/c5f234234c66498ba1236e03194f61c9.gif&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;弃。实际上。路由器会根据自身的拥塞控制方法，在输入缓存还未满的时候就主动丢弃分组。&lt;/li&gt;
&lt;li&gt;因此，丢包率反映了网络的拥塞情况:无拥塞时路径丢包率为0&lt;/li&gt;
&lt;li&gt;轻度拥塞时路径丢包率为1%~4%&lt;/li&gt;
&lt;li&gt;严重拥塞时路径丢包率为5%~15%&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/11/11/CTF-Web-HTTP%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid>
            <title>CTF_Web_HTTP原理与实践</title>
            <link>https://mangpumo.github.io/2022/11/11/CTF-Web-HTTP%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link>
            <pubDate>Fri, 11 Nov 2022 12:02:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;http原理与实践&#34;&gt;&lt;a href=&#34;#http原理与实践&#34; class=&#34;headerlink&#34; title=&#34;http原理与实践&#34;&gt;&lt;/a&gt;http原理与实践&lt;/h1&gt;&lt;h2 id=&#34;经典五层模型&#34;&gt;&lt;a href=&#34;#经典五层模型&#34; class=&#34;headerlink&#34; title=&#34;经典五层模型&#34;&gt;&lt;/a&gt;经典五层模型&lt;/h2&gt;&lt;p&gt;外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传&lt;br&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200902110538969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ0NzU4NjQz,size_16,color_FFFFFF,t_70#pic_center&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;低三层&#34;&gt;&lt;a href=&#34;#低三层&#34; class=&#34;headerlink&#34; title=&#34;低三层&#34;&gt;&lt;/a&gt;低三层&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;物理层主要作用是定义物理设备如何传输数据&lt;ul&gt;
&lt;li&gt;电脑的网卡端口硬件设备&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;数据链路层在通讯的实体之间建立数据的链路连接&lt;/li&gt;
&lt;li&gt;网络层为数据在节点之间传输创建逻辑链路&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;传输层&#34;&gt;&lt;a href=&#34;#传输层&#34; class=&#34;headerlink&#34; title=&#34;传输层&#34;&gt;&lt;/a&gt;传输层&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;向用户提供可靠的端到端服务&lt;/li&gt;
&lt;li&gt;传输层向更高层屏蔽了下层数据通讯的细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;应用层&#34;&gt;&lt;a href=&#34;#应用层&#34; class=&#34;headerlink&#34; title=&#34;应用层&#34;&gt;&lt;/a&gt;应用层&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为应用软件提供了很多服务&lt;/li&gt;
&lt;li&gt;构建于tcp协议之上&lt;/li&gt;
&lt;li&gt;屏蔽网络传输相关细节&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP协议发展历史&#34;&gt;&lt;a href=&#34;#HTTP协议发展历史&#34; class=&#34;headerlink&#34; title=&#34;HTTP协议发展历史&#34;&gt;&lt;/a&gt;HTTP协议发展历史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;http&amp;#x2F;0.9&lt;ul&gt;
&lt;li&gt;只有一个命令get&lt;/li&gt;
&lt;li&gt;没有header等描述数据的信息&lt;/li&gt;
&lt;li&gt;服务器发送完毕就关闭tcp&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;http&amp;#x2F;1.0&lt;ul&gt;
&lt;li&gt;增加了很多命令&lt;/li&gt;
&lt;li&gt;增加了status code 和header&lt;/li&gt;
&lt;li&gt;多字符集支持，多部分发送，权限，缓存等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;http&amp;#x2F;1.1&lt;ul&gt;
&lt;li&gt;持久连接&lt;/li&gt;
&lt;li&gt;pipeline&lt;/li&gt;
&lt;li&gt;增加host和其它一些命令&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;http2&lt;ul&gt;
&lt;li&gt;所有数据已二进制传输&lt;/li&gt;
&lt;li&gt;同一个连接里面发送多个请求不在需要按照顺序来&lt;/li&gt;
&lt;li&gt;头信息压缩以及推送等提高效率的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http的三次握手&#34;&gt;&lt;a href=&#34;#http的三次握手&#34; class=&#34;headerlink&#34; title=&#34;http的三次握手&#34;&gt;&lt;/a&gt;http的三次握手&lt;/h2&gt;&lt;p&gt;  &lt;img data-src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA4LzI2L2RmR2lrai5wbmc?x-oss-process=image/format,png&#34;&gt;&lt;br&gt;  客户端发送创建连接&lt;/p&gt;
&lt;p&gt;  服务端确认连接&lt;/p&gt;
&lt;p&gt;  客户端确认连接 建立连接&lt;/p&gt;
&lt;h2 id=&#34;URI-URL-URN&#34;&gt;&lt;a href=&#34;#URI-URL-URN&#34; class=&#34;headerlink&#34; title=&#34;URI,URL,URN&#34;&gt;&lt;/a&gt;URI,URL,URN&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;URI&lt;ul&gt;
&lt;li&gt;Uniform Resource Identifier&amp;#x2F;统一资源标识符&lt;/li&gt;
&lt;li&gt;为了定位一个网址具体的某个页面&lt;/li&gt;
&lt;li&gt;用来唯一表示互联网上的信息资源&lt;/li&gt;
&lt;li&gt;包括URL和URN&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URL&lt;ul&gt;
&lt;li&gt;Uniform Resource Locator&amp;#x2F;统一资源定位器&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3VzZXIlRUYlQkMlOUFwYXNzQGhvc3QuY29tL3BhdGg/cXVlcnk9c3RyaW5nI2hhc2g=&#34;&gt;http://user：pass@host.com:80/path?query=string#hash&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;此类格式的都叫URL，比如ftp协议&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URN&lt;ul&gt;
&lt;li&gt;永久统一资源定位符&lt;/li&gt;
&lt;li&gt;在移动之后还能被找到&lt;/li&gt;
&lt;li&gt;目前行业没有应用方案&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http报文&#34;&gt;&lt;a href=&#34;#http报文&#34; class=&#34;headerlink&#34; title=&#34;http报文&#34;&gt;&lt;/a&gt;http报文&lt;/h2&gt;&lt;p&gt;  &lt;img data-src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA4LzI3L2RmeVdoNi5wbmc?x-oss-process=image/format,png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;http方法&#34;&gt;&lt;a href=&#34;#http方法&#34; class=&#34;headerlink&#34; title=&#34;http方法&#34;&gt;&lt;/a&gt;http方法&lt;/h2&gt;&lt;p&gt;  用来定义对于资源的操作&lt;/p&gt;
&lt;p&gt;  常有的有get和post&lt;/p&gt;
&lt;p&gt;  从定义上讲有各自的语义&lt;/p&gt;
&lt;h2 id=&#34;http-code&#34;&gt;&lt;a href=&#34;#http-code&#34; class=&#34;headerlink&#34; title=&#34;http code&#34;&gt;&lt;/a&gt;http code&lt;/h2&gt;&lt;p&gt;  定义服务器对请求的处理结果&lt;/p&gt;
&lt;p&gt;  各个区间的code有各自的语义&lt;/p&gt;
&lt;p&gt;  好的http服务可以通过code判断结果&lt;/p&gt;
&lt;h2 id=&#34;CORS预请求&#34;&gt;&lt;a href=&#34;#CORS预请求&#34; class=&#34;headerlink&#34; title=&#34;CORS预请求&#34;&gt;&lt;/a&gt;CORS预请求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在cors的限制&lt;ul&gt;
&lt;li&gt;只有get，head ，post方法其他的需要用一个方法去验证&lt;/li&gt;
&lt;li&gt;允许Content-Type&lt;ul&gt;
&lt;li&gt;text&amp;#x2F;plain&lt;/li&gt;
&lt;li&gt;multipart&amp;#x2F;form-data&lt;/li&gt;
&lt;li&gt;application&amp;#x2F;x-www-form-urlencoded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他的限制&lt;ul&gt;
&lt;li&gt;请求头的限制&lt;/li&gt;
&lt;li&gt;XMLHttpRequesUpload 对象均没有任何事件监听器&lt;/li&gt;
&lt;li&gt;请求中没有使用ReadableStream对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缓存Cache-Control&#34;&gt;&lt;a href=&#34;#缓存Cache-Control&#34; class=&#34;headerlink&#34; title=&#34;缓存Cache-Control&#34;&gt;&lt;/a&gt;缓存Cache-Control&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可缓存性&lt;ul&gt;
&lt;li&gt;public&lt;ul&gt;
&lt;li&gt;任何地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;private&lt;ul&gt;
&lt;li&gt;发起请求的浏览器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;no-cache&lt;ul&gt;
&lt;li&gt;谁也不缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;到期&lt;ul&gt;
&lt;li&gt;max-age&amp;#x3D;&lt;ul&gt;
&lt;li&gt;设置缓存多少秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;s-maxage&amp;#x3D;&lt;ul&gt;
&lt;li&gt;代理服务器设置缓存多少秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;max-stale&lt;ul&gt;
&lt;li&gt;缓存过期后依然可以使用缓存的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;重新验证&lt;ul&gt;
&lt;li&gt;must-revalidate&lt;ul&gt;
&lt;li&gt;缓存过期后必须去原服务端获取缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;proxy-revalidate&lt;ul&gt;
&lt;li&gt;用在缓存服务器中，缓存过期后必须去原服务端获取缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;其他&lt;ul&gt;
&lt;li&gt;no-store&lt;ul&gt;
&lt;li&gt;本地可以存缓存带必须服务器验证后才能用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;no-transform&lt;ul&gt;
&lt;li&gt;服务器不要随便改动缓存的内容&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;资源验证&#34;&gt;&lt;a href=&#34;#资源验证&#34; class=&#34;headerlink&#34; title=&#34;资源验证&#34;&gt;&lt;/a&gt;资源验证&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA4LzI3L2RmV0N0QS5wbmc?x-oss-process=image/format,png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证头&lt;ul&gt;
&lt;li&gt;Last-Modified&lt;/li&gt;
&lt;li&gt;Etag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Last-Modified&lt;ul&gt;
&lt;li&gt;上次修改时间&lt;/li&gt;
&lt;li&gt;配合If-Modified-Since或者If-Unmodified-Since使用&lt;/li&gt;
&lt;li&gt;对比上次时间验证是否需要更新&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Etag&lt;ul&gt;
&lt;li&gt;数据签名&lt;/li&gt;
&lt;li&gt;配合If-Match或者If-Non-Match使用&lt;/li&gt;
&lt;li&gt;对比资源的签名判断是否使用缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Cookie和Session&#34;&gt;&lt;a href=&#34;#Cookie和Session&#34; class=&#34;headerlink&#34; title=&#34;Cookie和Session&#34;&gt;&lt;/a&gt;Cookie和Session&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Cookie&lt;ul&gt;
&lt;li&gt;通过Set-Cookie设置&lt;/li&gt;
&lt;li&gt;下次请求会自动带上&lt;/li&gt;
&lt;li&gt;键值对，可以设置多个&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cookie属性&lt;ul&gt;
&lt;li&gt;max-age和expires设置过期时间&lt;/li&gt;
&lt;li&gt;Secure只在https的时候发送&lt;/li&gt;
&lt;li&gt;HttpOnly无法通过document.cookie访问&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP长连接&#34;&gt;&lt;a href=&#34;#HTTP长连接&#34; class=&#34;headerlink&#34; title=&#34;HTTP长连接&#34;&gt;&lt;/a&gt;HTTP长连接&lt;/h2&gt;&lt;p&gt;长连接就是请求后一段时间内不会关闭的连接这样下次访问的时候不用进行三次握手&lt;/p&gt;
&lt;h2 id=&#34;数据协商&#34;&gt;&lt;a href=&#34;#数据协商&#34; class=&#34;headerlink&#34; title=&#34;数据协商&#34;&gt;&lt;/a&gt;数据协商&lt;/h2&gt;&lt;p&gt;请求&lt;/p&gt;
&lt;p&gt;返回&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept&lt;ul&gt;
&lt;li&gt;Accept&lt;ul&gt;
&lt;li&gt;我想要的数据类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept-Encoding&lt;ul&gt;
&lt;li&gt;我的数据是什么编码方式主要是进行压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept-Language&lt;ul&gt;
&lt;li&gt;我的数据是什么语言（中文英文等)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;User-Agent&lt;ul&gt;
&lt;li&gt;返回的是移动端还是pc端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content&lt;ul&gt;
&lt;li&gt;Content-Type&lt;ul&gt;
&lt;li&gt;实际数据的返回格式对应Accept&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Encoding&lt;ul&gt;
&lt;li&gt;数据是什么编码格式对应Accept-Encoding&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Content-Language&lt;ul&gt;
&lt;li&gt;根据你的请求响应语言还是不根据你的请求响应你的语言&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Redirect&#34;&gt;&lt;a href=&#34;#Redirect&#34; class=&#34;headerlink&#34; title=&#34;Redirect&#34;&gt;&lt;/a&gt;Redirect&lt;/h2&gt;&lt;p&gt;更新网络资源当服务器的资源改变路径时使用&lt;/p&gt;
&lt;h2 id=&#34;csp&#34;&gt;&lt;a href=&#34;#csp&#34; class=&#34;headerlink&#34; title=&#34;csp&#34;&gt;&lt;/a&gt;csp&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;作用&lt;ul&gt;
&lt;li&gt;限制资源获取&lt;/li&gt;
&lt;li&gt;报告资源获取&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;限制方式&lt;ul&gt;
&lt;li&gt;default-src限制全局&lt;/li&gt;
&lt;li&gt;制定资源类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;https&#34;&gt;&lt;a href=&#34;#https&#34; class=&#34;headerlink&#34; title=&#34;https&#34;&gt;&lt;/a&gt;https&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;加密&lt;ul&gt;
&lt;li&gt;私钥&lt;/li&gt;
&lt;li&gt;公钥&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;握手过程&lt;br&gt;&lt;img data-src=&#34;https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMS5heDF4LmNvbS8yMDIwLzA4LzI3L2RmNHY4QS5wbmc?x-oss-process=image/format,png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http2&#34;&gt;&lt;a href=&#34;#http2&#34; class=&#34;headerlink&#34; title=&#34;http2&#34;&gt;&lt;/a&gt;http2&lt;/h2&gt;&lt;p&gt;信道复用&lt;/p&gt;
&lt;p&gt;分帧传输&lt;/p&gt;
&lt;p&gt;Server Push&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
