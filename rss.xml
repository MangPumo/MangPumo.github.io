<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title></title>
        <subtitle>漏洞不在机器，漏洞在人</subtitle>
        <icon>https://mangpumo.github.io/images/favicon.ico</icon>
        <link>https://MangPumo.github.io</link>
        <author>
          <name>Mang Pumo</name>
        </author>
        <description>欢迎来到 Mang Pumo 的个人博客!</description>
        <language>zh-CN</language>
        <pubDate>Fri, 21 Oct 2022 15:26:57 +0800</pubDate>
        <lastBuildDate>Fri, 21 Oct 2022 15:26:57 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/C%E8%AF%AD%E8%A8%80-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</guid>
            <title>C语言_进制转换</title>
            <link>https://mangpumo.github.io/2022/10/21/C%E8%AF%AD%E8%A8%80-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/</link>
            <pubDate>Fri, 21 Oct 2022 15:26:57 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;进制转换&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进制转换&#34;&gt;#&lt;/a&gt; 进制转换&lt;/h1&gt;
&lt;h2 id=&#34;任意进制转十进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#任意进制转十进制&#34;&gt;#&lt;/a&gt; 任意进制转十进制&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int x,p;   //x输入数字  p该数的进制数  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int y=0,product=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while(x!=0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		y=y+(x%10)*product;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		x=x/10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		product=product*p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	printf(&amp;quot;%d&amp;quot;,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;十进制转任意进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十进制转任意进制&#34;&gt;#&lt;/a&gt; 十进制转任意进制&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;注意：这里只能用 do...while（原因：如果输入的是 0，那么我们希望 a [0]=0）&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int x,p; //x为十进制数，p为目标进制大小 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int a[100]; //存放余数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int count=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	do&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		a[count++]=x%p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		x=x/p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;while(x!=0);//当商不为0时进行循环 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(int i=count-1;i&amp;gt;=0;i--)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;%d&amp;quot;,a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;二进制转十六进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二进制转十六进制&#34;&gt;#&lt;/a&gt; 二进制转十六进制&lt;/h2&gt;
&lt;p&gt;主要思路：确定十六进制数组大小 -&amp;gt; 确定二进制数数组大小 -&amp;gt; 二进制每过 4 位存入十六进制 1 位&lt;/p&gt;
&lt;p&gt;思路：输入的二进制数可能能不是 4 的整数倍，那么我们该如何处理呢？我们知道二进制不够 4 位，用 0 占位。于是我先将输入的二进制数除以 10000 取余 (看 4 位)，这样就确定十六进制数组的大小，反过 * 4 来就知道了二进制数的大小。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//输入2进制数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;x); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//确定：16进制数组大小size与2进制数组大小size*4.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int X=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int size=0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while(true)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(X%10000!=0)&amp;#123; //采取看4位二进制的方法 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			size++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			X=X/10000;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	char tt[size];   //16进制数数组 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int t[size*4]; //2进制数数组 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      //存入 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int sum=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int count=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(int i=0;i&amp;lt;sizeof(t)/sizeof(int);i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		t[i]=x%10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		x=x/10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sum=sum+t[i]*pow(2,count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(count%4==0)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if(sum&amp;gt;=10)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				tt[--size]=65+(sum-10);  //字符&amp;#x27;A&amp;#x27;的ascii码为65 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				tt[--size]=&amp;#x27;0&amp;#x27;+sum;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			count=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(int i=0;i&amp;lt;sizeof(tt);i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;%c&amp;quot;,tt[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;十进制转十六进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十进制转十六进制&#34;&gt;#&lt;/a&gt; 十进制转十六进制&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int a = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int arr[32] = &amp;#123; 0 &amp;#125;;//将转换后的十六进制数放进数组arr。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int y = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;, &amp;amp;a);//获取一个十进制数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while (a != 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		y++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		arr[y] = a % 16;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		a = a / 16;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (arr[y] &amp;gt; 9)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			arr[y] = &amp;#x27;A&amp;#x27; + (arr[y] - 10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			arr[y] = &amp;#x27;0&amp;#x27; + arr[y];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for (int i = y; i &amp;gt; 0; i--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;%c&amp;quot;, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//存放在数组中的十六进制数是反着的，打印的时候可以直接倒过来打印，打印出来的就是十六进制数了。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;十六进制转十进制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#十六进制转十进制&#34;&gt;#&lt;/a&gt; 十六进制转十进制&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;math.h&amp;gt;//千万别忘了引这个库&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	char a[20];//输入十六进制数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int b[20] = &amp;#123; 0 &amp;#125;;//将十六进制数转成int类型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int i, j, sum=0;//这里的sum别忘了初始化。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int c = 0;//最终的十进制数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	gets(a);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//将其从char类型转成int类型，并存入数组b[]中。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while (a[sum] != &amp;#x27;\0&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if ((a[sum] &amp;gt;= &amp;#x27;a&amp;#x27;) &amp;amp;&amp;amp; (a[sum] &amp;lt;= &amp;#x27;f&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			b[sum] = a[sum] - &amp;#x27;a&amp;#x27; + 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if ((a[sum] &amp;gt;= &amp;#x27;A&amp;#x27;) &amp;amp;&amp;amp; (a[sum] &amp;lt;= &amp;#x27;F&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			b[sum] = a[sum] - &amp;#x27;A&amp;#x27; + 10;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			b[sum] = a[sum] - &amp;#x27;0&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   //将每一位都转成16进制&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(i = 0; i &amp;lt; sum; i++)十进制转十六进制和十六进制转十进制是互逆的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		b[sum - 1 - i] = b[sum - 1 - i] * pow(16, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//直接累加&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for (j = 0;j&amp;lt;sum;j++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		c = c + b[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	printf(&amp;quot;%d&amp;quot;, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/KALI-%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDOS-ATTACK/</guid>
            <title>KALI_利用脚本实现DDOS-ATTACK</title>
            <link>https://mangpumo.github.io/2022/10/21/KALI-%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDOS-ATTACK/</link>
            <pubDate>Fri, 21 Oct 2022 14:30:12 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;kali-linux利用脚本实现ddos-attack&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#kali-linux利用脚本实现ddos-attack&#34;&gt;#&lt;/a&gt; KALI LINUX 利用脚本实现 DDOS-ATTACK&lt;/h1&gt;
&lt;h2 id=&#34;环境&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境&#34;&gt;#&lt;/a&gt; 环境&lt;/h2&gt;
&lt;p&gt;kali-everything 2022 镜像文件&lt;br&gt;
 VMware Workstation Pro&lt;/p&gt;
&lt;h2 id=&#34;步骤&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#步骤&#34;&gt;#&lt;/a&gt; 步骤&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下载配置文件（HA-MRX 大佬的脚本）（目前在用）&lt;br&gt;
&lt;em&gt;其他脚本在此暂不提及。&lt;/em&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone https://github.com/Elsa-zlt/DDos-Attack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;进入 root 模式&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 输入账号密码，密码默认不显示。&lt;/li&gt;
&lt;li&gt;前往 DDos-Attack 文件夹&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cd DDos-Attack&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;修改（设置）对 ddos-attack.py 文件执行的权限&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;chmod +x ddos-attack.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;执行 ddos-attack.py 程序&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Python ddos-attack.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;执行攻击&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/be24cb11083f4979a7841b2d4322f952.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZKf6Imv5aCC55qE5a2m5Lmg56yU6K6w,size_15,color_FFFFFF,t_70,g_se,x_16&#34; alt&gt;&lt;br&gt;
如若成功此处会提示输入 IP 地址。&lt;br&gt;
&lt;em&gt;打开一个命令行窗口，ping 一下目标网址获得 IP 地址&lt;/em&gt;&lt;br&gt;
点击回车&lt;br&gt;
 Port 输入线程数（推荐 80）&lt;br&gt;
原因：此次攻击并没有利用肉鸡（貌似），线程数值越高，耗能也越大，效果也会越好，但线程数如果超过电脑可承受范围，会导致进程卡死。&lt;br&gt;
回车运行，按下 ctrl C 退出。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;已知报错&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#已知报错&#34;&gt;#&lt;/a&gt; 已知报错&lt;/h2&gt;
&lt;p&gt;无法出现上述页面&lt;br&gt;
大佬脚本比较旧，python 版本过高，需要切换到 2.X&lt;/p&gt;
&lt;p&gt;命令行窗口输入：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;update-alternatives --config python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20190621114056591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09hdmluY2k=,size_16,color_FFFFFF,t_70&#34; alt&gt;&lt;br&gt;
 输入想切换版本前面的序号 回车，即可实现版本切换√&lt;/p&gt;
&lt;h2 id=&#34;注意&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#注意&#34;&gt;#&lt;/a&gt; 注意&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;攻击网址别瞎 XX 乱搞，多想一想&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;攻击网址别瞎 XX 乱搞，多想一想&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;攻击网址别瞎 XX 乱搞，多想一想&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/XTUOJ-1255%E5%8B%BE%E8%82%A1%E6%95%B0/</guid>
            <title>XTUOJ_1255勾股数</title>
            <link>https://mangpumo.github.io/2022/10/21/XTUOJ-1255%E5%8B%BE%E8%82%A1%E6%95%B0/</link>
            <pubDate>Fri, 21 Oct 2022 14:24:09 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;勾股数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#勾股数&#34;&gt;#&lt;/a&gt; 勾股数&lt;/h1&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;勾股数是指满足 a2+b2=c2 的正整数，比如最有名的 “勾三股四弦五”。&lt;br&gt;
现在给你两个正整数，请问是否存在另外一个正整数，使其成为 “勾股数”？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入&#34;&gt;#&lt;/a&gt; 输入&lt;/h2&gt;
&lt;p&gt;第一行是一个整数 K，表示样例的个数。 以后每行一个样例，为两个整数 x,y,(1≤x,y≤10000)。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出&#34;&gt;#&lt;/a&gt; 输出&lt;/h2&gt;
&lt;p&gt;每行输出一个样例的结果。如果不能构成勾股数，输出 “None”，如果存在多个，输出最小的那个。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输入&#34;&gt;#&lt;/a&gt; 样例输入&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12 13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输出&#34;&gt;#&lt;/a&gt; 样例输出&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;5 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;None &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考源码&#34;&gt;#&lt;/a&gt; 参考源码&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;math.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int K;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while(K--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int a,b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		scanf(&amp;quot;%d %d&amp;quot;,&amp;amp;a,&amp;amp;b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int a1,b1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(a&amp;gt;b)//a1&amp;gt;b1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		    a1 = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		    b1 = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			a1 = b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		    b1 = a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int c1,c2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		c1 = (int)sqrt(a1*a1-b1*b1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		c2 = (int)sqrt(a1*a1+b1*b1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(a1*a1-b1*b1==c1*c1&amp;amp;&amp;amp;c1&amp;gt;0)//c1&amp;gt;0防止a,b相等 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;%d\n&amp;quot;,c1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		else if(a1*a1+b1*b1==c2*c2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;%d\n&amp;quot;,c2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;None\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/XTUOJ-1113%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/</guid>
            <title>XTUOJ_1113区间相交</title>
            <link>https://mangpumo.github.io/2022/10/21/XTUOJ-1113%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/</link>
            <pubDate>Fri, 21 Oct 2022 13:07:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;区间相交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#区间相交&#34;&gt;#&lt;/a&gt; 区间相交&lt;/h1&gt;
&lt;h2 id=&#34;description&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#description&#34;&gt;#&lt;/a&gt; Description&lt;/h2&gt;
&lt;p&gt;给你两个闭区间，请判断这两个区间是否相交。&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入&#34;&gt;#&lt;/a&gt; 输入&lt;/h2&gt;
&lt;p&gt;有多组样例，第一行是一个整数 N (1&amp;lt;=N&amp;lt;=100)，表示有多少个样例。每个样例占两行，每行是两个整数，X，Y (0&amp;lt;=X&amp;lt;=Y&amp;lt;=1000)，表示闭区间 [X,Y]。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出&#34;&gt;#&lt;/a&gt; 输出&lt;/h2&gt;
&lt;p&gt;每行输出一个样例的结果，如果相交，那么输出 “Yes”，否则输出 “No”。&lt;/p&gt;
&lt;h2 id=&#34;sample-input&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sample-input&#34;&gt;#&lt;/a&gt; Sample Input&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6 7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;sample-output&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sample-output&#34;&gt;#&lt;/a&gt; Sample Output&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;No&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考源码&#34;&gt;#&lt;/a&gt; 参考源码&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int N;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;N);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while(N--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int count = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int x1,y1,x2,y2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			scanf(&amp;quot;%d %d %d %d&amp;quot;,&amp;amp;x1,&amp;amp;y1,&amp;amp;x2,&amp;amp;y2);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if((x2&amp;gt;=x1&amp;amp;&amp;amp;x2&amp;lt;=y1)||(y2&amp;gt;=x1&amp;amp;&amp;amp;y2&amp;lt;=y1)||(x1&amp;gt;=x2&amp;amp;&amp;amp;x1&amp;lt;=y2)||(y1&amp;gt;=x2&amp;amp;&amp;amp;y1&amp;lt;=y2))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                printf(&amp;quot;Yes\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                printf(&amp;quot;No\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/XTUOJ-1437%E6%AF%94%E4%BE%8B/</guid>
            <title>XTUOJ_1437比例</title>
            <link>https://mangpumo.github.io/2022/10/21/XTUOJ-1437%E6%AF%94%E4%BE%8B/</link>
            <pubDate>Fri, 21 Oct 2022 12:35:29 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;比例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#比例&#34;&gt;#&lt;/a&gt; 比例&lt;/h1&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;...... 图片存储问题，图片见下网址&lt;br&gt;
&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovLzIwMi4xOTcuMjI0LjU5L2V4YW0vaW5kZXgucGhwL3Byb2JsZW0vZXhhbV9yZWFkL2lkLzE0MzcvZXhhbV9pZC8zODQ=&#34;&gt; http://202.197.224.59/exam/index.php/problem/exam_read/id/1437/exam_id/384&lt;/span&gt;&lt;br&gt;
 已知 BD:DA=a:b, AE:EC=c:d, FC:FB=e:f，求 DG:GF。&lt;/p&gt;
&lt;h2 id=&#34;输入格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入格式&#34;&gt;#&lt;/a&gt; 输入格式&lt;/h2&gt;
&lt;p&gt;第一行是一个整数 T (1≤T≤1000)，表示样例的个数。&lt;/p&gt;
&lt;p&gt;以后每行 6 个整数，依次为 a,b,c,d,e,f (1≤a,b,c,d,e,f≤1000)。&lt;/p&gt;
&lt;h2 id=&#34;输出格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出格式&#34;&gt;#&lt;/a&gt; 输出格式&lt;/h2&gt;
&lt;p&gt;依次每行输出一个样例的结果，为两个整数 x 和 y，两者之间有一个空格，x 和 y 互质。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输入&#34;&gt;#&lt;/a&gt; 样例输入&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4 1 2 1 1 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输出&#34;&gt;#&lt;/a&gt; 样例输出&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;12 5 &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考源码&#34;&gt;#&lt;/a&gt; 参考源码&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int gcd(int x,int y)//公因数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(y==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return gcd(y,x%y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	int T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	scanf(&amp;quot;%d&amp;quot;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	while(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		int a,b,c,d,e,f;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		scanf(&amp;quot;%d %d %d %d %d %d&amp;quot;,&amp;amp;a,&amp;amp;b,&amp;amp;c,&amp;amp;d,&amp;amp;e,&amp;amp;f);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		int gy,DG,GF,x,y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		gy = gcd((a*c*(e+f)),(d*f*(a+b)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		DG = (a*c*(e+f));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		GF = (d*f*(a+b));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		x = DG/gy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		y = GF/gy;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 		printf(&amp;quot;%d %d\n&amp;quot;,x,y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; 	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/XTUOJ-1211A+BI/</guid>
            <title>XTUOJ_1211A+BI</title>
            <link>https://mangpumo.github.io/2022/10/21/XTUOJ-1211A+BI/</link>
            <pubDate>Fri, 21 Oct 2022 11:32:08 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ab-i&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ab-i&#34;&gt;#&lt;/a&gt; A+B I&lt;/h1&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;小明在做算术题，他计算了一些 a+b 的等式，请判断一下他是否算对了？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入&#34;&gt;#&lt;/a&gt; 输入&lt;/h2&gt;
&lt;p&gt;第一行是一个整数 K，表示样例的个数。 每个样例占一行，形如 a+b=c, 其中 0≤a,b,c≤1,000&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出&#34;&gt;#&lt;/a&gt; 输出&lt;/h2&gt;
&lt;p&gt;每行输出一个样例的判断结果，算对了输出 “Yes”，否则输出 “No”。（引号不需要输出）&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输入&#34;&gt;#&lt;/a&gt; 样例输入&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1+2=3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2+3=4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输出&#34;&gt;#&lt;/a&gt; 样例输出&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;No&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考源码&#34;&gt;#&lt;/a&gt; 参考源码&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int K;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	while(K--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int a,b,c,ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		scanf(&amp;quot;%d+%d=%d&amp;quot;,&amp;amp;a,&amp;amp;b,&amp;amp;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		ans = a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if(ans==c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		    printf(&amp;quot;Yes\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		printf(&amp;quot;No\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/21/XTUOJ-1405%E4%B8%96%E7%95%8C%E6%9D%AF/</guid>
            <title>XTUOJ_1405世界杯</title>
            <link>https://mangpumo.github.io/2022/10/21/XTUOJ-1405%E4%B8%96%E7%95%8C%E6%9D%AF/</link>
            <pubDate>Fri, 21 Oct 2022 11:20:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;world-cup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#world-cup&#34;&gt;#&lt;/a&gt; World Cup&lt;/h1&gt;
&lt;h2 id=&#34;题目描述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#题目描述&#34;&gt;#&lt;/a&gt; 题目描述&lt;/h2&gt;
&lt;p&gt;世界杯来了！！！自然，足球博彩也变得炙手可热。现在有 n 家博彩公司针对比赛的胜负平给出不同的赔率（比如，赔率为 1 赔 1.5，即如果下注 1 块钱，猜对了会获得 1.5 元，盈利 0.5 元），请问是否有一种策略可以保证一定赢钱？&lt;/p&gt;
&lt;h2 id=&#34;输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输入&#34;&gt;#&lt;/a&gt; 输入&lt;/h2&gt;
&lt;p&gt;第一行是一个整数 T (1≤T≤1000)，表示样例的个数。 每个样例的第一行是一个整数 n (1≤n≤10)，表示博彩公司的数量。 以后的每行包括三个浮点数，w,d,l (1.0&amp;lt;w,d,l≤100.0)，分别表示比赛主队胜平负的赔率。&lt;/p&gt;
&lt;h2 id=&#34;输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#输出&#34;&gt;#&lt;/a&gt; 输出&lt;/h2&gt;
&lt;p&gt;每行输出一个样例的结果，如果存在必赢的策略，输出 &amp;quot;Yes&amp;quot;；否则输出 &amp;quot;No&amp;quot;。&lt;/p&gt;
&lt;h2 id=&#34;样例输入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输入&#34;&gt;#&lt;/a&gt; 样例输入&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.3 4.8 10.5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.4 4.0 9.7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.3 5.6 9.8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1.45 5.0 8.9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;样例输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#样例输出&#34;&gt;#&lt;/a&gt; 样例输出&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;No&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考源码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#参考源码&#34;&gt;#&lt;/a&gt; 参考源码&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
using namespace std;
int main()
&amp;#123;
	int T;
	double w,d,l;
	double x=0,y=0,z=0;
	
	scanf(&amp;quot;%d&amp;quot;,&amp;amp;T);
	while(T--)
	&amp;#123;
		int K;
		scanf(&amp;quot;%d&amp;quot;,&amp;amp;K);
		while(K--)
		&amp;#123;
			scanf(&amp;quot;%lf %lf %lf&amp;quot;,&amp;amp;w,&amp;amp;d,&amp;amp;l);
		    if(x&amp;lt;=w)
		    x = w;
		    if(y&amp;lt;=d)
		    y = d;
		    if(z&amp;lt;=l)
		    z = l;
		&amp;#125;
		x = 1/x;
		y = 1/y;
		z = 1/z;
		if(x+y+z&amp;lt;=1)
		    printf(&amp;quot;Yes\n&amp;quot;);
		else
		    printf(&amp;quot;No\n&amp;quot;);
		    x=0;
		    y=0;
		    z=0;
	&amp;#125;
&amp;#125;&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-string-h%E5%A4%B4%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0/</guid>
            <title>C语言_string.h头文件函数</title>
            <link>https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-string-h%E5%A4%B4%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0/</link>
            <pubDate>Thu, 20 Oct 2022 19:17:35 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;stringh头文件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stringh头文件&#34;&gt;#&lt;/a&gt; string.h 头文件&lt;/h1&gt;
&lt;h2 id=&#34;strdup&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strdup&#34;&gt;#&lt;/a&gt; strdup&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strdup (const char *s)&lt;br&gt;
 函数功能：字符串拷贝，目的空间由该函数分配&lt;br&gt;
函数返回：指向拷贝后的字符串指针&lt;br&gt;
参数说明:  src - 待拷贝的源字符串&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *dup_str, *string=&amp;quot;abcde&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  dup_str=strdup(string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;%s&amp;quot;, dup_str); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  free(dup_str); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strcpy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strcpy&#34;&gt;#&lt;/a&gt; strcpy&lt;/h2&gt;
&lt;p&gt;函数原型:  char* strcpy (char* str1,char* str2);&lt;br&gt;
 函数功能：把 str2 指向的字符串拷贝到 str1 中去&lt;br&gt;
函数返回：返回 str1, 即指向 str1 的指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char string[10]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *str1=&amp;quot;abcdefghi&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strcpy(string,str1); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;the string is:%s\n&amp;quot;,string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strncpy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strncpy&#34;&gt;#&lt;/a&gt; strncpy&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strncpy (char *dest, const char *src，intcount)&lt;br&gt;
 函数功能：将字符串 src 中的 count 个字符拷贝到字符串 dest 中去&lt;br&gt;
函数返回：指向 dest 的指针&lt;br&gt;
参数说明:  dest - 目的字符串，src - 源字符串，count - 拷贝的字符个数&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char*src = &amp;quot;bbbbbbbbbbbbbbbbbbbb&amp;quot;;//20 &amp;#x27;b&amp;#x27;s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char dest[50] =&amp;quot;aaaaaaaaaaaaaaaaaaaa&amp;quot;;//20 &amp;#x27;a&amp;#x27;s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   puts(dest);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   strncpy(dest, src, 10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   puts(dest);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*******************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;aaaaaaaaaaaaaaaaaaaa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bbbbbbbbbbaaaaaaaaaa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*******************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 注意：&lt;/strong&gt;&lt;br&gt;
strncpy 只复制指定长度的字符，不会自动在末尾加 &#39;\0&#39;。若指定长度超过源字符串长度，不够的部分补‘\0’.&lt;/p&gt;
&lt;h2 id=&#34;stacat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#stacat&#34;&gt;#&lt;/a&gt; stacat&lt;/h2&gt;
&lt;p&gt;函数原型:  char* strcat (char * str1,char * str2);&lt;br&gt;
 函数功能：把字符串 str2 接到 str1 后面，str1 最后的 &#39;\0&#39; 被取消&lt;br&gt;
函数返回:  str1&lt;br&gt;
 参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char buffer[80];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strcpy(buffer,&amp;quot;Hello &amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strcat(buffer,&amp;quot;world&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;%s\n&amp;quot;,buffer); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strncat&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strncat&#34;&gt;#&lt;/a&gt; strncat&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strncat (char *dest, const char *src, size_t maxlen)&lt;br&gt;
 函数功能：将字符串 src 中前 maxlen 个字符连接到 dest 中&lt;br&gt;
函数返回:&lt;br&gt;
 参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char buffer[80];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strcpy(buffer,&amp;quot;Hello &amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strncat(buffer,&amp;quot;world&amp;quot;,8); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;%s\n&amp;quot;,buffer); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strncat(buffer,&amp;quot;*************&amp;quot;,4); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;%s\n&amp;quot;,buffer); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 注意:&lt;/strong&gt;&lt;br&gt;
 与 strncpy 不同的是，strncat 会自动在末尾加‘\0’，若指定长度超过源字符串长度，则只复制源字符串长度即停止.&lt;/p&gt;
&lt;h2 id=&#34;strcmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strcmp&#34;&gt;#&lt;/a&gt; strcmp&lt;/h2&gt;
&lt;p&gt;函数原型:  int strcmp (char * str1,char * str2);&lt;br&gt;
 函数功能：比较两个字符串 str1,str2.&lt;br&gt;
 函数返回:  str1&amp;lt;str2, 返回负数；str1=str2, 返回 0; str1&amp;gt;str2, 返回正数.&lt;br&gt;
 参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *buf1=&amp;quot;aaa&amp;quot;, *buf2=&amp;quot;bbb&amp;quot;,*buf3=&amp;quot;ccc&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  int ptr; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr=strcmp(buf2, buf1); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(ptr&amp;gt;0) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;buffer 2 is greater thanbuffer 1\n&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;buffer 2 is less thanbuffer 1\n&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr=strcmp(buf2, buf3); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(ptr&amp;gt;0) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;buffer 2 is greater thanbuffer 3\n&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;buffer 2 is less thanbuffer 3\n&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strncmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strncmp&#34;&gt;#&lt;/a&gt; strncmp&lt;/h2&gt;
&lt;p&gt;函数原型:  int strncmp (char *str1,char *str2,int count)&lt;br&gt;
 函数功能：对 str1 和 str2 中的前 count 个字符按字典顺序比较&lt;br&gt;
函数返回：小于 0：str1&amp;lt;str2，等于 0：str1=str2，大于 0：str1&amp;gt;str2&lt;br&gt;
 参数说明:  str1,str2 - 待比较的字符串，count - 比较的长度&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char str1[] =&amp;quot;aabbc&amp;quot;;//&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char str2[] = &amp;quot;abbcd&amp;quot;;//&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   //为使测试程序更简练，此处假定了strncmp只返回-1,0,1三个数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char res_info[] = &amp;#123;&amp;#x27;&amp;lt;&amp;#x27;,&amp;#x27;=&amp;#x27;,&amp;#x27;&amp;gt;&amp;#x27;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   int res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   //前1个字符比较&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   res = strncmp(str1, str2, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;1：str1%c str2\n&amp;quot;, res_info[res+1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //前3个字符比较&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   res = strncmp(str1, str2, 3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;3：str1%c str2\n&amp;quot;, res_info[res+1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出:&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/****************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1：str1= str2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3：str1&amp;lt; str2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*****************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strpbrk&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strpbrk&#34;&gt;#&lt;/a&gt; strpbrk&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strpbrk (const char *s1, const char *s2)&lt;br&gt;
 函数功能：得到 s1 中第一个 “同时也出现在 s2 中” 字符的位置指针&lt;br&gt;
函数返回：位置指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char *p=&amp;quot;Find all vowels&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   p=strpbrk(p+1,&amp;quot;aeiouAEIOU&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   while(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      printf(&amp;quot;%s\n&amp;quot;,p);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      p=strpbrk(p+1,&amp;quot;aeiouAEIOU&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/**************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ind all vowels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;all vowels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;owels&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;els&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strcspn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strcspn&#34;&gt;#&lt;/a&gt; strcspn&lt;/h2&gt;
&lt;p&gt;函数原型:  int strcspn (const char *s1, const char *s2)&lt;br&gt;
 函数功能：统计 s1 中从头开始直到第一个 “来自 s2 中的字符” 出现的长度&lt;br&gt;
函数返回：长度&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;%d\n&amp;quot;,strcspn(&amp;quot;abcbcadef&amp;quot;,&amp;quot;cba&amp;quot;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;%d\n&amp;quot;,strcspn(&amp;quot;xxxbcadef&amp;quot;,&amp;quot;cba&amp;quot;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;%d\n&amp;quot;,strcspn(&amp;quot;123456789&amp;quot;,&amp;quot;cba&amp;quot;)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strspn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strspn&#34;&gt;#&lt;/a&gt; strspn&lt;/h2&gt;
&lt;p&gt;函数原型:  int strspn (const char *s1, const char *s2)&lt;br&gt;
 函数功能：统计 s1 中从头开始直到第一个 “不来自 s2 中的字符” 出现的长度&lt;br&gt;
函数返回：位置指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;alloc.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;%d\n&amp;quot;,strspn(&amp;quot;abcbcadef&amp;quot;,&amp;quot;cba&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;%d\n&amp;quot;,strspn(&amp;quot;xxxbcadef&amp;quot;,&amp;quot;cba&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;%d\n&amp;quot;,strspn(&amp;quot;123456789&amp;quot;,&amp;quot;cba&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strchr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strchr&#34;&gt;#&lt;/a&gt; strchr&lt;/h2&gt;
&lt;p&gt;函数原型:  char* strchr (char* str,char ch);&lt;br&gt;
 函数功能：找出 str 指向的字符串中第一次出现字符 ch 的位置&lt;br&gt;
函数返回：返回指向该位置的指针，如找不到，则返回空指针&lt;br&gt;
参数说明:  str - 待搜索的字符串，ch - 查找的字符&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char *str = &amp;quot;This is a string!&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char *p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   while(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      printf(&amp;quot;Please input a char:&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      ch = getchar();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      p = strchr(str, ch);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if(p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         printf(&amp;quot;%c is the %d character of\&amp;quot;%s\&amp;quot;\n&amp;quot;,ch, (int)(p-str+1),str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         printf(&amp;quot;Not found!\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      printf(&amp;quot;Press ESC to quit!\n\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      if(27 == getch())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;      fflush(stdin);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 运行结果：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/********************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Please input achar:i&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;i is the 3character of &amp;quot;This is a string!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Press ESC to quit!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Please input achar:l&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Not found!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Press ESC to quit!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Please input achar:s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s is the 4character of &amp;quot;This is a string!&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Press ESC to quit!&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**********************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strrchr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strrchr&#34;&gt;#&lt;/a&gt; strrchr&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strrchr (const char *s, int c)&lt;br&gt;
 函数功能：得到字符串 s 中最后一个含有 c 字符的位置指针&lt;br&gt;
函数返回：位置指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charstring[15]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char*ptr,c=&amp;#x27;r&amp;#x27;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; strcpy(string,&amp;quot;This is a string&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ptr=strrchr(string,c); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (ptr) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;The character %c is at position:%d&amp;quot;,c,ptr-string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;The character was not found&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strstr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strstr&#34;&gt;#&lt;/a&gt; strstr&lt;/h2&gt;
&lt;p&gt;函数原型:  char* strstr (char* str1,char* str2);&lt;br&gt;
 函数功能：找出 str2 字符串在 str1 字符串中第一次出现的位置 (不包括 str2 的串结束符)&lt;br&gt;
 函数返回：返回该位置的指针，如找不到，返回空指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char*str1=&amp;quot;Open Watcom C/C++&amp;quot;,*str2=&amp;quot;Watcom&amp;quot;,*ptr; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ptr=strstr(str1,str2); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;The substring is:%s\n&amp;quot;,ptr); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;The substringis:Watcom C/C++&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strrev&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strrev&#34;&gt;#&lt;/a&gt; strrev&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strrev (char *s)&lt;br&gt;
 函数功能：将字符串中的所有字符颠倒次序排列&lt;br&gt;
函数返回：指向 s 的指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char forward[]=&amp;quot;string&amp;quot;; //原文中定义为char*是不对的，指向代码段的指针内容是不可变的&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;Before strrev():%s&amp;quot;,forward); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; strrev(forward); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;Afterstrrev(): %s&amp;quot;,forward); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Beforestrrev():string&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;After strrev():gnirts&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strnset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strnset&#34;&gt;#&lt;/a&gt; strnset&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strnset (char *s, int ch, size_t n)&lt;br&gt;
 函数功能：将字符串 s 中前 n 个字符设置为 ch 的值&lt;br&gt;
函数返回：指向 s 的指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   charstring[]=&amp;quot;aaaaaaaaaaaaaaaaaaaaaaa&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   char letter=&amp;#x27;x&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;string before strnset:%s\n&amp;quot;,string);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   strnset(string,letter,10);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;string after strnset:  %s\n&amp;quot;,string);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string beforestrnset: aaaaaaaaaaaaaaaaaaaaaaa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string afterstrnset:  xxxxxxxxxxaaaaaaaaaaaaa&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*************************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strset&#34;&gt;#&lt;/a&gt; strset&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strset (char *s, int ch)&lt;br&gt;
 函数功能：将字符串 s 中所有字符设置为 ch 的值&lt;br&gt;
函数返回：指向 s 的指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charstring[10]=&amp;quot;123456789&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charsymbol=&amp;#x27;c&amp;#x27;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;Before strset(): %s&amp;quot;, string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; strset(string, symbol); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;After strset(): %s&amp;quot;, string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strtok&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strtok&#34;&gt;#&lt;/a&gt; strtok&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strtok (char *s1, const char *s2)&lt;br&gt;
 函数功能：分解 s1 字符串为用特定分隔符分隔的多个字符串 (一般用于将英文句分解为单词)&lt;br&gt;
 函数返回：字符串 s1 中首次出现 s2 中的字符前的子字符串指针&lt;/p&gt;
&lt;p&gt;参数说明:  s2 一般设置为 s1 中的分隔字符&lt;br&gt;
&lt;strong&gt;规定进行子调用时（即分割 s1 的第二、三及后续子串）第一参数必须是 NULL&lt;/strong&gt;&lt;br&gt;
 在每一次匹配成功后，将 s1 中分割出的子串位置替换为 NULL (摘下链中第一个环)，因此 s1 被破坏了&lt;/p&gt;
&lt;p&gt;函数会记忆指针位置以供下一次调用&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *p; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char*buffer; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char*delims=&amp;#123; &amp;quot; .,&amp;quot; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; buffer=strdup(&amp;quot;Find words, all of them.&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;%s\n&amp;quot;,buffer); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; p=strtok(buffer,delims); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; while(p!=NULL)&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   printf(&amp;quot;word: %s\n&amp;quot;,p); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   p=strtok(NULL,delims); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;%s\n&amp;quot;,buffer); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;//根据测试，可以随时给strtok的第一个参数输入一个新的字符串，开始新字符串的分隔&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt;PS：根据测试，可以随时给 strtok 的第一个参数输入一个新的字符串，开始新字符串的分隔&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;strupr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strupr&#34;&gt;#&lt;/a&gt; strupr&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strupr (char *s)&lt;br&gt;
 函数功能：将字符串 s 中的字符变为大写&lt;br&gt;
函数返回:&lt;br&gt;
 参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char string[]=&amp;quot;abcdefghijklmnopqrstuvwxyz&amp;quot;,*ptr; //会影响原字符串的内存，用char[]来声明&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr=strupr(string); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;%s&amp;quot;,ptr); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strlwr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strlwr&#34;&gt;#&lt;/a&gt; strlwr&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strlwr (char *s)&lt;br&gt;
 函数功能：将字符串中的字符变为小写字符&lt;br&gt;
函数返回：指向 s 的指针&lt;br&gt;
参数说明:&lt;br&gt;
 所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char str[]=&amp;quot;HOW TO SAY?&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;%s&amp;quot;,strlwr(str)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;strerror&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#strerror&#34;&gt;#&lt;/a&gt; strerror&lt;/h2&gt;
&lt;p&gt;函数原型:  char *strerror (int errnum)&lt;br&gt;
 函数功能：得到错误信息的内容信息&lt;br&gt;
函数返回：错误提示信息字符串指针&lt;br&gt;
参数说明:  errnum - 错误编号&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;errno.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *buffer; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  buffer=strerror(errno); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;Error: %s&amp;quot;,buffer); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;memcpy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memcpy&#34;&gt;#&lt;/a&gt; memcpy&lt;/h2&gt;
&lt;p&gt;函数原型:  void *memcpy (void *dest, const void *src, size_t n)&lt;br&gt;
 函数功能：字符串拷贝&lt;br&gt;
函数返回：指向 dest 的指针&lt;br&gt;
参数说明:  src - 源字符串，n - 拷贝的最大长度&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char src[]=&amp;quot;******************************&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char dest[]=&amp;quot;abcdefghijlkmnopqrstuvwxyz0123456709&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *ptr; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;destination before memcpy:%s\n&amp;quot;,dest); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr=memcpy(dest,src,strlen(src)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (ptr) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;destination after memcpy:%s\n&amp;quot;,dest); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;memcpy failed&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*************************************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;destination before memcpy:abcdefghijlkmnopqrstuvwxyz0123456709&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;destination after memcpy:******************************456709&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;**************************************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;memeccpy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memeccpy&#34;&gt;#&lt;/a&gt; memeccpy&lt;/h2&gt;
&lt;p&gt;函数原型:  void *memccpy (void *dest, const void *src, int c, size_t n)&lt;br&gt;
 函数功能：字符串拷贝，到指定长度或遇到指定字符时停止拷贝&lt;br&gt;
函数返回:&lt;br&gt;
 参数说明:  src - 源字符串指针，c - 中止拷贝检查字符，n - 长度，dest - 拷贝底目的字符串指针&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *src=&amp;quot;This is the source string&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char dest[50]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *ptr; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr=memccpy(dest,src,&amp;#x27;c&amp;#x27;,strlen(src)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (ptr) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    *ptr=&amp;#x27;\0&amp;#x27;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;The character wasfound:%s&amp;quot;,dest); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;The character wasn&amp;#x27;tfound&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*****************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The character was found:This is the sourc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*****************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;memchr&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memchr&#34;&gt;#&lt;/a&gt; memchr&lt;/h2&gt;
&lt;p&gt;函数原型:  void *memchr (const void *s, int c, size_t n)&lt;br&gt;
 函数功能：在字符串中第开始 n 个字符中寻找某个字符 c 的位置&lt;br&gt;
函数返回：返回 c 的位置指针，返回 NULL 时表示未找到&lt;br&gt;
参数说明:  s - 要搜索的字符串，c - 要寻找的字符，n - 指定长度&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char str[17]; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *ptr; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  strcpy(str,&amp;quot;This is a string&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ptr=memchr(str,&amp;#x27;r&amp;#x27;,strlen(str)); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if (ptr) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;The character &amp;#x27;r&amp;#x27; is at position:%d&amp;quot;,ptr-str); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;The character was not found&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;memecmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memecmp&#34;&gt;#&lt;/a&gt; memecmp&lt;/h2&gt;
&lt;p&gt;函数原型:  int memcmp (const void *s1, const void *s2,size_t n)&lt;br&gt;
 函数功能：按字典顺序比较两个串 s1 和 s2 的前 n 个字节&lt;br&gt;
函数返回:  &amp;lt;0,=0,&amp;gt;0 分别表示 s1&amp;lt;,=,&amp;gt;s2&lt;br&gt;
 参数说明:  s1,s2 - 要比较的字符串，n - 比较的长度&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *buf1=&amp;quot;ABCDE123&amp;quot;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *buf2=&amp;quot;abcde456&amp;quot;;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  int stat;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stat=memcmp(buf1,buf2,5);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;The strings to position 5 are&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(stat) printf(&amp;quot;not &amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;the same\n&amp;quot;);  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;memicmp&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memicmp&#34;&gt;#&lt;/a&gt; memicmp&lt;/h2&gt;
&lt;p&gt;函数原型:  int memicmp (const void *s1, const void *s2, size_t n)&lt;br&gt;
 函数功能：按字典顺序、不考虑字母大小写对字符串 s1,s2 前 n 个字符比较&lt;br&gt;
函数返回:  &amp;lt;0,=0,&amp;gt;0 分别表示 s1&amp;lt;,=,&amp;gt;s2&lt;br&gt;
 参数说明:  s1,s2 - 要比较的字符串，n - 比较的长度&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *buf1=&amp;quot;ABCDE123&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  char *buf2=&amp;quot;abcde456&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  int stat; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  stat=memicmp(buf1,buf2,5); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;The strings to position 5 are&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  if(stat) printf(&amp;quot;not&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;the same&amp;quot;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出：&lt;/strong&gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/**************************************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The strings to position 5 are the same&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;***************************************/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;memmove&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memmove&#34;&gt;#&lt;/a&gt; memmove&lt;/h2&gt;
&lt;p&gt;函数原型:  void *memmove (void *dest, const void *src, size_t n)&lt;br&gt;
 函数功能：字符串拷贝&lt;br&gt;
函数返回：指向 dest 的指针&lt;br&gt;
参数说明:  src - 源字符串，n - 拷贝的最大长度&lt;br&gt;
所属文件:  &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  chardest[40]=&amp;quot;abcdefghijklmnopqrstuvwxyz0123456789&amp;quot;; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;destination prior tomemmove:%s\n&amp;quot;,dest); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  memmove(dest+1,dest,35); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  printf(&amp;quot;destination aftermemmove:%s&amp;quot;,dest); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt;PS：与 memcpy 不同的是，memmove 可以处理目的字符串与源字符串地址空间出现重叠的情况，可保证待复制的内容不被破坏。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;memset&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#memset&#34;&gt;#&lt;/a&gt; memset&lt;/h2&gt;
&lt;p&gt;函数原型:   void *memset (void *s, int c, size_t n)&lt;br&gt;
 函数功能：字符串中的 n 个字节内容设置为 c&lt;br&gt;
 函数返回:&lt;br&gt;
 参数说明:   s - 要设置的字符串，c - 设置的内容，n - 长度&lt;br&gt;
所属文件:   &amp;lt;string.h&amp;gt;,&amp;lt;mem.h&amp;gt;&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;mem.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  charbuffer[]=&amp;quot;Hello world&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;Buffer before memset:%s/n&amp;quot;,buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; memset(buffer,&amp;#x27;*&amp;#x27;,strlen(buffer)-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; printf(&amp;quot;Buffer after memset:%s&amp;quot;,buffer);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%BE%93%E5%87%BA/</guid>
            <title>C语言_二维数组的定义、初始化和输出</title>
            <link>https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%BE%93%E5%87%BA/</link>
            <pubDate>Thu, 20 Oct 2022 14:38:38 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;二维数组的定义&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维数组的定义&#34;&gt;#&lt;/a&gt; 二维数组的定义&lt;/h1&gt;
&lt;p&gt;二维数组定义的一般形式为：&lt;br&gt;
&lt;strong&gt;类型说明符 数组名 [常量表达式][ 常量表达式];&lt;/strong&gt;&lt;br&gt;
eg： int a[3][4]；&lt;/p&gt;
&lt;p&gt;表示定义了一个 3×4，即 3 行 4 列总共有 12 个元素的数组 a。这 12 个元素的名字依次是：a [0][0]、a [0][1]、a [0][2]、a [0][3]；a [1][0]、a [1][1]、a [1][2]、a [1][3]；a [2][0]、a [2][1]、a [2][2]、a [2][3]。&lt;/p&gt;
&lt;p&gt;与一维数组一样，行序号和列序号的下标都是从 0 开始的。元素 a [i][j] 表示第 i+1 行、第 j+1 列的元素。数组 int a [m][n] 最大范围处的元素是 a [m–1][n–1]。所以在引用数组元素时应该注意，下标值应在定义的数组大小的范围内。&lt;/p&gt;
&lt;p&gt;此外，与一维数组一样，定义数组时用到的 “数组名 [常量表达式][常量表达式]” 和引用数组元素时用到的 “数组名 [下标][下标]” 是有区别的。前者是定义一个数组，以及该数组的维数和各维的大小。而后者仅仅是元素的下标，像坐标一样，对应一个具体的元素。&lt;/p&gt;
&lt;p&gt;C 语言对二维数组采用这样的定义方式，使得二维数组可被看作一种特殊的一维数组，即它的元素为一维数组。比如 “int a [3][4]；” 可以看作有三个元素，每个元素都为一个长度为 4 的一维数组。而且 a [0]、a [2]、a [3] 分别是这三个一维数组的数组名。下面来验证一下看看是不是这么回事儿:&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int a[3][4] = &amp;#123;&amp;#123;1, 2, 3, 4&amp;#125;, &amp;#123;5, 6, 7, 8&amp;#125;, &amp;#123;9, 10, 11, 12&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;, sizeof(a[0]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 输出结果为：&lt;br&gt;
&lt;strong&gt;16&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可见 a [0] 确实是第一行一维数组的数组名，其他同理。&lt;/p&gt;
&lt;p&gt;在 C 语言中，二维数组中元素排列的顺序是按行存放的，即在内存中先顺序存放第一行的元素，再存放第二行的元素，这样依次存放。&lt;/p&gt;
&lt;h1 id=&#34;二维数组的初始化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维数组的初始化&#34;&gt;#&lt;/a&gt; 二维数组的初始化&lt;/h1&gt;
&lt;p&gt;可以用下面的方法对二维数组进行初始化。&lt;/p&gt;
&lt;h2 id=&#34;1-分行给二维数组赋初值比如上面程序的赋值方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#1-分行给二维数组赋初值比如上面程序的赋值方法&#34;&gt;#&lt;/a&gt; 1) 分行给二维数组赋初值，比如上面程序的赋值方法：&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int a[3][4] = &amp;#123;&amp;#123;1, 2, 3, 4&amp;#125;, &amp;#123;5, 6, 7, 8&amp;#125;, &amp;#123;9, 10, 11, 12&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 这种赋初值的方法比较直观，将第一个花括号内的数据赋给第一行的元素、第二个花括号内的数据赋给第二行的元素…… 即每行看作一个元素，按行赋初值。&lt;/p&gt;
&lt;h2 id=&#34;2-也可以将所有数据写在一个花括号内按数组排列的顺序对各元素赋初值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#2-也可以将所有数据写在一个花括号内按数组排列的顺序对各元素赋初值&#34;&gt;#&lt;/a&gt; 2) 也可以将所有数据写在一个花括号内，按数组排列的顺序对各元素赋初值。&lt;/h2&gt;
&lt;p&gt;比如：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int a[3][4] = &amp;#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 效果与第 1 种是一样的。但第 1 种方法更好，一行对一行，界限清楚。第 2 种方法如果数据多，写成一大片，容易遗漏，也不易检查。&lt;/p&gt;
&lt;h2 id=&#34;3-也可以只对部分元素赋初值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#3-也可以只对部分元素赋初值&#34;&gt;#&lt;/a&gt; 3) 也可以只对部分元素赋初值。&lt;/h2&gt;
&lt;p&gt;比如：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int a[3][4] = &amp;#123;&amp;#123;1, 2&amp;#125;, &amp;#123;5&amp;#125;, &amp;#123;9&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 它的作用是对第一行的前两个元素赋值、第二行和第三行的第一个元素赋值。其余元素自动为 0。初始化后数组各元素为：&lt;br&gt;
1    2    0    0&lt;br&gt;
5    0    0    0&lt;br&gt;
9    0    0    0&lt;/p&gt;
&lt;h2 id=&#34;4-如果在定义数组时就对全部元素赋初值即完全初始化则第一维的长度可以不指定但第二维的长度不能省&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#4-如果在定义数组时就对全部元素赋初值即完全初始化则第一维的长度可以不指定但第二维的长度不能省&#34;&gt;#&lt;/a&gt; 4) 如果在定义数组时就对全部元素赋初值，即完全初始化，则第一维的长度可以不指定，但第二维的长度不能省。&lt;/h2&gt;
&lt;p&gt;比如：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int a[3][4] = &amp;#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 等价于：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int a[][4] = &amp;#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 系统会根据数据总数和第二维的长度算出第一维的长度。但这种省略的写法几乎不用，因为可读性差。&lt;/p&gt;
&lt;h2 id=&#34;5-int-a340&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#5-int-a340&#34;&gt;#&lt;/a&gt; 5) int a[3][4]={0}；&lt;/h2&gt;
&lt;p&gt;二维数组 “清零”，里面每一个元素都是零。&lt;/p&gt;
&lt;h1 id=&#34;二维数组如何输出&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维数组如何输出&#34;&gt;#&lt;/a&gt; 二维数组如何输出&lt;/h1&gt;
&lt;p&gt;二维数组有行和列，那么如何输出里面的元素呢？在讲述一维数组的时候说过，“数组的元素只能一个一个输出”，二维数组也不例外。在一维数组中是用一个 for 循环进行输出，而二维数组元素的输出要使用两个 for 循环嵌套。&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main(void)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int a[3][4] = &amp;#123;&amp;#123;1, 2, 3, 4&amp;#125;, &amp;#123;5, 6, 7, 8&amp;#125;, &amp;#123;9, 10, 11, 12&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i;  //行循环变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j;  //列循环变量&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (i=0; i&amp;lt;3; ++i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (j=0; j&amp;lt;4; ++j)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            printf(&amp;quot;%-2d\x20&amp;quot;, a[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 输出结果是：&lt;br&gt;
1  2  3  4&lt;br&gt;
5  6  7  8&lt;br&gt;
9  10 11 12&lt;br&gt;
 提示：“printf（&amp;quot;%-2d\x20&amp;quot;，a [i][j]）；” 中的 “%-2d”，其中 “-” 表示左对齐，如果不写 “-” 则默认表示右对齐；“2” 表示这个元素输出时占两个空格的空间，所以连同后面的 \x20 则每个元素输出时都占三个空格的空间。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/</guid>
            <title>C语言_素数筛法</title>
            <link>https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/</link>
            <pubDate>Thu, 20 Oct 2022 10:25:46 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;素数三种求法主要&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#素数三种求法主要&#34;&gt;#&lt;/a&gt; 素数三种求法（主要）&lt;/h1&gt;
&lt;h2 id=&#34;什么是素数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#什么是素数&#34;&gt;#&lt;/a&gt; 什么是素数？&lt;/h2&gt;
&lt;p&gt;质数又称素数。一个大于 1 的自然数，除了 1 和它自身外，不能被其他自然数整除的数叫做质数；否则称为合数（规定 1 既不是质数也不是合数）。&lt;/p&gt;
&lt;h2 id=&#34;素数试商法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#素数试商法&#34;&gt;#&lt;/a&gt; 素数试商法&lt;/h2&gt;
&lt;h3 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;我们设定一个数为 x，根据质数的定义判断 x 是否为质数，我们看它能否被 2、3、4・・・・・・、x-1 整除，如果它不能被其中任何一个整数整除，则这个数就是质数。&lt;/p&gt;
&lt;h3 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h3&gt;
&lt;p&gt;如果我们要找 1—1000 内的质数，我们可以控制 x 从 2 自己增到 1000，并且 x 每次自增 1 过后，都要从 2 开始找能否被 x 所整除的数，直到找不到结束。所以我们可以用两层 for 循环来控制，第一层来控制 x 产生 2–1000 数字，第二层 for 循环产生 2 到 x-1 的数，并且判断能否被整除。（因为 1 不是质数，把 1 排除在外）。&lt;/p&gt;
&lt;p&gt;count 来统计大概运算的次数。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//求1--1000内的质数（素数）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int x = 0;   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	unsigned int count = 0;  //统计运算的次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for (x = 2; x &amp;lt; 1000; x++)    //在2到1000之间找质数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (i = 2; i &amp;lt; x; i++)   //试除法，能不能被x整除，从2开始找，直到等于x&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (x % i == 0)   //找到能被x整除的数了&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (x == i)   //找到和x相等也没有被整除的，证明是质数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			printf(&amp;quot;%d &amp;quot;,x);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	printf(&amp;quot;\n\n\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	printf(&amp;quot;运算的次数：%d &amp;quot;,count);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 运行结果：&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210617001619147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2MzExOTMz,size_16,color_FFFFFF,t_70#pic_center&#34; alt&gt;&lt;br&gt;
&lt;strong&gt;好了看到这里就可以忘掉这种方法了&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;素数筛法埃拉托斯特尼筛法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#素数筛法埃拉托斯特尼筛法&#34;&gt;#&lt;/a&gt; 素数筛法（埃拉托斯特尼筛法）&lt;/h2&gt;
&lt;h3 id=&#34;原理-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理-2&#34;&gt;#&lt;/a&gt; 原理&lt;/h3&gt;
&lt;p&gt;自行百度。&lt;/p&gt;
&lt;h3 id=&#34;具体实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体实现&#34;&gt;#&lt;/a&gt; 具体实现&lt;/h3&gt;
&lt;p&gt;先把 N 个自然数按次序排列起来。1 不是质数，也不是合数，要划去。第二个数 2 是质数留下来，而把 2 后面所有能被 2 整除的数都划去。2 后面第一个没划去的数是 3，把 3 留下，再把 3 后面所有能被 3 整除的数都划去。3 后面第一个没划去的数是 5，把 5 留下，再把 5 后面所有能被 5 整除的数都划去。这样一直做下去，就会把不超过 N 的全部合数都筛掉，留下的就是不超过 N 的全部质数。&lt;/p&gt;
&lt;h3 id=&#34;代码模板1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码模板1&#34;&gt;#&lt;/a&gt; 代码模板 1&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//埃拉托斯特尼(Eratosthenes)筛法-&amp;gt;适用于一定范围的元素的筛选&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool is_prime[1000];//布尔数组来标记是否为素数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int prime[1000] = &amp;#123;0&amp;#125;;    //存放素数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int q = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void isprime_B(int b) //要筛选素数的区间右端点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    memset(is_prime,true,sizeof(is_prime));//先假设都为素数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 2;i &amp;lt;= sqrt(b);i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(is_prime[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            prime[q++] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(int j = i*2;j &amp;lt;= b;j += i)//素数的倍数一定不是素数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                is_prime[j] = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
BOOL 类型不常用（而且需要头文件支持），功能类似 0 和 1；&lt;br&gt;
替换代码如下：&lt;/p&gt;
&lt;h3 id=&#34;代码模板2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码模板2&#34;&gt;#&lt;/a&gt; 代码模板 2&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#define N 1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int b[N+1]=&amp;#123;0,0&amp;#125;,i,j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(i=2; i&amp;lt;=N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b[i]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	for(i=2; i&amp;lt;=N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	    if(b[i]==1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            for(j=i*2; j&amp;lt;=N; j=j+i) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                b[j]=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;欧拉筛法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#欧拉筛法&#34;&gt;#&lt;/a&gt; 欧拉筛法&lt;/h2&gt;
&lt;p&gt;到这里可以忘掉上面了。&lt;br&gt;
why?&lt;br&gt;
&lt;em&gt; 与埃氏筛相比，不会对已经被标记过的合数再进行重复筛，故效率更高。欧拉筛保证合数仅被该合数的最小值因数筛去仅一次。&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;代码实现-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现-2&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int isprime[n],prime[n],p;//ispr[i]=1表示i不是素数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	isprime[0]=isprime[1]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 2;i &amp;lt;= n; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (!isprime[i]) //如果值为1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        prime[++p] = i; //前面部分与埃氏筛一样 ，prime数组存当前已经确定的素数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int j = 1; j &amp;lt;=p &amp;amp;&amp;amp; i*prime[j] &amp;lt;= n; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		 &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ispr[i*prime[j]] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (i % prime[j] == 0) //如果pri[j]是i的最小质因子的话，对i不再往后筛 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 了解就好，多用用&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;周四了，记得点击下方按钮 V 我 50！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/</guid>
            <title>C语言_前缀和、差分算法</title>
            <link>https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/</link>
            <pubDate>Wed, 19 Oct 2022 22:06:05 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前缀和算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前缀和算法&#34;&gt;#&lt;/a&gt; 前缀和算法&lt;/h1&gt;
&lt;h2 id=&#34;关于前缀和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于前缀和&#34;&gt;#&lt;/a&gt; 关于前缀和&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;前缀和就是从位置 1 到位置 i 这个区间内的所有的数字之和。&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200716164747656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTE0NTU4,size_16,color_FFFFFF,t_70&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;一维数组求前缀和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一维数组求前缀和&#34;&gt;#&lt;/a&gt; 一维数组求前缀和&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; i ++ )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i]);       //读入n个数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; i ++ )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; s[i] = s[i - 1] + a[i];   //处理前缀和&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 如上图。&lt;br&gt;
注：数组最好定义为全局变量。&lt;/p&gt;
&lt;h2 id=&#34;二维数组求前缀和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维数组求前缀和&#34;&gt;#&lt;/a&gt; 二维数组求前缀和&lt;/h2&gt;
&lt;h3 id=&#34;求sij&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求sij&#34;&gt;#&lt;/a&gt; 求 S [i,j]&lt;/h3&gt;
&lt;p&gt;如图，用 i 表示行，j 表示列：&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210418215020780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;根据图片分析，求 S [i,j]：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s[i, j] = s[i, j - 1] + s[i - 1, j] - s[i - 1, j - 1] + a[i, j];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;求x1y1x2y2子矩阵的和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求x1y1x2y2子矩阵的和&#34;&gt;#&lt;/a&gt; 求（X1,Y1),(X2,Y2) 子矩阵的和&lt;/h3&gt;
&lt;p&gt;如图：&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210418221844586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center&#34; alt&gt;&lt;br&gt;
根据图分析：求 s [x1 ~ x2, y1 ~ y2]:&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s[x1 ~ x2, y1 ~ y2] = s[x2,y2] - s[x2, y1-  1] - s[x1 - 1, y2] + s[x1 - 1,y1 - 1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;前缀和算法优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前缀和算法优点&#34;&gt;#&lt;/a&gt; 前缀和算法优点：&lt;/h2&gt;
&lt;p&gt;对二维矩阵，求子矩阵 (n*m) 的和。暴力法就是两重循环，累加求和。&lt;/p&gt;
&lt;p&gt;每次查询花费 O (n*m) O (n∗m) 时间，n 和 m 是子矩阵的行数和列数。查询的代价有点大。&lt;/p&gt;
&lt;h1 id=&#34;差分算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差分算法&#34;&gt;#&lt;/a&gt; 差分算法&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;差分思想和前缀和是相反的。&lt;/p&gt;
&lt;h2 id=&#34;一维差分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一维差分&#34;&gt;#&lt;/a&gt; 一维差分&lt;/h2&gt;
&lt;p&gt;首先我们先定义数组 a, 其中 a [1],a [2]…a [n] 作为前缀和。&lt;/p&gt;
&lt;p&gt;然后构造数组 b，b [1],b [2]…b [n] 为差分数组。其中通过差分数组的前缀和来表示 a 数组，即 a [n] = b [1] + b [2]+…+b [n]。&lt;/p&gt;
&lt;p&gt;一维差分数组的构造也很简单，即 a [1] = b [1], b [2] = a [2] - a [1], b [n] = a [n] - a [n-1]；&lt;/p&gt;
&lt;p&gt;注意：刚开始时可以初始化数组 a,b 全部为 0，输入 a 数组后；在构造时，只需要将 b [1] 看做在 [1, 1] 区间上加上 a [1]; b [2] 看作在 [2, 2] 区间上加上 a [2]；&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//对于b[1]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[1] = 0 + a[1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[2] = 0 - a[1]; //最终：b[1] = a[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//对于b[2]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[2] = b[2] + a[2]; //最终：b[2] = a[2] - a[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[3] = b[3] - b[2];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h2&gt;
&lt;p&gt;简化运算，节约时间，降低时间复杂度。&lt;/p&gt;
&lt;p&gt;由于 a [n] = b [1] + b [2]+…+b [n]，因此只需要将 b [l] = b [l] + c 即可，这样 l 之后的数字会依次加上常数 c，而在 b [r] 处，将 b [r+1] = b [r+1] - c ，这样 r 之后的数组又会恢复原值，仅需要处理这两个边界的差分数组即可，时间复杂度大大降低。&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/5adc7d0e4bf14d24eef7f635232a9dc7.png&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;例题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例题&#34;&gt;#&lt;/a&gt; 例题&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;不常用，加个例题理解一下&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;输入一个长度为 n 的整数序列。&lt;br&gt;
接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。&lt;br&gt;
请你输出进行完所有操作后的序列。&lt;br&gt;
&lt;strong&gt;输入格式&lt;/strong&gt;&lt;br&gt;
第一行包含两个整数 n 和 m。&lt;br&gt;
第二行包含 n 个整数，表示整数序列。&lt;br&gt;
接下来 m 行，每行包含三个整数 l，r，c 表示一个操作。&lt;br&gt;
&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br&gt;
共一行，包含 n 个整数，表示最终序列。&lt;br&gt;
&lt;strong&gt;数据范围&lt;/strong&gt;&lt;br&gt;
 1 ≤ n , m ≤ 100000,&lt;br&gt;
1 ≤ l ≤ r ≤ n,&lt;br&gt;
−1000 ≤ c ≤ 1000,&lt;br&gt;
−1000 ≤ 整数序列中元素的值 ≤ 1000&lt;br&gt;
&lt;strong&gt; 输入样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;6 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2 2 1 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 3 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 5 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 6 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3 4 5 3 4 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 代码模板&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int N = 100010;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int m,n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int a[N],b[N];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void insert(int l, int r , int c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[l] += c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[r+1] -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n, &amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //插入的方式形成b[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++) insert(i, i, a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(m--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int l, r ,c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;l, &amp;amp;r, &amp;amp;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        insert(l, r, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++) b[i] += b[i - 1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++) printf(&amp;quot;%d &amp;quot;, b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;二维差分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维差分&#34;&gt;#&lt;/a&gt; 二维差分&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/a03bb33ac1482c46c1351ed6381a039c.png&#34; alt&gt;&lt;br&gt;
基本思路：给其中的一个子矩阵加上一个值。矩阵以外的减去一个值即可。&lt;br&gt;
可列公式表示各个范围如下：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;b[x1] [y1] += C;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[x1] [y2+1] −= C;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[x2+1] [y1] += C;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[x2+1] [y2+1] += C;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/cba504522f15428b8149054d363f3f18.png&#34; alt&gt;&lt;br&gt;
 由上面范围，可以求得最终要算的小正方形的面积公式：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;S=b[x1] [y1] − b[x1] [y2​+1] − b[x2+1] [y1] + b[x2+1] [y2+1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 矩阵的初始化；&lt;br&gt;
假定 a [i][j] = 0,b [i][j] =0, 然后读取数组 a，只需要对 b 进行插入即可。b [i][j] 相当于从 (i,j) 到 (i,j) 插入一个 a [i][j] 形成的。&lt;br&gt;
最后求 a [i][j] 只需要求解 b [i][j] 的前缀和即可。&lt;/p&gt;
&lt;h2 id=&#34;例题差分矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例题差分矩阵&#34;&gt;#&lt;/a&gt; 例题：差分矩阵&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;老样子，不常用，上个题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;输入一个 n 行 m 列的整数矩阵，&lt;br&gt;
再输入 q 个操作，&lt;br&gt;
每个操作包含五个整数 x1,y1,x2,y2,c，&lt;br&gt;
其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。&lt;br&gt;
每个操作都要将选中的子矩阵中的每个元素的值加上 c。&lt;br&gt;
请你将进行完所有操作后的矩阵输出。&lt;br&gt;
&lt;strong&gt;输入格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一行包含整数 n,m,q&lt;br&gt;
 接下来 n 行，每行包含 m 个整数，表示整数矩阵。&lt;br&gt;
接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c 表示一个操作。&lt;br&gt;
&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br&gt;
共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。&lt;br&gt;
&lt;strong&gt;数据范围&lt;/strong&gt;&lt;br&gt;
 1 ≤ n , m ≤ 1000&lt;br&gt;
1 ≤ q ≤ 100000&lt;br&gt;
1 ≤ x 1 ≤ x 2 ≤n&lt;br&gt;
1 ≤ y 1 ≤ y 2 ≤ m&lt;br&gt;
−1000 ≤ c ≤ 1000&lt;br&gt;
−1000 ≤ 矩阵内元素的值 ≤ 1000&lt;br&gt;
&lt;strong&gt; 输入样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3 4 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 2 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1 2 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 3 2 3 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 1 3 4 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2 3 4 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4 3 4 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 2 2 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 代码模板&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int N =1010;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int a[N][N],b[N][N];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n, m ,q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void insert(int x1, int y1, int x2, int y2, int c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x1][y1] += c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x2 + 1][y1] -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x1][y2 +1] -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x2 +1][y2+1] +=c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;n, &amp;amp;m, &amp;amp;q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j &amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j &amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            insert(i, j, i, j, a[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while( q-- )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x1, x2, y1, y2, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; x1 &amp;gt;&amp;gt; y1&amp;gt;&amp;gt; x2 &amp;gt;&amp;gt; y2 &amp;gt;&amp;gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        insert(x1,y1, x2, y2, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //求前缀和&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i&amp;lt;=n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j&amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b[i][j] += b[i-1][j] +b[i][j-1] -b[i-1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i&amp;lt;=n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j&amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d &amp;quot;, b[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        puts(&amp;quot;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;前缀和重要，差分有个印象。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/</guid>
            <title>C语言_排序算法_选择排序法</title>
            <link>https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/</link>
            <pubDate>Wed, 19 Oct 2022 12:41:26 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;c语言选择排序法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言选择排序法&#34;&gt;#&lt;/a&gt; C 语言选择排序法&lt;/h1&gt;
&lt;h2 id=&#34;原理技术要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理技术要点&#34;&gt;#&lt;/a&gt; 原理 &amp;amp; 技术要点&lt;/h2&gt;
&lt;p&gt;选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到 a [0] 中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到 a [1] 中，a [1] 中的数字仅大于 a [0]，依此类推，即可实现排序。&lt;/p&gt;
&lt;h2 id=&#34;规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规则&#34;&gt;#&lt;/a&gt; 规则&lt;/h2&gt;
&lt;p&gt;1. 选择排序一共有 数组大小 - 1 轮排序&lt;br&gt;
 2. 每一轮排序，又是一个循环&lt;br&gt;
 3. 先假定当前这个数是最小数&lt;br&gt;
 4. 然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标&lt;br&gt;
 5. 当遍历到数组的最后时，就得到本轮最小数和下标&lt;br&gt;
 6. 交换&lt;/p&gt;
&lt;h2 id=&#34;存储状态演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储状态演示&#34;&gt;#&lt;/a&gt; 存储状态演示&lt;/h2&gt;
&lt;p&gt;*&lt;strong&gt; 黑体为无序区，其余为有序区&lt;/strong&gt;&lt;br&gt;
初始序列：&lt;strong&gt;2 4 7 1 6 9 8 3 0 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 1 趟：2 与 0 交换：0 &lt;strong&gt;4 7 1 6 9 8 3 2 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 2 趟：0 不动，4 与 1 交换：0 1 &lt;strong&gt;7 4 6 9 8 3 2 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 3 趟：7 与 2 交换：0 1 2 &lt;strong&gt;4 6 9 8 3 7 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 4 趟：4 与 3 交换：0 1 2 3 &lt;strong&gt;6 9 8 4 7 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 5 趟：6 与 4 交换：0 1 2 3 4 &lt;strong&gt;9 8 6 7 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 6 趟：9 与 5 交换：0 1 2 3 4 5 &lt;strong&gt;8 6 7 9&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 7 趟：8 与 6 交换：0 1 2 3 4 5 6 &lt;strong&gt;8 7 9&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 8 趟：8 与 7 交换：0 1 2 3 4 5 6 7 &lt;strong&gt;8 9&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 9 趟：排序完成&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j,t,a[11];    //定义变量及数组为基本整型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;11;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);    //从键盘中输入要排序的10个数字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;=9;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (j=i+1;j&amp;lt;=10;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(a[i]&amp;gt;a[j])    //如果前一个数比后一个数大，则利用中间变量t实现两值互换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                t=a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[i]=a[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[j]=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;=10;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%5d&amp;quot;, a[i]);    //输出排序后的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;运行结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行结果&#34;&gt;#&lt;/a&gt; 运行结果&lt;/h2&gt;
&lt;p&gt;input:&lt;br&gt;
526 36 2 369 56 45 78 92 125 52&lt;br&gt;
output:&lt;br&gt;
2 36 45 52 56 78 92 125 369 526&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</guid>
            <title>C语言_辗转相除法两种方式两个用处</title>
            <link>https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</link>
            <pubDate>Wed, 19 Oct 2022 10:17:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;辗转相除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#辗转相除法&#34;&gt;#&lt;/a&gt; 辗转相除法&lt;/h1&gt;
&lt;h2 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h2&gt;
&lt;p&gt;辗转相除法，被称为欧几里得（Euclidean）算法，是求最大公约数的算法。&lt;/p&gt;
&lt;h2 id=&#34;证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证明&#34;&gt;#&lt;/a&gt; 证明&lt;/h2&gt;
&lt;p&gt;设 b = aq + r， (a,b) 为 a，b 的最大公约数。&lt;br&gt;
则 a % (a,b) = 0; b % (a,b) = 0,&lt;br&gt;
 因为 (a 和 b 的约数) % (a,b) = 0,&lt;br&gt;
 所以 (b - aq) % (a,b) = 0&lt;br&gt;
 即 r % (a,b) = 0&lt;br&gt;
 因为 a % (a,b) = 0, r % (a,b) = 0&lt;br&gt;
 所以 (a,r) % (a,b) = 0 (最大公约数一定被公约数整除）&lt;br&gt;
又因为 a % (a,r) = 0, r % (a,r) = 0, b = aq+r&lt;br&gt;
 所以 (aq + r) % (a,r) = 0&lt;br&gt;
 即 b % （a,r) = 0&lt;br&gt;
 因为 a % （a,r) = 0&lt;br&gt;
b % (a,r) = 0&lt;br&gt;
 所以&lt;br&gt;
 (a,b) % (a,r) = 0&lt;br&gt;
 所以&lt;br&gt;
 (a,b) = (a,r)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明过程来自百度，大体了解即可！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;具体做法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体做法&#34;&gt;#&lt;/a&gt; 具体做法&lt;/h2&gt;
&lt;p&gt;用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是 0 为止。最后的除数即为两个数的最大公约数。&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;long long int GCD(long long int n,long long int m)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    long long int t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(n&amp;lt;m)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t=n,n=m,m=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(t=n%m,t&amp;gt;0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n=m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 自写 GCD 函数&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;进阶实现递归&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进阶实现递归&#34;&gt;#&lt;/a&gt; 进阶实现（递归）&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int GCD(int x,int y)//公因数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(y==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return GCD(y,x%y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 通过递归精简代码&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;辗转相除法求最小公倍数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#辗转相除法求最小公倍数&#34;&gt;#&lt;/a&gt; 辗转相除法求最小公倍数&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ans = a*b/m;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 其中 ans 为最小公倍数，a,b 为输入的两个数，m 为两个数字的最大公因数。&lt;br&gt;
&lt;strong&gt;原理很简单，两个数的最小公倍数等于两个数的乘积除以最大公约数（证明过程略）。&lt;/strong&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/</guid>
            <title>CTF_密码学方向常用密码目录</title>
            <link>https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/</link>
            <pubDate>Mon, 17 Oct 2022 13:58:51 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;ctf密码学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf密码学&#34;&gt;#&lt;/a&gt; CTF 密码学&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本篇博客将列举 CTF 中常用密码供参考&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常见编码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ASCII 编码&lt;br&gt;
 shellcode 编码&lt;br&gt;
 Quoted-printable 编码&lt;br&gt;
 XXencode 编码&lt;br&gt;
 URL 编码&lt;br&gt;
 Unicode 编码&lt;br&gt;
 Escape/Unescape 编码&lt;br&gt;
 HTML 实体编码&lt;br&gt;
 MD5 算法&lt;br&gt;
敲击码（Tap code)&lt;br&gt;
 摩尔斯电码（Morse Code)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;换位加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;栅栏密码（Rail-fence Cipher)&lt;br&gt;
 曲路密码（Curve Cipher)&lt;br&gt;
 列移位密码（Columnar Transposition Cipher)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;替换加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;埃特巴什码（Atbash Cipher)&lt;br&gt;
 凯撒密码（Caesar Cipher)&lt;br&gt;
ROT/13/18/47&lt;br&gt;
 简单换位密码（Simple Substitution Cipher)&lt;br&gt;
 希尔密码 (Hill Cipher)&lt;br&gt;
 猪圈密码 (Pigpen Cipher)&lt;br&gt;
 波利比奥斯方阵密码（Polybius Square Cipher)&lt;br&gt;
 夏多密码 (曲折加密)&lt;br&gt;
 普莱菲尔密码（Playfair Cipher)&lt;br&gt;
 维吉尼亚密码（Vigenere Cipher)&lt;br&gt;
 自动密钥密码 (Autokey Cipher)&lt;br&gt;
 博福特密码 (Beaufort Cipher)&lt;br&gt;
 滚动密钥密码（Running Key Cipher)&lt;br&gt;
 Porta 密码 (Porta Cipher)&lt;br&gt;
 同音替换密码（Homophoic Substitution Cipher)&lt;br&gt;
 仿射密码（Affine Cipher)&lt;br&gt;
 培根密码（Baconian Cipher)&lt;br&gt;
 ADFGX 和 ADFGVX 密码（ADFG/VX Cipher)&lt;br&gt;
 双密码 (Bifid Cipher)&lt;br&gt;
 三分密码（Trifid Cipher)&lt;br&gt;
 四方密码（Four-Square Cipher)&lt;br&gt;
 棋盘密码（Checkerboard Cipher)&lt;br&gt;
 跨棋盘密码（Straddle Checkerboard Cipher)&lt;br&gt;
 分组摩尔斯替换密码（Fractionated Morse Cipher)&lt;br&gt;
 Bazeries 密码（Bazeries Cipher)&lt;br&gt;
 Digrafid 密码（Digrafid Cipher)&lt;br&gt;
 格朗普雷密码（Grandpre Cipher)&lt;br&gt;
 盲文密码（Blind Cipher)&lt;br&gt;
 键盘密码（Keyboard Cipher)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;代码混淆加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;asp 混淆加密&lt;br&gt;
 php 混淆加密&lt;br&gt;
 css/js 混淆加密&lt;br&gt;
 VBScript.Encode 混淆加密&lt;br&gt;
 ppencode&lt;br&gt;
rrencode&lt;br&gt;
jjencode/aaencode&lt;br&gt;
JSfuck&lt;br&gt;
jother&lt;br&gt;
branfuck&lt;br&gt;
uuencode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://mangpumo.github.io/2022/10/16/hello-world/</guid>
            <title>Hello World</title>
            <link>https://mangpumo.github.io/2022/10/16/hello-world/</link>
            <pubDate>Sun, 16 Oct 2022 09:57:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
