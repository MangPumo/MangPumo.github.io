<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MangPumo.github.io</id>
    <title></title>
    <subtitle>漏洞不在机器，漏洞在人</subtitle>
    <icon>https://mangpumo.github.io/images/favicon.ico</icon>
    <link href="https://MangPumo.github.io" />
    <author>
      <name>Mang Pumo</name>
    </author>
    <updated>2022-10-19T14:06:05.000Z</updated>
    <entry>
        <id>https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/</id>
        <title>C语言_前缀和、差分算法</title>
        <link rel="alternate" href="https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;h1 id=&#34;前缀和算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前缀和算法&#34;&gt;#&lt;/a&gt; 前缀和算法&lt;/h1&gt;
&lt;h2 id=&#34;关于前缀和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#关于前缀和&#34;&gt;#&lt;/a&gt; 关于前缀和&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;前缀和就是从位置 1 到位置 i 这个区间内的所有的数字之和。&lt;/strong&gt;&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20200716164747656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTE0NTU4,size_16,color_FFFFFF,t_70&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;一维数组求前缀和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一维数组求前缀和&#34;&gt;#&lt;/a&gt; 一维数组求前缀和&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; i ++ )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i]);       //读入n个数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; i ++ )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; s[i] = s[i - 1] + a[i];   //处理前缀和&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 如上图。&lt;br&gt;
注：数组最好定义为全局变量。&lt;/p&gt;
&lt;h2 id=&#34;二维数组求前缀和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维数组求前缀和&#34;&gt;#&lt;/a&gt; 二维数组求前缀和&lt;/h2&gt;
&lt;h3 id=&#34;求sij&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求sij&#34;&gt;#&lt;/a&gt; 求 S [i,j]&lt;/h3&gt;
&lt;p&gt;如图，用 i 表示行，j 表示列：&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210418215020780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center&#34; alt&gt;&lt;/p&gt;
&lt;p&gt;根据图片分析，求 S [i,j]：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s[i, j] = s[i, j - 1] + s[i - 1, j] - s[i - 1, j - 1] + a[i, j];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;求x1y1x2y2子矩阵的和&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#求x1y1x2y2子矩阵的和&#34;&gt;#&lt;/a&gt; 求（X1,Y1),(X2,Y2) 子矩阵的和&lt;/h3&gt;
&lt;p&gt;如图：&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20210418221844586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center&#34; alt&gt;&lt;br&gt;
根据图分析：求 s [x1 ~ x2, y1 ~ y2]:&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;s[x1 ~ x2, y1 ~ y2] = s[x2,y2] - s[x2, y1-  1] - s[x1 - 1, y2] + s[x1 - 1,y1 - 1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;前缀和算法优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前缀和算法优点&#34;&gt;#&lt;/a&gt; 前缀和算法优点：&lt;/h2&gt;
&lt;p&gt;对二维矩阵，求子矩阵 (n*m) 的和。暴力法就是两重循环，累加求和。&lt;/p&gt;
&lt;p&gt;每次查询花费 O (n*m) O (n∗m) 时间，n 和 m 是子矩阵的行数和列数。查询的代价有点大。&lt;/p&gt;
&lt;h1 id=&#34;差分算法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#差分算法&#34;&gt;#&lt;/a&gt; 差分算法&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;差分思想和前缀和是相反的。&lt;/p&gt;
&lt;h2 id=&#34;一维差分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一维差分&#34;&gt;#&lt;/a&gt; 一维差分&lt;/h2&gt;
&lt;p&gt;首先我们先定义数组 a, 其中 a [1],a [2]…a [n] 作为前缀和。&lt;/p&gt;
&lt;p&gt;然后构造数组 b，b [1],b [2]…b [n] 为差分数组。其中通过差分数组的前缀和来表示 a 数组，即 a [n] = b [1] + b [2]+…+b [n]。&lt;/p&gt;
&lt;p&gt;一维差分数组的构造也很简单，即 a [1] = b [1], b [2] = a [2] - a [1], b [n] = a [n] - a [n-1]；&lt;/p&gt;
&lt;p&gt;注意：刚开始时可以初始化数组 a,b 全部为 0，输入 a 数组后；在构造时，只需要将 b [1] 看做在 [1, 1] 区间上加上 a [1]; b [2] 看作在 [2, 2] 区间上加上 a [2]；&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;//对于b[1]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[1] = 0 + a[1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[2] = 0 - a[1]; //最终：b[1] = a[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//对于b[2]:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[2] = b[2] + a[2]; //最终：b[2] = a[2] - a[1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[3] = b[3] - b[2];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;优点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#优点&#34;&gt;#&lt;/a&gt; 优点&lt;/h2&gt;
&lt;p&gt;简化运算，节约时间，降低时间复杂度。&lt;/p&gt;
&lt;p&gt;由于 a [n] = b [1] + b [2]+…+b [n]，因此只需要将 b [l] = b [l] + c 即可，这样 l 之后的数字会依次加上常数 c，而在 b [r] 处，将 b [r+1] = b [r+1] - c ，这样 r 之后的数组又会恢复原值，仅需要处理这两个边界的差分数组即可，时间复杂度大大降低。&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/5adc7d0e4bf14d24eef7f635232a9dc7.png&#34; alt&gt;&lt;/p&gt;
&lt;h2 id=&#34;例题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例题&#34;&gt;#&lt;/a&gt; 例题&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;不常用，加个例题理解一下&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;输入一个长度为 n 的整数序列。&lt;br&gt;
接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。&lt;br&gt;
请你输出进行完所有操作后的序列。&lt;br&gt;
&lt;strong&gt;输入格式&lt;/strong&gt;&lt;br&gt;
第一行包含两个整数 n 和 m。&lt;br&gt;
第二行包含 n 个整数，表示整数序列。&lt;br&gt;
接下来 m 行，每行包含三个整数 l，r，c 表示一个操作。&lt;br&gt;
&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br&gt;
共一行，包含 n 个整数，表示最终序列。&lt;br&gt;
&lt;strong&gt;数据范围&lt;/strong&gt;&lt;br&gt;
 1 ≤ n , m ≤ 100000,&lt;br&gt;
1 ≤ l ≤ r ≤ n,&lt;br&gt;
−1000 ≤ c ≤ 1000,&lt;br&gt;
−1000 ≤ 整数序列中元素的值 ≤ 1000&lt;br&gt;
&lt;strong&gt; 输入样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;6 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2 2 1 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 3 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 5 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 6 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3 4 5 3 4 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 代码模板&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int N = 100010;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int m,n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int a[N],b[N];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void insert(int l, int r , int c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[l] += c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[r+1] -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d%d&amp;quot;,&amp;amp;n, &amp;amp;m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++)scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //插入的方式形成b[i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++) insert(i, i, a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(m--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int l, r ,c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d%d%d&amp;quot;,&amp;amp;l, &amp;amp;r, &amp;amp;c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        insert(l, r, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++) b[i] += b[i - 1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++) printf(&amp;quot;%d &amp;quot;, b[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;二维差分&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维差分&#34;&gt;#&lt;/a&gt; 二维差分&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/a03bb33ac1482c46c1351ed6381a039c.png&#34; alt&gt;&lt;br&gt;
基本思路：给其中的一个子矩阵加上一个值。矩阵以外的减去一个值即可。&lt;br&gt;
可列公式表示各个范围如下：&lt;br&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;b[x1] [y1] += C;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[x1] [y2+1] −= C;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[x2+1] [y1] += C;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b[x2+1] [y2+1] += C;  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;img data-src=&#34;https://img-blog.csdnimg.cn/img_convert/cba504522f15428b8149054d363f3f18.png&#34; alt&gt;&lt;br&gt;
 由上面范围，可以求得最终要算的小正方形的面积公式：&lt;/p&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;S=b[x1] [y1] − b[x1] [y2​+1] − b[x2+1] [y1] + b[x2+1] [y2+1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 矩阵的初始化；&lt;br&gt;
假定 a [i][j] = 0,b [i][j] =0, 然后读取数组 a，只需要对 b 进行插入即可。b [i][j] 相当于从 (i,j) 到 (i,j) 插入一个 a [i][j] 形成的。&lt;br&gt;
最后求 a [i][j] 只需要求解 b [i][j] 的前缀和即可。&lt;/p&gt;
&lt;h2 id=&#34;例题差分矩阵&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#例题差分矩阵&#34;&gt;#&lt;/a&gt; 例题：差分矩阵&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;老样子，不常用，上个题&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;输入一个 n 行 m 列的整数矩阵，&lt;br&gt;
再输入 q 个操作，&lt;br&gt;
每个操作包含五个整数 x1,y1,x2,y2,c，&lt;br&gt;
其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。&lt;br&gt;
每个操作都要将选中的子矩阵中的每个元素的值加上 c。&lt;br&gt;
请你将进行完所有操作后的矩阵输出。&lt;br&gt;
&lt;strong&gt;输入格式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一行包含整数 n,m,q&lt;br&gt;
 接下来 n 行，每行包含 m 个整数，表示整数矩阵。&lt;br&gt;
接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c 表示一个操作。&lt;br&gt;
&lt;strong&gt;输出格式&lt;/strong&gt;&lt;br&gt;
共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。&lt;br&gt;
&lt;strong&gt;数据范围&lt;/strong&gt;&lt;br&gt;
 1 ≤ n , m ≤ 1000&lt;br&gt;
1 ≤ q ≤ 100000&lt;br&gt;
1 ≤ x 1 ≤ x 2 ≤n&lt;br&gt;
1 ≤ y 1 ≤ y 2 ≤ m&lt;br&gt;
−1000 ≤ c ≤ 1000&lt;br&gt;
−1000 ≤ 矩阵内元素的值 ≤ 1000&lt;br&gt;
&lt;strong&gt; 输入样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;3 4 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 2 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 2 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1 1 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 1 2 2 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1 3 2 3 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3 1 3 4 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 输出样例&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;2 3 4 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4 3 4 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2 2 2 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 代码模板&lt;/strong&gt;&lt;br&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int N =1010;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int a[N][N],b[N][N];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n, m ,q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void insert(int x1, int y1, int x2, int y2, int c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x1][y1] += c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x2 + 1][y1] -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x1][y2 +1] -= c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    b[x2 +1][y2+1] +=c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d%d%d&amp;quot;, &amp;amp;n, &amp;amp;m, &amp;amp;q);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j &amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            scanf(&amp;quot;%d&amp;quot;, &amp;amp;a[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j &amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            insert(i, j, i, j, a[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while( q-- )&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int x1, x2, y1, y2, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; x1 &amp;gt;&amp;gt; y1&amp;gt;&amp;gt; x2 &amp;gt;&amp;gt; y2 &amp;gt;&amp;gt; c;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        insert(x1,y1, x2, y2, c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //求前缀和&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i&amp;lt;=n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j&amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        b[i][j] += b[i-1][j] +b[i][j-1] -b[i-1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i&amp;lt;=n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j = 1; j&amp;lt;= m; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d &amp;quot;, b[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        puts(&amp;quot;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h1&gt;
&lt;p&gt;前缀和重要，差分有个印象。&lt;/p&gt;
</content>
        <updated>2022-10-19T14:06:05.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/</id>
        <title>C语言_排序算法_选择排序法</title>
        <link rel="alternate" href="https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/"/>
        <content type="html">&lt;h1 id=&#34;c语言选择排序法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#c语言选择排序法&#34;&gt;#&lt;/a&gt; C 语言选择排序法&lt;/h1&gt;
&lt;h2 id=&#34;原理技术要点&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理技术要点&#34;&gt;#&lt;/a&gt; 原理 &amp;amp; 技术要点&lt;/h2&gt;
&lt;p&gt;选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到 a [0] 中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到 a [1] 中，a [1] 中的数字仅大于 a [0]，依此类推，即可实现排序。&lt;/p&gt;
&lt;h2 id=&#34;规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#规则&#34;&gt;#&lt;/a&gt; 规则&lt;/h2&gt;
&lt;p&gt;1. 选择排序一共有 数组大小 - 1 轮排序&lt;br&gt;
 2. 每一轮排序，又是一个循环&lt;br&gt;
 3. 先假定当前这个数是最小数&lt;br&gt;
 4. 然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标&lt;br&gt;
 5. 当遍历到数组的最后时，就得到本轮最小数和下标&lt;br&gt;
 6. 交换&lt;/p&gt;
&lt;h2 id=&#34;存储状态演示&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#存储状态演示&#34;&gt;#&lt;/a&gt; 存储状态演示&lt;/h2&gt;
&lt;p&gt;*&lt;strong&gt; 黑体为无序区，其余为有序区&lt;/strong&gt;&lt;br&gt;
初始序列：&lt;strong&gt;2 4 7 1 6 9 8 3 0 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 1 趟：2 与 0 交换：0 &lt;strong&gt;4 7 1 6 9 8 3 2 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 2 趟：0 不动，4 与 1 交换：0 1 &lt;strong&gt;7 4 6 9 8 3 2 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 3 趟：7 与 2 交换：0 1 2 &lt;strong&gt;4 6 9 8 3 7 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 4 趟：4 与 3 交换：0 1 2 3 &lt;strong&gt;6 9 8 4 7 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 5 趟：6 与 4 交换：0 1 2 3 4 &lt;strong&gt;9 8 6 7 5&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 6 趟：9 与 5 交换：0 1 2 3 4 5 &lt;strong&gt;8 6 7 9&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 7 趟：8 与 6 交换：0 1 2 3 4 5 6 &lt;strong&gt;8 7 9&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 8 趟：8 与 7 交换：0 1 2 3 4 5 6 7 &lt;strong&gt;8 9&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第 9 趟：排序完成&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i,j,t,a[11];    //定义变量及数组为基本整型&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;11;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%d&amp;quot;,&amp;amp;a[i]);    //从键盘中输入要排序的10个数字&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;=9;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (j=i+1;j&amp;lt;=10;j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(a[i]&amp;gt;a[j])    //如果前一个数比后一个数大，则利用中间变量t实现两值互换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                t=a[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[i]=a[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                a[j]=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(i=1;i&amp;lt;=10;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%5d&amp;quot;, a[i]);    //输出排序后的数组&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;\n&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;运行结果&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#运行结果&#34;&gt;#&lt;/a&gt; 运行结果&lt;/h2&gt;
&lt;p&gt;input:&lt;br&gt;
526 36 2 369 56 45 78 92 125 52&lt;br&gt;
output:&lt;br&gt;
2 36 45 52 56 78 92 125 369 526&lt;/p&gt;
</content>
        <updated>2022-10-19T04:41:26.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/</id>
        <title>C语言_辗转相除法两种方式两个用处</title>
        <link rel="alternate" href="https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/"/>
        <content type="html">&lt;h1 id=&#34;辗转相除法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#辗转相除法&#34;&gt;#&lt;/a&gt; 辗转相除法&lt;/h1&gt;
&lt;h2 id=&#34;原理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#原理&#34;&gt;#&lt;/a&gt; 原理&lt;/h2&gt;
&lt;p&gt;辗转相除法，被称为欧几里得（Euclidean）算法，是求最大公约数的算法。&lt;/p&gt;
&lt;h2 id=&#34;证明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#证明&#34;&gt;#&lt;/a&gt; 证明&lt;/h2&gt;
&lt;p&gt;设 b = aq + r， (a,b) 为 a，b 的最大公约数。&lt;br&gt;
则 a % (a,b) = 0; b % (a,b) = 0,&lt;br&gt;
 因为 (a 和 b 的约数) % (a,b) = 0,&lt;br&gt;
 所以 (b - aq) % (a,b) = 0&lt;br&gt;
 即 r % (a,b) = 0&lt;br&gt;
 因为 a % (a,b) = 0, r % (a,b) = 0&lt;br&gt;
 所以 (a,r) % (a,b) = 0 (最大公约数一定被公约数整除）&lt;br&gt;
又因为 a % (a,r) = 0, r % (a,r) = 0, b = aq+r&lt;br&gt;
 所以 (aq + r) % (a,r) = 0&lt;br&gt;
 即 b % （a,r) = 0&lt;br&gt;
 因为 a % （a,r) = 0&lt;br&gt;
b % (a,r) = 0&lt;br&gt;
 所以&lt;br&gt;
 (a,b) % (a,r) = 0&lt;br&gt;
 所以&lt;br&gt;
 (a,b) = (a,r)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;证明过程来自百度，大体了解即可！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;具体做法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#具体做法&#34;&gt;#&lt;/a&gt; 具体做法&lt;/h2&gt;
&lt;p&gt;用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是 0 为止。最后的除数即为两个数的最大公约数。&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#代码实现&#34;&gt;#&lt;/a&gt; 代码实现&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;long long int GCD(long long int n,long long int m)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    long long int t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(n&amp;lt;m)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        t=n,n=m,m=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(t=n%m,t&amp;gt;0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        n=m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        m=t;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 自写 GCD 函数&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;进阶实现递归&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进阶实现递归&#34;&gt;#&lt;/a&gt; 进阶实现（递归）&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int GCD(int x,int y)//公因数 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(y==0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	return GCD(y,x%y);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
&lt;strong&gt; 通过递归精简代码&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;辗转相除法求最小公倍数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#辗转相除法求最小公倍数&#34;&gt;#&lt;/a&gt; 辗转相除法求最小公倍数&lt;/h2&gt;
&lt;p&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ans = a*b/m;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;
 其中 ans 为最小公倍数，a,b 为输入的两个数，m 为两个数字的最大公因数。&lt;br&gt;
&lt;strong&gt;原理很简单，两个数的最小公倍数等于两个数的乘积除以最大公约数（证明过程略）。&lt;/strong&gt;&lt;/p&gt;
</content>
        <updated>2022-10-19T02:17:51.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/</id>
        <title>CTF_密码学方向常用密码目录</title>
        <link rel="alternate" href="https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/"/>
        <content type="html">&lt;h1 id=&#34;ctf密码学&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#ctf密码学&#34;&gt;#&lt;/a&gt; CTF 密码学&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;本篇博客将列举 CTF 中常用密码供参考&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常见编码&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ASCII 编码&lt;br&gt;
 shellcode 编码&lt;br&gt;
 Quoted-printable 编码&lt;br&gt;
 XXencode 编码&lt;br&gt;
 URL 编码&lt;br&gt;
 Unicode 编码&lt;br&gt;
 Escape/Unescape 编码&lt;br&gt;
 HTML 实体编码&lt;br&gt;
 MD5 算法&lt;br&gt;
敲击码（Tap code)&lt;br&gt;
 摩尔斯电码（Morse Code)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;换位加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;栅栏密码（Rail-fence Cipher)&lt;br&gt;
 曲路密码（Curve Cipher)&lt;br&gt;
 列移位密码（Columnar Transposition Cipher)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;替换加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;埃特巴什码（Atbash Cipher)&lt;br&gt;
 凯撒密码（Caesar Cipher)&lt;br&gt;
ROT/13/18/47&lt;br&gt;
 简单换位密码（Simple Substitution Cipher)&lt;br&gt;
 希尔密码 (Hill Cipher)&lt;br&gt;
 猪圈密码 (Pigpen Cipher)&lt;br&gt;
 波利比奥斯方阵密码（Polybius Square Cipher)&lt;br&gt;
 夏多密码 (曲折加密)&lt;br&gt;
 普莱菲尔密码（Playfair Cipher)&lt;br&gt;
 维吉尼亚密码（Vigenere Cipher)&lt;br&gt;
 自动密钥密码 (Autokey Cipher)&lt;br&gt;
 博福特密码 (Beaufort Cipher)&lt;br&gt;
 滚动密钥密码（Running Key Cipher)&lt;br&gt;
 Porta 密码 (Porta Cipher)&lt;br&gt;
 同音替换密码（Homophoic Substitution Cipher)&lt;br&gt;
 仿射密码（Affine Cipher)&lt;br&gt;
 培根密码（Baconian Cipher)&lt;br&gt;
 ADFGX 和 ADFGVX 密码（ADFG/VX Cipher)&lt;br&gt;
 双密码 (Bifid Cipher)&lt;br&gt;
 三分密码（Trifid Cipher)&lt;br&gt;
 四方密码（Four-Square Cipher)&lt;br&gt;
 棋盘密码（Checkerboard Cipher)&lt;br&gt;
 跨棋盘密码（Straddle Checkerboard Cipher)&lt;br&gt;
 分组摩尔斯替换密码（Fractionated Morse Cipher)&lt;br&gt;
 Bazeries 密码（Bazeries Cipher)&lt;br&gt;
 Digrafid 密码（Digrafid Cipher)&lt;br&gt;
 格朗普雷密码（Grandpre Cipher)&lt;br&gt;
 盲文密码（Blind Cipher)&lt;br&gt;
 键盘密码（Keyboard Cipher)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;代码混淆加密&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;asp 混淆加密&lt;br&gt;
 php 混淆加密&lt;br&gt;
 css/js 混淆加密&lt;br&gt;
 VBScript.Encode 混淆加密&lt;br&gt;
 ppencode&lt;br&gt;
rrencode&lt;br&gt;
jjencode/aaencode&lt;br&gt;
JSfuck&lt;br&gt;
jother&lt;br&gt;
branfuck&lt;br&gt;
uuencode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
</content>
        <updated>2022-10-17T05:58:51.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2022/10/16/hello-world/</id>
        <title>Hello World</title>
        <link rel="alternate" href="https://mangpumo.github.io/2022/10/16/hello-world/"/>
        <content type="html">&lt;p&gt;Welcome to &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvLw==&#34;&gt;Hexo&lt;/span&gt;! This is your very first post. Check &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv&#34;&gt;documentation&lt;/span&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=&#34;&gt;troubleshooting&lt;/span&gt; or you can ask me on &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==&#34;&gt;GitHub&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#quick-start&#34;&gt;#&lt;/a&gt; Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;create-a-new-post&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#create-a-new-post&#34;&gt;#&lt;/a&gt; Create a new post&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo new &lt;span class=&#34;string&#34;&gt;&amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s&#34;&gt;Writing&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;run-server&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#run-server&#34;&gt;#&lt;/a&gt; Run server&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=&#34;&gt;Server&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;generate-static-files&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#generate-static-files&#34;&gt;#&lt;/a&gt; Generate static files&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s&#34;&gt;Generating&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;deploy-to-remote-sites&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#deploy-to-remote-sites&#34;&gt;#&lt;/a&gt; Deploy to remote sites&lt;/h3&gt;
&lt;p&gt;&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More info: &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s&#34;&gt;Deployment&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2022-10-16T01:57:15.958Z</updated>
    </entry>
</feed>
