{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "漏洞不在机器，漏洞在人",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2022/10/27/XTUOJ-1137%E5%AD%97%E6%AF%8D%E5%9C%A3%E8%AF%9E%E6%A0%91/",
            "url": "https://mangpumo.github.io/2022/10/27/XTUOJ-1137%E5%AD%97%E6%AF%8D%E5%9C%A3%E8%AF%9E%E6%A0%91/",
            "title": "XTUOJ_1137字母圣诞树",
            "date_published": "2022-10-27T05:01:49.000Z",
            "content_html": "<h1 id=\"字母圣诞树\"><a href=\"#字母圣诞树\" class=\"headerlink\" title=\"字母圣诞树\"></a>字母圣诞树</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>打印一个字母圣诞树。</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行是一个整数K，表示样例的个数。以后每个样例是一个大写英文字母，占一行。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>输出对应的字母圣诞树，每行末尾没有空格，每个圣诞树的最后一行前无空格。</p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">A</span><br><span class=\"line\">B</span><br><span class=\"line\">C</span><br><span class=\"line\">D</span><br><span class=\"line\">E</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> A</span><br><span class=\"line\">AAA</span><br><span class=\"line\">  A</span><br><span class=\"line\"> AAA</span><br><span class=\"line\">  B</span><br><span class=\"line\">BBBBB</span><br><span class=\"line\">   A</span><br><span class=\"line\">  AAA</span><br><span class=\"line\">   B</span><br><span class=\"line\"> BBBBB</span><br><span class=\"line\">   C</span><br><span class=\"line\">CCCCCCC</span><br><span class=\"line\">    A</span><br><span class=\"line\">   AAA</span><br><span class=\"line\">    B</span><br><span class=\"line\">  BBBBB</span><br><span class=\"line\">    C</span><br><span class=\"line\"> CCCCCCC</span><br><span class=\"line\">    D</span><br><span class=\"line\">DDDDDDDDD</span><br><span class=\"line\">     A</span><br><span class=\"line\">    AAA</span><br><span class=\"line\">     B</span><br><span class=\"line\">   BBBBB</span><br><span class=\"line\">     C</span><br><span class=\"line\">  CCCCCCC</span><br><span class=\"line\">     D</span><br><span class=\"line\"> DDDDDDDDD</span><br><span class=\"line\">     E</span><br><span class=\"line\">EEEEEEEEEEE</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tint i,j;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tchar eng;</span><br><span class=\"line\">\t\tscanf(&quot; %c&quot;,&amp;eng);//注意输入 </span><br><span class=\"line\">\t\tint len = eng-&#x27;A&#x27;+1;</span><br><span class=\"line\">\t\tfor(i=0;i&lt;len;i++)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tfor(j=0;j&lt;eng-&#x27;A&#x27;+1;j++) //单独一行空格长度固定，即总长度 </span><br><span class=\"line\">\t\t\t    printf(&quot; &quot;);</span><br><span class=\"line\">\t\t\t    printf(&quot;%c\\n&quot;,i+65);</span><br><span class=\"line\">\t\t\tfor(j=0;j&lt;eng-&#x27;A&#x27;-i;j++)//同上一题，递减 </span><br><span class=\"line\">\t\t\t    printf(&quot; &quot;);</span><br><span class=\"line\">\t\t\tfor(j=0;j&lt;2*i+3;j++)//注意规律，2*（n+1）+1 </span><br><span class=\"line\">\t\t\t    printf(&quot;%c&quot;,i+65);//输出 </span><br><span class=\"line\">\t\t\t    //printf(&quot; &quot;)； </span><br><span class=\"line\">\t\t\t    printf(&quot;\\n&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/27/XTUOJ-1078%E5%AD%97%E6%AF%8D%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "url": "https://mangpumo.github.io/2022/10/27/XTUOJ-1078%E5%AD%97%E6%AF%8D%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "title": "XTUOJ_1078字母三角形",
            "date_published": "2022-10-27T05:00:06.000Z",
            "content_html": "<h1 id=\"字母三角形\"><a href=\"#字母三角形\" class=\"headerlink\" title=\"字母三角形\"></a>字母三角形</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>输出形如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABCDEDCBA  </span><br><span class=\"line\"> ABCDCBA  </span><br><span class=\"line\">  ABCBA  </span><br><span class=\"line\">   ABA  </span><br><span class=\"line\">    A  </span><br></pre></td></tr></table></figure>\n\n<p>的字母三角形。</p>\n<p>输入有多个样例，每个样例是一行，每行是一个大写字母。当输入字符是‘#’时结束。样例前需要输出“case 样例号:”。如示例所示。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br><span class=\"line\">D</span><br><span class=\"line\">#</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">case 1:</span><br><span class=\"line\">ABCBA</span><br><span class=\"line\"> ABA</span><br><span class=\"line\">  A</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">ABCDCBA</span><br><span class=\"line\"> ABCBA</span><br><span class=\"line\">  ABA</span><br><span class=\"line\">   A</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;\t//因为多样例的问题，缩进有问题 </span><br><span class=\"line\">\tint cot = 1;//不可以放到循环里再声明 </span><br><span class=\"line\">\t\t//printf(&quot;case %d:\\n&quot;,cot++);错误示范 </span><br><span class=\"line\">\t\tint i,j,k,m,len;</span><br><span class=\"line\">\t\tchar eng;</span><br><span class=\"line\">\t\twhile(scanf(&quot; %c&quot;,&amp;eng) != EOF&amp;&amp; eng != &#x27;#&#x27;) </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;case %d:\\n&quot;,cot++);</span><br><span class=\"line\">\t\t    len = eng-&#x27;A&#x27;+1;</span><br><span class=\"line\">\t\t    for(i=0;i&lt;len;i++)//控制行数 </span><br><span class=\"line\">\t\t    &#123;</span><br><span class=\"line\">\t\t\t    for(j=len-i;j&lt;len;j++)//空格数行数相反 （总长-目前行与总长比较） </span><br><span class=\"line\">\t\t\t        printf(&quot; &quot;);</span><br><span class=\"line\">\t\t\t    for(j=0;j&lt;len-i;j++)//递减，输出正序字母（没什么说的，注意递减） </span><br><span class=\"line\">\t\t\t        printf(&quot;%c&quot;,j+65);</span><br><span class=\"line\">\t\t\t    for(j=len-1-i;j&gt;0;j--)//递减，输出逆序字母，比正序少一个，所以多-1 </span><br><span class=\"line\">\t\t\t        printf(&quot;%c&quot;,j+64);//此处+64而非+65；因为个数少了一个。 </span><br><span class=\"line\">\t\t\t    printf(&quot;\\n&quot;);</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\treturn 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/26/C%E8%AF%AD%E8%A8%80-%E5%85%A8%E6%8E%92%E5%88%97%E6%9E%9A%E4%B8%BE/",
            "url": "https://mangpumo.github.io/2022/10/26/C%E8%AF%AD%E8%A8%80-%E5%85%A8%E6%8E%92%E5%88%97%E6%9E%9A%E4%B8%BE/",
            "title": "C语言_全排列枚举",
            "date_published": "2022-10-26T15:38:31.000Z",
            "content_html": "<h1 id=\"全排列枚举\"><a href=\"#全排列枚举\" class=\"headerlink\" title=\"全排列枚举\"></a>全排列枚举</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>给定一个由不同的小写字母组成的字符串，输出这个字符串的所有全排列。 我们假设对于小写字母有’a’ &lt; ‘b’ &lt; … &lt; ‘y’ &lt; ‘z’，而且给定的字符串中的字母已经按照从小到大的顺序排列。</p>\n<h2 id=\"Input\"><a href=\"#Input\" class=\"headerlink\" title=\"Input\"></a>Input</h2><p>输入只有一行，是一个由不同的小写字母组成的字符串，已知字符串的长度在1到6之间。</p>\n<h2 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h2><p>输出这个字符串的所有排列方式，每行一个排列。要求字母序比较小的排列在前面。字母序如下定义：<br>已知S &#x3D; s1s2…sk , T &#x3D; t1t2…tk，则S &lt; T 等价于，存在p (1 &lt;&#x3D; p &lt;&#x3D; k)，使得s1 &#x3D; t1, s2 &#x3D; t2, …, sp - 1 &#x3D; tp - 1, sp &lt; tp成立。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc</span><br><span class=\"line\">acb</span><br><span class=\"line\">bac</span><br><span class=\"line\">bca</span><br><span class=\"line\">cab</span><br><span class=\"line\">cba</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">void qsort(int s);//递归排序 </span><br><span class=\"line\">void sort(char str[],int n);//冒泡排序 </span><br><span class=\"line\">bool ls[15];int n;//设定bool类型的数组，0对应该字母没有用到，1表示已经用了 </span><br><span class=\"line\">char str[15],temp[15];</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> scanf(&quot;%s&quot;,str);</span><br><span class=\"line\"> n=strlen(str);</span><br><span class=\"line\"> sort(str,n);//对随机输入的字符串进行排序，因为递归的时候不会按字母序大小输出，所以先排好序 </span><br><span class=\"line\"> qsort(0);//递归，并且输出 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void qsort(int s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> if(s==n)&#123;  //所有的字母用完即可输出 </span><br><span class=\"line\">  temp[s]=&#x27;\\0&#x27;;</span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,temp);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> int i;</span><br><span class=\"line\"> for( i=0;i&lt;n;i++)</span><br><span class=\"line\">  if(ls[i]==0) //用bool类型对应字母的状态，0表示字母没有被用到，即可以使用 </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   ls[i]=1; //使用之后立刻改变状态，1表示字母已经被使用 </span><br><span class=\"line\">   temp[s]=str[i]; //使用字母，将该字母排序到temp里 </span><br><span class=\"line\">   qsort(s+1);  //在当前状态下继续向下递归，直到输出 </span><br><span class=\"line\">   ls[i]=0; //回到初始状态，比如开头是a字母的已经排完，现在用b来开头，此时a字母又可以继续使用 </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void sort(char str[],int n)//冒泡排序，从小到大排 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> char tmp;</span><br><span class=\"line\"> for(int i=1;i&lt;n;i++)</span><br><span class=\"line\">  for(int j=0;j&lt;n-i;j++)</span><br><span class=\"line\">   if(str[j]&gt;str[j+1])&#123;</span><br><span class=\"line\">    tmp=str[j];str[j]=str[j+1];str[j+1]=tmp;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/26/XTUOJ-1088N/",
            "url": "https://mangpumo.github.io/2022/10/26/XTUOJ-1088N/",
            "title": "XTUOJ_1088N!",
            "date_published": "2022-10-26T15:19:38.000Z",
            "content_html": "<h1 id=\"N\"><a href=\"#N\" class=\"headerlink\" title=\"N!\"></a>N!</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>请求N！（N&lt;&#x3D;10000），输出结果对10007取余<br>输入<br>每行一个整数n，遇到-1结束。<br>输出<br>每行一个整数，为对应n的运算结果。  </p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int N;</span><br><span class=\"line\">    long long int ans;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;N)&amp;&amp;N != -1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for(long long int i = 1;i&lt;=N;i++)</span><br><span class=\"line\">        ans = (ans*i)%10007;  //取模</span><br><span class=\"line\">        printf(&quot;%I64d\\n&quot;,ans);</span><br><span class=\"line\">        ans = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/26/XTUOJ-1075%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/26/XTUOJ-1075%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/",
            "title": "XTUOJ_1075最小公倍数",
            "date_published": "2022-10-26T15:12:57.000Z",
            "content_html": "<h1 id=\"求最小公倍数\"><a href=\"#求最小公倍数\" class=\"headerlink\" title=\"求最小公倍数\"></a>求最小公倍数</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>有多个测试用例，每行两个正整数x,y，保证x*y不超过2^31-1。如果x与y都为0，则输入结束。</p>\n<p>每行输出一个测试用例的结果，即x与y的最小公倍数。（最后一行有回车）</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5</span><br><span class=\"line\">3 6</span><br><span class=\"line\">0 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int gcd(int a,int b)//递归 ,注意返回值</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(b==0)</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    return gcd(b,a%b);</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> int main()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     long long int a,b;</span><br><span class=\"line\">     long long int temp;</span><br><span class=\"line\">     while(scanf(&quot;%I64d %I64d&quot;,&amp;a,&amp;b)!=EOF&amp;&amp;a != 0&amp;&amp;b != 0)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         long long int prime = gcd(a,b);</span><br><span class=\"line\">         long long int ans;</span><br><span class=\"line\">         long long int s;</span><br><span class=\"line\">         s = a*b;</span><br><span class=\"line\">         ans = s/prime;</span><br><span class=\"line\">         printf(&quot;%I64d\\n&quot;,ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     return 0;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/22/XTUOJ-1342%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "url": "https://mangpumo.github.io/2022/10/22/XTUOJ-1342%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "title": "XTUOJ_1342三角形",
            "date_published": "2022-10-22T08:25:01.000Z",
            "content_html": "<h1 id=\"三角形\"><a href=\"#三角形\" class=\"headerlink\" title=\"三角形\"></a>三角形</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>已知两个三角形的三条边的长度，请问它们是否相似？</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行是一个整数T(1≤T≤1000)，表示样例的个数。 每个样例占两行，每行为三个整数a,b,c1≤a,b,c≤1000,表示一个三角形的边长。 输入数据保证三条边一定能构成三角形。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>依次输出每个样例的结果，如果相似，输出”Yes”，否则输出”No”。</p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 4 5</span><br><span class=\"line\">3 3 3</span><br><span class=\"line\">3 4 5</span><br><span class=\"line\">6 8 10</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No</span><br><span class=\"line\">Yes</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tint a,b,c,x,y,z;</span><br><span class=\"line\">\tint m[3],n[3],i,j,t;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tscanf(&quot;%d %d %d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;x,&amp;y,&amp;z);</span><br><span class=\"line\">\t\tn[0]=a;n[1]=b;n[2]=c;</span><br><span class=\"line\">        m[0]=x;m[1]=y;m[2]=z;</span><br><span class=\"line\">        for(i=0;i&lt;3;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tfor(j=i;j&lt;3;j++)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        \t    if(n[i]&gt;n[j])</span><br><span class=\"line\">\t\t\t    &#123;</span><br><span class=\"line\">\t\t\t        t = n[i];</span><br><span class=\"line\">\t\t\t        n[i] = n[j];</span><br><span class=\"line\">\t\t\t        n[j] = t;\t</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t for(i=0;i&lt;3;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tfor(j=i;j&lt;3;j++)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">        \t    if(m[i]&gt;m[j])</span><br><span class=\"line\">\t\t\t    &#123;</span><br><span class=\"line\">\t\t\t        t = m[i];</span><br><span class=\"line\">\t\t\t        m[i] = m[j];</span><br><span class=\"line\">\t\t\t        m[j] = t;\t</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif((n[0]*1.0/m[0])==(n[1]*1.0/m[1])&amp;&amp;(n[0]*1.0/m[0])==(n[2]*1.0/m[2]))//比例不一定为整数 </span><br><span class=\"line\">\t\tprintf(&quot;Yes\\n&quot;);</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\tprintf(&quot;No\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/22/XTUOJ-1259AliceAndBob/",
            "url": "https://mangpumo.github.io/2022/10/22/XTUOJ-1259AliceAndBob/",
            "title": "XTUOJ_1259AliceAndBob",
            "date_published": "2022-10-22T07:32:07.000Z",
            "content_html": "<h1 id=\"Alice-and-Bob\"><a href=\"#Alice-and-Bob\" class=\"headerlink\" title=\"Alice and Bob\"></a>Alice and Bob</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>Alice喜欢n位数，Bob喜欢能被m整除的数，请问被Alice和Bob都喜欢的数有多少个？</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行是一个整数K(K≤10000)，表示样例的个数。<br>每个样例是一行，两个整数n(1≤n≤18),m(2≤m≤1000000)。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>每行输出一个样例的结果。</p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 2</span><br><span class=\"line\">3 3</span><br><span class=\"line\">3 10000</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">450</span><br><span class=\"line\">300</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,m,count;</span><br><span class=\"line\">    int K=0;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">    //while(K--)</span><br><span class=\"line\">    for (int i=1;i&lt;=K;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class=\"line\">        if(n == 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count = 9/m;</span><br><span class=\"line\">            printf(&quot;%d\\n&quot;,count+1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            long long a1 = pow(10,n)-1;</span><br><span class=\"line\">            long long a2 = pow(10,n-1)-1;//很奇怪，如果先求a2会WA</span><br><span class=\"line\">            long long count1 = a1/m-a2/m;</span><br><span class=\"line\">            printf(&quot;%I64d\\n&quot;,count1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/C%E8%AF%AD%E8%A8%80-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/",
            "url": "https://mangpumo.github.io/2022/10/21/C%E8%AF%AD%E8%A8%80-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/",
            "title": "C语言_进制转换",
            "date_published": "2022-10-21T07:26:57.000Z",
            "content_html": "<h1 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h1><h2 id=\"任意进制转十进制\"><a href=\"#任意进制转十进制\" class=\"headerlink\" title=\"任意进制转十进制\"></a>任意进制转十进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tint x,p;   //x输入数字  p该数的进制数  </span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;p);</span><br><span class=\"line\">\tint y=0,product=1;</span><br><span class=\"line\">\twhile(x!=0)&#123;</span><br><span class=\"line\">\t\ty=y+(x%10)*product;</span><br><span class=\"line\">\t\tx=x/10;</span><br><span class=\"line\">\t\tproduct=product*p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%d&quot;,y);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"十进制转任意进制\"><a href=\"#十进制转任意进制\" class=\"headerlink\" title=\"十进制转任意进制\"></a>十进制转任意进制</h2><p><strong>注意：这里只能用do…while（原因：如果输入的是0，那么我们希望a[0]&#x3D;0）</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tint x,p; //x为十进制数，p为目标进制大小 </span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;p);</span><br><span class=\"line\">\tint a[100]; //存放余数 </span><br><span class=\"line\">\tint count=0;</span><br><span class=\"line\">\tdo&#123;</span><br><span class=\"line\">\t\ta[count++]=x%p;</span><br><span class=\"line\">\t\tx=x/p;</span><br><span class=\"line\">\t&#125;while(x!=0);//当商不为0时进行循环 </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor(int i=count-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%d&quot;,a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"二进制转十六进制\"><a href=\"#二进制转十六进制\" class=\"headerlink\" title=\"二进制转十六进制\"></a>二进制转十六进制</h2><p>主要思路：确定十六进制数组大小-&gt;确定二进制数数组大小-&gt;二进制每过4位存入十六进制1位  </p>\n<p>思路：输入的二进制数可能能不是4的整数倍，那么我们该如何处理呢？我们知道二进制不够4位，用0占位。于是我先将输入的二进制数除以10000取余(看4位)，这样就确定十六进制数组的大小，反过*4来就知道了二进制数的大小。  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\t//输入2进制数 </span><br><span class=\"line\">\tint x;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;x); </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//确定：16进制数组大小size与2进制数组大小size*4.</span><br><span class=\"line\">\tint X=x;</span><br><span class=\"line\">\tint size=0; </span><br><span class=\"line\">\twhile(true)&#123;</span><br><span class=\"line\">\t\tif(X%10000!=0)&#123; //采取看4位二进制的方法 </span><br><span class=\"line\">\t\t\tsize++;</span><br><span class=\"line\">\t\t\tX=X/10000;</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tchar tt[size];   //16进制数数组 </span><br><span class=\"line\">\tint t[size*4]; //2进制数数组 </span><br><span class=\"line\">      //存入 </span><br><span class=\"line\">\tint sum=0;</span><br><span class=\"line\">\tint count=0;</span><br><span class=\"line\">\tfor(int i=0;i&lt;sizeof(t)/sizeof(int);i++)&#123;</span><br><span class=\"line\">\t\tt[i]=x%10;</span><br><span class=\"line\">\t\tx=x/10;</span><br><span class=\"line\">\t\tsum=sum+t[i]*pow(2,count);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tif(count%4==0)&#123;</span><br><span class=\"line\">\t\t\tif(sum&gt;=10)&#123;</span><br><span class=\"line\">\t\t\t\ttt[--size]=65+(sum-10);  //字符&#x27;A&#x27;的ascii码为65 </span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\ttt[--size]=&#x27;0&#x27;+sum;    </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcount=0;</span><br><span class=\"line\">\t\t\tsum=0;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor(int i=0;i&lt;sizeof(tt);i++)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%c&quot;,tt[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"十进制转十六进制\"><a href=\"#十进制转十六进制\" class=\"headerlink\" title=\"十进制转十六进制\"></a>十进制转十六进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint a = 0;</span><br><span class=\"line\">\tint arr[32] = &#123; 0 &#125;;//将转换后的十六进制数放进数组arr。</span><br><span class=\"line\">\tint y = 0;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;, &amp;a);//获取一个十进制数</span><br><span class=\"line\">\twhile (a != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ty++;</span><br><span class=\"line\">\t\tarr[y] = a % 16;</span><br><span class=\"line\">\t\ta = a / 16;</span><br><span class=\"line\">\t\tif (arr[y] &gt; 9)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tarr[y] = &#x27;A&#x27; + (arr[y] - 10);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tarr[y] = &#x27;0&#x27; + arr[y];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor (int i = y; i &gt; 0; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%c&quot;, arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//存放在数组中的十六进制数是反着的，打印的时候可以直接倒过来打印，打印出来的就是十六进制数了。</span><br></pre></td></tr></table></figure>\n<h2 id=\"十六进制转十进制\"><a href=\"#十六进制转十进制\" class=\"headerlink\" title=\"十六进制转十进制\"></a>十六进制转十进制</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;math.h&gt;//千万别忘了引这个库</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar a[20];//输入十六进制数</span><br><span class=\"line\">\tint b[20] = &#123; 0 &#125;;//将十六进制数转成int类型</span><br><span class=\"line\">\tint i, j, sum=0;//这里的sum别忘了初始化。</span><br><span class=\"line\">\tint c = 0;//最终的十进制数</span><br><span class=\"line\">\tgets(a);</span><br><span class=\"line\">\t//将其从char类型转成int类型，并存入数组b[]中。</span><br><span class=\"line\">\twhile (a[sum] != &#x27;\\0&#x27;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif ((a[sum] &gt;= &#x27;a&#x27;) &amp;&amp; (a[sum] &lt;= &#x27;f&#x27;))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tb[sum] = a[sum] - &#x27;a&#x27; + 10;</span><br><span class=\"line\">\t\t\tsum++;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif ((a[sum] &gt;= &#x27;A&#x27;) &amp;&amp; (a[sum] &lt;= &#x27;F&#x27;))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tb[sum] = a[sum] - &#x27;A&#x27; + 10;</span><br><span class=\"line\">\t\t\tsum++;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\tb[sum] = a[sum] - &#x27;0&#x27;;</span><br><span class=\"line\">\t\t\tsum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //将每一位都转成16进制</span><br><span class=\"line\">\tfor(i = 0; i &lt; sum; i++)十进制转十六进制和十六进制转十进制是互逆的</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tb[sum - 1 - i] = b[sum - 1 - i] * pow(16, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//直接累加</span><br><span class=\"line\">\tfor (j = 0;j&lt;sum;j++) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc = c + b[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%d&quot;, c);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/KALI-%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDOS-ATTACK/",
            "url": "https://mangpumo.github.io/2022/10/21/KALI-%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDOS-ATTACK/",
            "title": "KALI_利用脚本实现DDOS-ATTACK",
            "date_published": "2022-10-21T06:30:12.000Z",
            "content_html": "<h1 id=\"KALI-LINUX利用脚本实现DDOS-ATTACK\"><a href=\"#KALI-LINUX利用脚本实现DDOS-ATTACK\" class=\"headerlink\" title=\"KALI LINUX利用脚本实现DDOS-ATTACK\"></a>KALI LINUX利用脚本实现DDOS-ATTACK</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>kali-everything 2022镜像文件<br>VMware Workstation Pro</p>\n<h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ul>\n<li>下载配置文件（HA-MRX大佬的脚本）（目前在用）<br><em>其他脚本在此暂不提及。</em><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Elsa-zlt/DDos-Attack</span><br></pre></td></tr></table></figure></li>\n<li>进入root模式<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure>\n输入账号密码，密码默认不显示。  </li>\n<li>前往DDos-Attack文件夹<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd DDos-Attack</span><br></pre></td></tr></table></figure></li>\n<li>修改（设置）对ddos-attack.py文件执行的权限<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ddos-attack.py</span><br></pre></td></tr></table></figure></li>\n<li>执行ddos-attack.py程序<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python ddos-attack.py</span><br></pre></td></tr></table></figure></li>\n<li>执行攻击<br><img data-src=\"https://img-blog.csdnimg.cn/be24cb11083f4979a7841b2d4322f952.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZKf6Imv5aCC55qE5a2m5Lmg56yU6K6w,size_15,color_FFFFFF,t_70,g_se,x_16\"><br>如若成功此处会提示输入IP地址。<br><em>打开一个命令行窗口，ping一下目标网址获得IP地址</em><br>点击回车<br>Port输入线程数（推荐80）<br>原因：此次攻击并没有利用肉鸡（貌似），线程数值越高，耗能也越大，效果也会越好，但线程数如果超过电脑可承受范围，会导致进程卡死。<br>回车运行，按下ctrl C退出。</li>\n</ul>\n<h2 id=\"已知报错\"><a href=\"#已知报错\" class=\"headerlink\" title=\"已知报错\"></a>已知报错</h2><p>无法出现上述页面<br>大佬脚本比较旧，python版本过高，需要切换到2.X  </p>\n<p>命令行窗口输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives --config python</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190621114056591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09hdmluY2k=,size_16,color_FFFFFF,t_70\"><br>输入想切换版本前面的序号 回车，即可实现版本切换√</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p><em><strong>攻击网址别瞎XX乱搞，多想一想</strong></em>  </p>\n<p><em><strong>攻击网址别瞎XX乱搞，多想一想</strong></em></p>\n<p><em><strong>攻击网址别瞎XX乱搞，多想一想</strong></em></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1255%E5%8B%BE%E8%82%A1%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1255%E5%8B%BE%E8%82%A1%E6%95%B0/",
            "title": "XTUOJ_1255勾股数",
            "date_published": "2022-10-21T06:24:09.000Z",
            "content_html": "<h1 id=\"勾股数\"><a href=\"#勾股数\" class=\"headerlink\" title=\"勾股数\"></a>勾股数</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>勾股数是指满足a2+b2&#x3D;c2的正整数，比如最有名的“勾三股四弦五”。<br>现在给你两个正整数,请问是否存在另外一个正整数，使其成为“勾股数”？</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行是一个整数K，表示样例的个数。 以后每行一个样例，为两个整数x,y,(1≤x,y≤10000)。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>每行输出一个样例的结果。如果不能构成勾股数，输出“None”，如果存在多个，输出最小的那个。</p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 </span><br><span class=\"line\">3 4</span><br><span class=\"line\">2 6</span><br><span class=\"line\">12 13</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 </span><br><span class=\"line\">None </span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint a,b;</span><br><span class=\"line\">\t\tscanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class=\"line\">\t\tint a1,b1;</span><br><span class=\"line\">\t\tif(a&gt;b)//a1&gt;b1</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t    a1 = a;</span><br><span class=\"line\">\t\t    b1 = b;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ta1 = b;</span><br><span class=\"line\">\t\t    b1 = a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tint c1,c2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tc1 = (int)sqrt(a1*a1-b1*b1);</span><br><span class=\"line\">\t\tc2 = (int)sqrt(a1*a1+b1*b1);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(a1*a1-b1*b1==c1*c1&amp;&amp;c1&gt;0)//c1&gt;0防止a,b相等 </span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,c1);</span><br><span class=\"line\">\t\telse if(a1*a1+b1*b1==c2*c2)</span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,c2);</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\tprintf(&quot;None\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1113%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1113%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/",
            "title": "XTUOJ_1113区间相交",
            "date_published": "2022-10-21T05:07:15.000Z",
            "content_html": "<h1 id=\"区间相交\"><a href=\"#区间相交\" class=\"headerlink\" title=\"区间相交\"></a>区间相交</h1><h2 id=\"Description\"><a href=\"#Description\" class=\"headerlink\" title=\"Description\"></a>Description</h2><p>给你两个闭区间，请判断这两个区间是否相交。</p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>有多组样例，第一行是一个整数N(1&lt;&#x3D;N&lt;&#x3D;100)，表示有多少个样例。每个样例占两行，每行是两个整数，X，Y(0&lt;&#x3D;X&lt;&#x3D;Y&lt;&#x3D;1000)，表示闭区间[X,Y]。</p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>每行输出一个样例的结果，如果相交，那么输出“Yes”，否则输出“No”。</p>\n<h2 id=\"Sample-Input\"><a href=\"#Sample-Input\" class=\"headerlink\" title=\"Sample Input\"></a>Sample Input</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 5</span><br><span class=\"line\">2 6</span><br><span class=\"line\">3 5</span><br><span class=\"line\">4 7</span><br><span class=\"line\">3 5</span><br><span class=\"line\">6 7</span><br></pre></td></tr></table></figure>\n<h2 id=\"Sample-Output\"><a href=\"#Sample-Output\" class=\"headerlink\" title=\"Sample Output\"></a>Sample Output</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes</span><br><span class=\"line\">Yes</span><br><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint N;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;N);</span><br><span class=\"line\">\twhile(N--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint count = 0;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tint x1,y1,x2,y2;</span><br><span class=\"line\">\t\t\tscanf(&quot;%d %d %d %d&quot;,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class=\"line\">\t\t\tif((x2&gt;=x1&amp;&amp;x2&lt;=y1)||(y2&gt;=x1&amp;&amp;y2&lt;=y1)||(x1&gt;=x2&amp;&amp;x1&lt;=y2)||(y1&gt;=x2&amp;&amp;y1&lt;=y2))</span><br><span class=\"line\">                printf(&quot;Yes\\n&quot;);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                printf(&quot;No\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1437%E6%AF%94%E4%BE%8B/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1437%E6%AF%94%E4%BE%8B/",
            "title": "XTUOJ_1437比例",
            "date_published": "2022-10-21T04:35:29.000Z",
            "content_html": "<h1 id=\"比例\"><a href=\"#比例\" class=\"headerlink\" title=\"比例\"></a>比例</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>……图片存储问题，图片见下网址<br><span class=\"exturl\" data-url=\"aHR0cDovLzIwMi4xOTcuMjI0LjU5L2V4YW0vaW5kZXgucGhwL3Byb2JsZW0vZXhhbV9yZWFkL2lkLzE0MzcvZXhhbV9pZC8zODQ=\">http://202.197.224.59/exam/index.php/problem/exam_read/id/1437/exam_id/384</span><br>已知BD:DA&#x3D;a:b, AE:EC&#x3D;c:d, FC:FB&#x3D;e:f，求DG:GF。</p>\n<h2 id=\"输入格式\"><a href=\"#输入格式\" class=\"headerlink\" title=\"输入格式\"></a>输入格式</h2><p>第一行是一个整数T (1≤T≤1000)，表示样例的个数。</p>\n<p>以后每行6个整数,依次为a,b,c,d,e,f (1≤a,b,c,d,e,f≤1000)。  </p>\n<h2 id=\"输出格式\"><a href=\"#输出格式\" class=\"headerlink\" title=\"输出格式\"></a>输出格式</h2><p>依次每行输出一个样例的结果，为两个整数x和y，两者之间有一个空格，x和y互质。</p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4 1 2 1 1 2</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 5 </span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int gcd(int x,int y)//公因数 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(y==0)</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">    else </span><br><span class=\"line\">\treturn gcd(y,x%y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \tint T;</span><br><span class=\"line\"> \tscanf(&quot;%d&quot;,&amp;T);</span><br><span class=\"line\"> \twhile(T--)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\tint a,b,c,d,e,f;</span><br><span class=\"line\"> \t\tscanf(&quot;%d %d %d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f);</span><br><span class=\"line\"> \t\tint gy,DG,GF,x,y;</span><br><span class=\"line\"> \t\tgy = gcd((a*c*(e+f)),(d*f*(a+b)));</span><br><span class=\"line\"> \t\tDG = (a*c*(e+f));</span><br><span class=\"line\"> \t\tGF = (d*f*(a+b));</span><br><span class=\"line\"> \t\tx = DG/gy;</span><br><span class=\"line\"> \t\ty = GF/gy;</span><br><span class=\"line\"> \t\tprintf(&quot;%d %d\\n&quot;,x,y);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1211A+BI/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1211A+BI/",
            "title": "XTUOJ_1211A+BI",
            "date_published": "2022-10-21T03:32:08.000Z",
            "content_html": "<h1 id=\"A-B-I\"><a href=\"#A-B-I\" class=\"headerlink\" title=\"A+B I\"></a>A+B I</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>小明在做算术题，他计算了一些a+b的等式，请判断一下他是否算对了？  </p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行是一个整数K，表示样例的个数。 每个样例占一行，形如a+b&#x3D;c,其中0≤a,b,c≤1,000  </p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>每行输出一个样例的判断结果，算对了输出“Yes”，否则输出“No”。（引号不需要输出）  </p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1+2=3</span><br><span class=\"line\">2+3=4</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint a,b,c,ans;</span><br><span class=\"line\">\t\tscanf(&quot;%d+%d=%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">\t\tans = a+b;</span><br><span class=\"line\">\t\tif(ans==c)</span><br><span class=\"line\">\t\t    printf(&quot;Yes\\n&quot;);</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\tprintf(&quot;No\\n&quot;);</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1405%E4%B8%96%E7%95%8C%E6%9D%AF/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1405%E4%B8%96%E7%95%8C%E6%9D%AF/",
            "title": "XTUOJ_1405世界杯",
            "date_published": "2022-10-21T03:20:56.000Z",
            "content_html": "<h1 id=\"World-Cup\"><a href=\"#World-Cup\" class=\"headerlink\" title=\"World Cup\"></a>World Cup</h1><h2 id=\"题目描述\"><a href=\"#题目描述\" class=\"headerlink\" title=\"题目描述\"></a>题目描述</h2><p>世界杯来了！！！自然，足球博彩也变得炙手可热。现在有n家博彩公司针对比赛的胜负平给出不同的赔率（比如，赔率为1赔1.5，即如果下注1块钱，猜对了会获得1.5元，盈利0.5元），请问是否有一种策略可以保证一定赢钱？  </p>\n<h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><p>第一行是一个整数T(1≤T≤1000)，表示样例的个数。 每个样例的第一行是一个整数n(1≤n≤10)，表示博彩公司的数量。 以后的每行包括三个浮点数，w,d,l(1.0&lt;w,d,l≤100.0)，分别表示比赛主队胜平负的赔率。  </p>\n<h2 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h2><p>每行输出一个样例的结果，如果存在必赢的策略，输出”Yes”；否则输出”No”。  </p>\n<h2 id=\"样例输入\"><a href=\"#样例输入\" class=\"headerlink\" title=\"样例输入\"></a>样例输入</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">1.3 4.8 10.5</span><br><span class=\"line\">1.4 4.0 9.7</span><br><span class=\"line\">2</span><br><span class=\"line\">1.3 5.6 9.8</span><br><span class=\"line\">1.45 5.0 8.9</span><br></pre></td></tr></table></figure>\n<h2 id=\"样例输出\"><a href=\"#样例输出\" class=\"headerlink\" title=\"样例输出\"></a>样例输出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No</span><br><span class=\"line\">Yes</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考源码\"><a href=\"#参考源码\" class=\"headerlink\" title=\"参考源码\"></a>参考源码</h2><p>&#96;&#96;&#96;<br>#include &lt;stdio.h&gt;<br>using namespace std;<br>int main()<br>{<br>    int T;<br>    double w,d,l;<br>    double x&#x3D;0,y&#x3D;0,z&#x3D;0;</p>\n<pre><code>scanf(&quot;%d&quot;,&amp;T);\nwhile(T--)\n&#123;\n    int K;\n    scanf(&quot;%d&quot;,&amp;K);\n    while(K--)\n    &#123;\n        scanf(&quot;%lf %lf %lf&quot;,&amp;w,&amp;d,&amp;l);\n        if(x&lt;=w)\n        x = w;\n        if(y&lt;=d)\n        y = d;\n        if(z&lt;=l)\n        z = l;\n    &#125;\n    x = 1/x;\n    y = 1/y;\n    z = 1/z;\n    if(x+y+z&lt;=1)\n        printf(&quot;Yes\\n&quot;);\n    else\n        printf(&quot;No\\n&quot;);\n        x=0;\n        y=0;\n        z=0;\n&#125;\n</code></pre>\n<p>}</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-string-h%E5%A4%B4%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-string-h%E5%A4%B4%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0/",
            "title": "C语言_string.h头文件函数",
            "date_published": "2022-10-20T11:17:35.000Z",
            "content_html": "<h1 id=\"string-h头文件\"><a href=\"#string-h头文件\" class=\"headerlink\" title=\"string.h头文件\"></a>string.h头文件</h1><h2 id=\"strdup\"><a href=\"#strdup\" class=\"headerlink\" title=\"strdup\"></a>strdup</h2><p>函数原型:  char *strdup(const char *s)<br>函数功能:  字符串拷贝，目的空间由该函数分配<br>函数返回:  指向拷贝后的字符串指针<br>参数说明:  src-待拷贝的源字符串<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *dup_str, *string=&quot;abcde&quot;; </span><br><span class=\"line\">  dup_str=strdup(string); </span><br><span class=\"line\">  printf(&quot;%s&quot;, dup_str); </span><br><span class=\"line\">  free(dup_str); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strcpy\"><a href=\"#strcpy\" class=\"headerlink\" title=\"strcpy\"></a>strcpy</h2><p>函数原型:  char* strcpy(char* str1,char* str2);<br>函数功能:  把str2指向的字符串拷贝到str1中去<br>函数返回:  返回str1,即指向str1的指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char string[10]; </span><br><span class=\"line\">  char *str1=&quot;abcdefghi&quot;; </span><br><span class=\"line\">  strcpy(string,str1); </span><br><span class=\"line\">  printf(&quot;the string is:%s\\n&quot;,string); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strncpy\"><a href=\"#strncpy\" class=\"headerlink\" title=\"strncpy\"></a>strncpy</h2><p>函数原型:  char *strncpy(char *dest, const char *src，intcount)<br>函数功能:  将字符串src中的count个字符拷贝到字符串dest中去<br>函数返回:  指向dest的指针<br>参数说明:  dest-目的字符串，src-源字符串，count-拷贝的字符个数<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char*src = &quot;bbbbbbbbbbbbbbbbbbbb&quot;;//20 &#x27;b&#x27;s</span><br><span class=\"line\">   char dest[50] =&quot;aaaaaaaaaaaaaaaaaaaa&quot;;//20 &#x27;a&#x27;s</span><br><span class=\"line\"> </span><br><span class=\"line\">   puts(dest);</span><br><span class=\"line\">   strncpy(dest, src, 10);</span><br><span class=\"line\"> </span><br><span class=\"line\">   puts(dest);  </span><br><span class=\"line\">   return0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*******************************************</span><br><span class=\"line\">aaaaaaaaaaaaaaaaaaaa</span><br><span class=\"line\">bbbbbbbbbbaaaaaaaaaa</span><br><span class=\"line\">*******************************************/</span><br></pre></td></tr></table></figure>\n<p><strong>注意：</strong><br>strncpy只复制指定长度的字符，不会自动在末尾加’\\0’。若指定长度超过源字符串长度，不够的部分补‘\\0’.  </p>\n<h2 id=\"stacat\"><a href=\"#stacat\" class=\"headerlink\" title=\"stacat\"></a>stacat</h2><p>函数原型:  char* strcat(char * str1,char * str2);<br>函数功能:  把字符串str2接到str1后面,str1最后的’\\0’被取消<br>函数返回:  str1<br>参数说明:<br>所属文件:  &lt;string.h&gt;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char buffer[80];</span><br><span class=\"line\">  strcpy(buffer,&quot;Hello &quot;); </span><br><span class=\"line\">  strcat(buffer,&quot;world&quot;); </span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strncat\"><a href=\"#strncat\" class=\"headerlink\" title=\"strncat\"></a>strncat</h2><p>函数原型:  char *strncat(char *dest, const char *src, size_t maxlen)<br>函数功能:  将字符串src中前maxlen个字符连接到dest中<br>函数返回:<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">char buffer[80];</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  strcpy(buffer,&quot;Hello &quot;); </span><br><span class=\"line\">  strncat(buffer,&quot;world&quot;,8); </span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  strncat(buffer,&quot;*************&quot;,4); </span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注意:</strong><br>与strncpy不同的是，strncat会自动在末尾加‘\\0’，若指定长度超过源字符串长度，则只复制源字符串长度即停止.</p>\n<h2 id=\"strcmp\"><a href=\"#strcmp\" class=\"headerlink\" title=\"strcmp\"></a>strcmp</h2><p>函数原型:  int strcmp(char * str1,char * str2);<br>函数功能:  比较两个字符串str1,str2.<br>函数返回:  str1&lt;str2,返回负数; str1&#x3D;str2,返回 0; str1&gt;str2,返回正数.<br>参数说明:<br>所属文件:  &lt;string.h&gt;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *buf1=&quot;aaa&quot;, *buf2=&quot;bbb&quot;,*buf3=&quot;ccc&quot;; </span><br><span class=\"line\">  int ptr; </span><br><span class=\"line\">  ptr=strcmp(buf2, buf1); </span><br><span class=\"line\">  if(ptr&gt;0) </span><br><span class=\"line\">    printf(&quot;buffer 2 is greater thanbuffer 1\\n&quot;); </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;buffer 2 is less thanbuffer 1\\n&quot;); </span><br><span class=\"line\">  ptr=strcmp(buf2, buf3); </span><br><span class=\"line\">  if(ptr&gt;0) </span><br><span class=\"line\">    printf(&quot;buffer 2 is greater thanbuffer 3\\n&quot;); </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;buffer 2 is less thanbuffer 3\\n&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strncmp\"><a href=\"#strncmp\" class=\"headerlink\" title=\"strncmp\"></a>strncmp</h2><p>函数原型:  int strncmp(char *str1,char *str2,int count)<br>函数功能:  对str1和str2中的前count个字符按字典顺序比较<br>函数返回:  小于0：str1&lt;str2，等于0：str1&#x3D;str2，大于0：str1&gt;str2<br>参数说明:  str1,str2-待比较的字符串，count-比较的长度<br>所属文件:  &lt;string.h&gt;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char str1[] =&quot;aabbc&quot;;//</span><br><span class=\"line\">   char str2[] = &quot;abbcd&quot;;//</span><br><span class=\"line\">   //为使测试程序更简练，此处假定了strncmp只返回-1,0,1三个数</span><br><span class=\"line\">   char res_info[] = &#123;&#x27;&lt;&#x27;,&#x27;=&#x27;,&#x27;&gt;&#x27;&#125;;</span><br><span class=\"line\">   int res;</span><br><span class=\"line\"> </span><br><span class=\"line\">   //前1个字符比较</span><br><span class=\"line\">   res = strncmp(str1, str2, 1);</span><br><span class=\"line\">   printf(&quot;1：str1%c str2\\n&quot;, res_info[res+1]);</span><br><span class=\"line\">  </span><br><span class=\"line\">    //前3个字符比较</span><br><span class=\"line\">   res = strncmp(str1, str2, 3);</span><br><span class=\"line\">   printf(&quot;3：str1%c str2\\n&quot;, res_info[res+1]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/****************************************</span><br><span class=\"line\">1：str1= str2</span><br><span class=\"line\">3：str1&lt; str2</span><br><span class=\"line\">*****************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strpbrk\"><a href=\"#strpbrk\" class=\"headerlink\" title=\"strpbrk\"></a>strpbrk</h2><p>函数原型:  char *strpbrk(const char *s1, const char *s2)<br>函数功能:  得到s1中第一个“同时也出现在s2中”字符的位置指针<br>函数返回:  位置指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char *p=&quot;Find all vowels&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">   p=strpbrk(p+1,&quot;aeiouAEIOU&quot;);</span><br><span class=\"line\">   while(p)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      printf(&quot;%s\\n&quot;,p);</span><br><span class=\"line\">      p=strpbrk(p+1,&quot;aeiouAEIOU&quot;);</span><br><span class=\"line\">     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**************************************</span><br><span class=\"line\">ind all vowels</span><br><span class=\"line\">all vowels</span><br><span class=\"line\">owels</span><br><span class=\"line\">els</span><br><span class=\"line\">**************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strcspn\"><a href=\"#strcspn\" class=\"headerlink\" title=\"strcspn\"></a>strcspn</h2><p>函数原型:  int strcspn(const char *s1, const char *s2)<br>函数功能:  统计s1中从头开始直到第一个“来自s2中的字符”出现的长度<br>函数返回:  长度<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> printf(&quot;%d\\n&quot;,strcspn(&quot;abcbcadef&quot;,&quot;cba&quot;)); </span><br><span class=\"line\"> printf(&quot;%d\\n&quot;,strcspn(&quot;xxxbcadef&quot;,&quot;cba&quot;)); </span><br><span class=\"line\"> printf(&quot;%d\\n&quot;,strcspn(&quot;123456789&quot;,&quot;cba&quot;)); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/************************</span><br><span class=\"line\">0</span><br><span class=\"line\">3</span><br><span class=\"line\">9</span><br><span class=\"line\">************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strspn\"><a href=\"#strspn\" class=\"headerlink\" title=\"strspn\"></a>strspn</h2><p>函数原型:  int strspn(const char *s1, const char *s2)<br>函数功能:  统计s1中从头开始直到第一个“不来自s2中的字符”出现的长度<br>函数返回:  位置指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;alloc.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,strspn(&quot;abcbcadef&quot;,&quot;cba&quot;));</span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,strspn(&quot;xxxbcadef&quot;,&quot;cba&quot;));</span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,strspn(&quot;123456789&quot;,&quot;cba&quot;));</span><br><span class=\"line\">   return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/************************</span><br><span class=\"line\">6</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strchr\"><a href=\"#strchr\" class=\"headerlink\" title=\"strchr\"></a>strchr</h2><p>函数原型:  char* strchr(char* str,char ch);<br>函数功能:  找出str指向的字符串中第一次出现字符ch的位置<br>函数返回:  返回指向该位置的指针,如找不到,则返回空指针<br>参数说明:  str-待搜索的字符串，ch-查找的字符<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char *str = &quot;This is a string!&quot;;</span><br><span class=\"line\">   char ch;</span><br><span class=\"line\">   char *p;</span><br><span class=\"line\"> </span><br><span class=\"line\">   while(1)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      printf(&quot;Please input a char:&quot;);</span><br><span class=\"line\">      ch = getchar();</span><br><span class=\"line\">      p = strchr(str, ch);</span><br><span class=\"line\">      if(p)</span><br><span class=\"line\">         printf(&quot;%c is the %d character of\\&quot;%s\\&quot;\\n&quot;,ch, (int)(p-str+1),str);</span><br><span class=\"line\">      else</span><br><span class=\"line\">         printf(&quot;Not found!\\n&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">      printf(&quot;Press ESC to quit!\\n\\n&quot;);</span><br><span class=\"line\">      if(27 == getch())</span><br><span class=\"line\">         break;</span><br><span class=\"line\">      fflush(stdin);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>运行结果：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/********************************************</span><br><span class=\"line\">Please input achar:i</span><br><span class=\"line\">i is the 3character of &quot;This is a string!&quot;</span><br><span class=\"line\">Press ESC to quit!</span><br><span class=\"line\"> </span><br><span class=\"line\">Please input achar:l</span><br><span class=\"line\">Not found!</span><br><span class=\"line\">Press ESC to quit!</span><br><span class=\"line\"> </span><br><span class=\"line\">Please input achar:s</span><br><span class=\"line\">s is the 4character of &quot;This is a string!&quot;</span><br><span class=\"line\">Press ESC to quit!</span><br><span class=\"line\">**********************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strrchr\"><a href=\"#strrchr\" class=\"headerlink\" title=\"strrchr\"></a>strrchr</h2><p>函数原型:  char *strrchr(const char *s, int c)<br>函数功能:  得到字符串s中最后一个含有c字符的位置指针<br>函数返回:  位置指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  charstring[15]; </span><br><span class=\"line\">  char*ptr,c=&#x27;r&#x27;; </span><br><span class=\"line\"> strcpy(string,&quot;This is a string&quot;); </span><br><span class=\"line\"> ptr=strrchr(string,c); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">   printf(&quot;The character %c is at position:%d&quot;,c,ptr-string); </span><br><span class=\"line\">  else </span><br><span class=\"line\">   printf(&quot;The character was not found&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strstr\"><a href=\"#strstr\" class=\"headerlink\" title=\"strstr\"></a>strstr</h2><p>函数原型:  char* strstr(char* str1,char* str2);<br>函数功能:  找出str2字符串在str1字符串中第一次出现的位置(不包括str2的串结束符)<br>函数返回:  返回该位置的指针,如找不到,返回空指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char*str1=&quot;Open Watcom C/C++&quot;,*str2=&quot;Watcom&quot;,*ptr; </span><br><span class=\"line\"> ptr=strstr(str1,str2); </span><br><span class=\"line\"> printf(&quot;The substring is:%s\\n&quot;,ptr); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The substringis:Watcom C/C++</span><br></pre></td></tr></table></figure>\n<h2 id=\"strrev\"><a href=\"#strrev\" class=\"headerlink\" title=\"strrev\"></a>strrev</h2><p>函数原型:  char *strrev(char *s)<br>函数功能:  将字符串中的所有字符颠倒次序排列<br>函数返回:  指向s的指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char forward[]=&quot;string&quot;; //原文中定义为char*是不对的，指向代码段的指针内容是不可变的</span><br><span class=\"line\"> printf(&quot;Before strrev():%s&quot;,forward); </span><br><span class=\"line\"> strrev(forward); </span><br><span class=\"line\">  printf(&quot;Afterstrrev(): %s&quot;,forward); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/************************************</span><br><span class=\"line\">Beforestrrev():string</span><br><span class=\"line\">After strrev():gnirts</span><br><span class=\"line\">************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strnset\"><a href=\"#strnset\" class=\"headerlink\" title=\"strnset\"></a>strnset</h2><p>函数原型:  char *strnset(char *s, int ch, size_t n)<br>函数功能:  将字符串s中前n个字符设置为ch的值<br>函数返回:  指向s的指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   charstring[]=&quot;aaaaaaaaaaaaaaaaaaaaaaa&quot;;</span><br><span class=\"line\">   char letter=&#x27;x&#x27;;</span><br><span class=\"line\">   printf(&quot;string before strnset:%s\\n&quot;,string);</span><br><span class=\"line\">   strnset(string,letter,10);</span><br><span class=\"line\">   printf(&quot;string after strnset:  %s\\n&quot;,string);</span><br><span class=\"line\"> </span><br><span class=\"line\">return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*************************************************</span><br><span class=\"line\">string beforestrnset: aaaaaaaaaaaaaaaaaaaaaaa</span><br><span class=\"line\">string afterstrnset:  xxxxxxxxxxaaaaaaaaaaaaa</span><br><span class=\"line\">*************************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"strset\"><a href=\"#strset\" class=\"headerlink\" title=\"strset\"></a>strset</h2><p>函数原型:  char *strset(char *s, int ch)<br>函数功能:  将字符串s中所有字符设置为ch的值<br>函数返回:  指向s的指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  charstring[10]=&quot;123456789&quot;; </span><br><span class=\"line\">  charsymbol=&#x27;c&#x27;; </span><br><span class=\"line\"> printf(&quot;Before strset(): %s&quot;, string); </span><br><span class=\"line\"> strset(string, symbol); </span><br><span class=\"line\"> printf(&quot;After strset(): %s&quot;, string); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strtok\"><a href=\"#strtok\" class=\"headerlink\" title=\"strtok\"></a>strtok</h2><p>函数原型:  char *strtok(char *s1, const char *s2)<br>函数功能:  分解s1字符串为用特定分隔符分隔的多个字符串(一般用于将英文句分解为单词)<br>函数返回:  字符串s1中首次出现s2中的字符前的子字符串指针   </p>\n<p>参数说明:  s2一般设置为s1中的分隔字符<br><strong>规定进行子调用时（即分割s1的第二、三及后续子串）第一参数必须是NULL</strong><br> 在每一次匹配成功后，将s1中分割出的子串位置替换为NULL(摘下链中第一个环)，因此s1被破坏了   </p>\n<p>函数会记忆指针位置以供下一次调用<br>所属文件:  &lt;string.h&gt;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *p; </span><br><span class=\"line\">  char*buffer; </span><br><span class=\"line\">  char*delims=&#123; &quot; .,&quot; &#125;;</span><br><span class=\"line\"> buffer=strdup(&quot;Find words, all of them.&quot;); </span><br><span class=\"line\"> printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\"> p=strtok(buffer,delims); </span><br><span class=\"line\"> while(p!=NULL)&#123; </span><br><span class=\"line\">   printf(&quot;word: %s\\n&quot;,p); </span><br><span class=\"line\">   p=strtok(NULL,delims); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;//根据测试，可以随时给strtok的第一个参数输入一个新的字符串，开始新字符串的分隔</span><br></pre></td></tr></table></figure>\n<p><strong>PS：根据测试，可以随时给strtok的第一个参数输入一个新的字符串，开始新字符串的分隔</strong>  </p>\n<h2 id=\"strupr\"><a href=\"#strupr\" class=\"headerlink\" title=\"strupr\"></a>strupr</h2><p>函数原型:  char *strupr(char *s)<br>函数功能:  将字符串s中的字符变为大写<br>函数返回:<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char string[]=&quot;abcdefghijklmnopqrstuvwxyz&quot;,*ptr; //会影响原字符串的内存，用char[]来声明</span><br><span class=\"line\">  ptr=strupr(string); </span><br><span class=\"line\">  printf(&quot;%s&quot;,ptr); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strlwr\"><a href=\"#strlwr\" class=\"headerlink\" title=\"strlwr\"></a>strlwr</h2><p>函数原型:  char *strlwr(char *s)<br>函数功能:  将字符串中的字符变为小写字符<br>函数返回:  指向s的指针<br>参数说明:<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char str[]=&quot;HOW TO SAY?&quot;; </span><br><span class=\"line\">  printf(&quot;%s&quot;,strlwr(str)); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"strerror\"><a href=\"#strerror\" class=\"headerlink\" title=\"strerror\"></a>strerror</h2><p>函数原型:  char *strerror(int errnum)<br>函数功能:  得到错误信息的内容信息<br> 函数返回:  错误提示信息字符串指针<br>参数说明:  errnum-错误编号<br>所属文件:  &lt;string.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;errno.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *buffer; </span><br><span class=\"line\">  buffer=strerror(errno); </span><br><span class=\"line\">  printf(&quot;Error: %s&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"memcpy\"><a href=\"#memcpy\" class=\"headerlink\" title=\"memcpy\"></a>memcpy</h2><p>函数原型:  void *memcpy(void *dest, const void *src, size_t n)<br>函数功能:  字符串拷贝<br>函数返回:  指向dest的指针<br>参数说明:  src-源字符串，n-拷贝的最大长度<br>所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char src[]=&quot;******************************&quot;; </span><br><span class=\"line\">  char dest[]=&quot;abcdefghijlkmnopqrstuvwxyz0123456709&quot;; </span><br><span class=\"line\">  char *ptr; </span><br><span class=\"line\">  printf(&quot;destination before memcpy:%s\\n&quot;,dest); </span><br><span class=\"line\">  ptr=memcpy(dest,src,strlen(src)); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">    printf(&quot;destination after memcpy:%s\\n&quot;,dest); </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;memcpy failed&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*************************************************************</span><br><span class=\"line\">destination before memcpy:abcdefghijlkmnopqrstuvwxyz0123456709</span><br><span class=\"line\">destination after memcpy:******************************456709</span><br><span class=\"line\">**************************************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"memeccpy\"><a href=\"#memeccpy\" class=\"headerlink\" title=\"memeccpy\"></a>memeccpy</h2><p>函数原型:  void *memccpy(void *dest, const void *src, int c, size_t n)<br>函数功能:  字符串拷贝，到指定长度或遇到指定字符时停止拷贝<br>函数返回:<br>参数说明:  src-源字符串指针，c-中止拷贝检查字符，n-长度,dest-拷贝底目的字符串指针<br>所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *src=&quot;This is the source string&quot;; </span><br><span class=\"line\">  char dest[50]; </span><br><span class=\"line\">  char *ptr; </span><br><span class=\"line\">  ptr=memccpy(dest,src,&#x27;c&#x27;,strlen(src)); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    *ptr=&#x27;\\0&#x27;; </span><br><span class=\"line\">    printf(&quot;The character wasfound:%s&quot;,dest); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;The character wasn&#x27;tfound&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*****************************************</span><br><span class=\"line\">The character was found:This is the sourc</span><br><span class=\"line\">*****************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"memchr\"><a href=\"#memchr\" class=\"headerlink\" title=\"memchr\"></a>memchr</h2><p>函数原型:  void *memchr(const void *s, int c, size_t n)<br>函数功能:  在字符串中第开始n个字符中寻找某个字符c的位置<br>函数返回:  返回c的位置指针，返回NULL时表示未找到<br>参数说明:  s-要搜索的字符串，c-要寻找的字符，n-指定长度<br>所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char str[17]; </span><br><span class=\"line\">  char *ptr; </span><br><span class=\"line\">  strcpy(str,&quot;This is a string&quot;); </span><br><span class=\"line\">  ptr=memchr(str,&#x27;r&#x27;,strlen(str)); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">  printf(&quot;The character &#x27;r&#x27; is at position:%d&quot;,ptr-str); </span><br><span class=\"line\">  else </span><br><span class=\"line\">  printf(&quot;The character was not found&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"memecmp\"><a href=\"#memecmp\" class=\"headerlink\" title=\"memecmp\"></a>memecmp</h2><p>函数原型:  int memcmp(const void *s1, const void *s2,size_t n)<br>函数功能:  按字典顺序比较两个串s1和s2的前n个字节<br>函数返回:  &lt;0,&#x3D;0,&gt;0分别表示s1&lt;,&#x3D;,&gt;s2<br>参数说明:  s1,s2-要比较的字符串，n-比较的长度<br>所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  char *buf1=&quot;ABCDE123&quot;;  </span><br><span class=\"line\">  char *buf2=&quot;abcde456&quot;;  </span><br><span class=\"line\">  int stat;  </span><br><span class=\"line\">  stat=memcmp(buf1,buf2,5);  </span><br><span class=\"line\">  printf(&quot;The strings to position 5 are&quot;);  </span><br><span class=\"line\">  if(stat) printf(&quot;not &quot;);  </span><br><span class=\"line\">  printf(&quot;the same\\n&quot;);  </span><br><span class=\"line\">  return 0;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h2 id=\"memicmp\"><a href=\"#memicmp\" class=\"headerlink\" title=\"memicmp\"></a>memicmp</h2><p>函数原型:  int memicmp(const void *s1, const void *s2, size_t n)<br>函数功能:  按字典顺序、不考虑字母大小写对字符串s1,s2前n个字符比较<br>函数返回:  &lt;0,&#x3D;0,&gt;0分别表示s1&lt;,&#x3D;,&gt;s2<br>参数说明:  s1,s2-要比较的字符串，n-比较的长度<br>所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *buf1=&quot;ABCDE123&quot;; </span><br><span class=\"line\">  char *buf2=&quot;abcde456&quot;; </span><br><span class=\"line\">  int stat; </span><br><span class=\"line\">  stat=memicmp(buf1,buf2,5); </span><br><span class=\"line\">  printf(&quot;The strings to position 5 are&quot;); </span><br><span class=\"line\">  if(stat) printf(&quot;not&quot;); </span><br><span class=\"line\">  printf(&quot;the same&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>输出：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**************************************</span><br><span class=\"line\">The strings to position 5 are the same</span><br><span class=\"line\">***************************************/</span><br></pre></td></tr></table></figure>\n<h2 id=\"memmove\"><a href=\"#memmove\" class=\"headerlink\" title=\"memmove\"></a>memmove</h2><p>函数原型:  void *memmove(void *dest, const void *src, size_t n)<br>函数功能:  字符串拷贝<br>函数返回:  指向dest的指针<br>参数说明:  src-源字符串，n-拷贝的最大长度<br>所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  chardest[40]=&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;; </span><br><span class=\"line\">  printf(&quot;destination prior tomemmove:%s\\n&quot;,dest); </span><br><span class=\"line\">  memmove(dest+1,dest,35); </span><br><span class=\"line\">  printf(&quot;destination aftermemmove:%s&quot;,dest); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>PS：与memcpy不同的是，memmove可以处理目的字符串与源字符串地址空间出现重叠的情况，可保证待复制的内容不被破坏。</strong></p>\n<h2 id=\"memset\"><a href=\"#memset\" class=\"headerlink\" title=\"memset\"></a>memset</h2><p>函数原型:   void *memset(void *s, int c, size_t n)<br>函数功能:   字符串中的n个字节内容设置为c<br>函数返回:<br>参数说明:   s-要设置的字符串，c-设置的内容，n-长度<br>所属文件:   &lt;string.h&gt;,&lt;mem.h&gt;  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;mem.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  charbuffer[]=&quot;Hello world&quot;;</span><br><span class=\"line\"> printf(&quot;Buffer before memset:%s/n&quot;,buffer);</span><br><span class=\"line\"> memset(buffer,&#x27;*&#x27;,strlen(buffer)-1);</span><br><span class=\"line\"> printf(&quot;Buffer after memset:%s&quot;,buffer);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%BE%93%E5%87%BA/",
            "url": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%BE%93%E5%87%BA/",
            "title": "C语言_二维数组的定义、初始化和输出",
            "date_published": "2022-10-20T06:38:38.000Z",
            "content_html": "<h1 id=\"二维数组的定义\"><a href=\"#二维数组的定义\" class=\"headerlink\" title=\"二维数组的定义\"></a>二维数组的定义</h1><p>二维数组定义的一般形式为：<br><strong>类型说明符 数组名[ 常量表达式][ 常量表达式];</strong><br>eg： int a[3][4]；  </p>\n<p>表示定义了一个 3×4，即 3 行 4 列总共有 12 个元素的数组 a。这 12 个元素的名字依次是：a[0][0]、a[0][1]、a[0][2]、a[0][3]；a[1][0]、a[1][1]、a[1][2]、a[1][3]；a[2][0]、a[2][1]、a[2][2]、a[2][3]。  </p>\n<p>与一维数组一样，行序号和列序号的下标都是从 0 开始的。元素 a[i][j] 表示第 i+1 行、第 j+1 列的元素。数组 int a[m][n] 最大范围处的元素是 a[m–1][n–1]。所以在引用数组元素时应该注意，下标值应在定义的数组大小的范围内。  </p>\n<p>此外，与一维数组一样，定义数组时用到的“数组名[常量表达式][常量表达式]”和引用数组元素时用到的“数组名[下标][下标]”是有区别的。前者是定义一个数组，以及该数组的维数和各维的大小。而后者仅仅是元素的下标，像坐标一样，对应一个具体的元素。  </p>\n<p>C 语言对二维数组采用这样的定义方式，使得二维数组可被看作一种特殊的一维数组，即它的元素为一维数组。比如“int a[3][4]；”可以看作有三个元素，每个元素都为一个长度为 4 的一维数组。而且 a[0]、a[2]、a[3] 分别是这三个一维数组的数组名。下面来验证一下看看是不是这么回事儿:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;, sizeof(a[0]));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果为：<br><strong>16</strong>  </p>\n<p>可见 a[0] 确实是第一行一维数组的数组名，其他同理。  </p>\n<p>在 C 语言中，二维数组中元素排列的顺序是按行存放的，即在内存中先顺序存放第一行的元素，再存放第二行的元素，这样依次存放。  </p>\n<h1 id=\"二维数组的初始化\"><a href=\"#二维数组的初始化\" class=\"headerlink\" title=\"二维数组的初始化\"></a>二维数组的初始化</h1><p>可以用下面的方法对二维数组进行初始化。  </p>\n<h2 id=\"1-分行给二维数组赋初值，比如上面程序的赋值方法：\"><a href=\"#1-分行给二维数组赋初值，比如上面程序的赋值方法：\" class=\"headerlink\" title=\"1) 分行给二维数组赋初值，比如上面程序的赋值方法：\"></a>1) 分行给二维数组赋初值，比如上面程序的赋值方法：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<p>这种赋初值的方法比较直观，将第一个花括号内的数据赋给第一行的元素、第二个花括号内的数据赋给第二行的元素……即每行看作一个元素，按行赋初值。</p>\n<h2 id=\"2-也可以将所有数据写在一个花括号内，按数组排列的顺序对各元素赋初值。\"><a href=\"#2-也可以将所有数据写在一个花括号内，按数组排列的顺序对各元素赋初值。\" class=\"headerlink\" title=\"2) 也可以将所有数据写在一个花括号内，按数组排列的顺序对各元素赋初值。\"></a>2) 也可以将所有数据写在一个花括号内，按数组排列的顺序对各元素赋初值。</h2><p>比如：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br></pre></td></tr></table></figure>\n<p>效果与第 1 种是一样的。但第1种方法更好，一行对一行，界限清楚。第 2 种方法如果数据多，写成一大片，容易遗漏，也不易检查。  </p>\n<h2 id=\"3-也可以只对部分元素赋初值。\"><a href=\"#3-也可以只对部分元素赋初值。\" class=\"headerlink\" title=\"3) 也可以只对部分元素赋初值。\"></a>3) 也可以只对部分元素赋初值。</h2><p>比如：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;&#123;1, 2&#125;, &#123;5&#125;, &#123;9&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<p>它的作用是对第一行的前两个元素赋值、第二行和第三行的第一个元素赋值。其余元素自动为 0。初始化后数组各元素为：<br>    1    2    0    0<br>    5    0    0    0<br>    9    0    0    0  </p>\n<h2 id=\"4-如果在定义数组时就对全部元素赋初值，即完全初始化，则第一维的长度可以不指定，但第二维的长度不能省。\"><a href=\"#4-如果在定义数组时就对全部元素赋初值，即完全初始化，则第一维的长度可以不指定，但第二维的长度不能省。\" class=\"headerlink\" title=\"4) 如果在定义数组时就对全部元素赋初值，即完全初始化，则第一维的长度可以不指定，但第二维的长度不能省。\"></a>4) 如果在定义数组时就对全部元素赋初值，即完全初始化，则第一维的长度可以不指定，但第二维的长度不能省。</h2><p>比如：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br></pre></td></tr></table></figure>\n<p>等价于：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[][4] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br></pre></td></tr></table></figure>\n<p>系统会根据数据总数和第二维的长度算出第一维的长度。但这种省略的写法几乎不用，因为可读性差。  </p>\n<h2 id=\"5-int-a-3-4-x3D-0-；\"><a href=\"#5-int-a-3-4-x3D-0-；\" class=\"headerlink\" title=\"5) int a[3][4]&#x3D;{0}；\"></a>5) int a[3][4]&#x3D;{0}；</h2><p>二维数组“清零”，里面每一个元素都是零。</p>\n<h1 id=\"二维数组如何输出\"><a href=\"#二维数组如何输出\" class=\"headerlink\" title=\"二维数组如何输出\"></a>二维数组如何输出</h1><p>二维数组有行和列，那么如何输出里面的元素呢？在讲述一维数组的时候说过，“数组的元素只能一个一个输出”，二维数组也不例外。在一维数组中是用一个 for 循环进行输出，而二维数组元素的输出要使用两个 for 循环嵌套。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br><span class=\"line\">    int i;  //行循环变量</span><br><span class=\"line\">    int j;  //列循环变量</span><br><span class=\"line\">    for (i=0; i&lt;3; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (j=0; j&lt;4; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%-2d\\x20&quot;, a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果是：<br>1  2  3  4<br>5  6  7  8<br>9  10 11 12<br>提示：“printf（”%-2d\\x20”，a[i][j]）；”中的“%-2d”，其中“-”表示左对齐，如果不写“-”则默认表示右对齐；“2”表示这个元素输出时占两个空格的空间，所以连同后面的 \\x20 则每个元素输出时都占三个空格的空间。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/",
            "title": "C语言_素数筛法",
            "date_published": "2022-10-20T02:25:46.000Z",
            "content_html": "<h1 id=\"素数三种求法（主要）\"><a href=\"#素数三种求法（主要）\" class=\"headerlink\" title=\"素数三种求法（主要）\"></a>素数三种求法（主要）</h1><h2 id=\"什么是素数？\"><a href=\"#什么是素数？\" class=\"headerlink\" title=\"什么是素数？\"></a>什么是素数？</h2><p>质数又称素数。一个大于1的自然数，除了1和它自身外，不能被其他自然数整除的数叫做质数；否则称为合数（规定1既不是质数也不是合数）。</p>\n<h2 id=\"素数试商法\"><a href=\"#素数试商法\" class=\"headerlink\" title=\"素数试商法\"></a>素数试商法</h2><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>我们设定一个数为x，根据质数的定义判断x是否为质数，我们看它能否被2、3、4······、x-1整除，如果它不能被其中任何一个整数整除，则这个数就是质数。</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><p>如果我们要找1—1000内的质数，我们可以控制x从2自己增到1000，并且x每次自增1过后，都要从2开始找能否被x所整除的数，直到找不到结束。所以我们可以用两层for循环来控制，第一层来控制x产生2–1000数字，第二层for循环产生2到x-1的数，并且判断能否被整除。（因为1不是质数，把1排除在外）。  </p>\n<p>count来统计大概运算的次数。</p>\n<p>代码如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//求1--1000内的质数（素数）</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint x = 0;   </span><br><span class=\"line\">\tint i = 0;</span><br><span class=\"line\">\tunsigned int count = 0;  //统计运算的次数</span><br><span class=\"line\">\tfor (x = 2; x &lt; 1000; x++)    //在2到1000之间找质数</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfor (i = 2; i &lt; x; i++)   //试除法，能不能被x整除，从2开始找，直到等于x</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\tif (x % i == 0)   //找到能被x整除的数了</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (x == i)   //找到和x相等也没有被整除的，证明是质数</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;%d &quot;,x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;\\n\\n\\n&quot;);</span><br><span class=\"line\">\tprintf(&quot;运算的次数：%d &quot;,count);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果：<br><img data-src=\"https://img-blog.csdnimg.cn/20210617001619147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2MzExOTMz,size_16,color_FFFFFF,t_70#pic_center\"><br><strong>好了看到这里就可以忘掉这种方法了</strong></p>\n<h2 id=\"素数筛法（埃拉托斯特尼筛法）\"><a href=\"#素数筛法（埃拉托斯特尼筛法）\" class=\"headerlink\" title=\"素数筛法（埃拉托斯特尼筛法）\"></a>素数筛法（埃拉托斯特尼筛法）</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>自行百度。</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><p>先把N个自然数按次序排列起来。1不是质数，也不是合数，要划去。第二个数2是质数留下来，而把2后面所有能被2整除的数都划去。2后面第一个没划去的数是3，把3留下，再把3后面所有能被3整除的数都划去。3后面第一个没划去的数是5，把5留下，再把5后面所有能被5整除的数都划去。这样一直做下去，就会把不超过N的全部合数都筛掉，留下的就是不超过N的全部质数。  </p>\n<h3 id=\"代码模板1\"><a href=\"#代码模板1\" class=\"headerlink\" title=\"代码模板1\"></a>代码模板1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//埃拉托斯特尼(Eratosthenes)筛法-&gt;适用于一定范围的元素的筛选</span><br><span class=\"line\">bool is_prime[1000];//布尔数组来标记是否为素数</span><br><span class=\"line\">int prime[1000] = &#123;0&#125;;    //存放素数</span><br><span class=\"line\">int q = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">void isprime_B(int b) //要筛选素数的区间右端点</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    memset(is_prime,true,sizeof(is_prime));//先假设都为素数</span><br><span class=\"line\">    for(int i = 2;i &lt;= sqrt(b);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(is_prime[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime[q++] = i;</span><br><span class=\"line\">            for(int j = i*2;j &lt;= b;j += i)//素数的倍数一定不是素数</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                is_prime[j] = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>BOOL类型不常用（而且需要头文件支持），功能类似0和1；<br>替换代码如下：  </p>\n<h3 id=\"代码模板2\"><a href=\"#代码模板2\" class=\"headerlink\" title=\"代码模板2\"></a>代码模板2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#define N 1000</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint b[N+1]=&#123;0,0&#125;,i,j;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor(i=2; i&lt;=N; i++)</span><br><span class=\"line\">        b[i]=1;</span><br><span class=\"line\">\tfor(i=2; i&lt;=N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t    if(b[i]==1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for(j=i*2; j&lt;=N; j=j+i) </span><br><span class=\"line\">                b[j]=0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"欧拉筛法\"><a href=\"#欧拉筛法\" class=\"headerlink\" title=\"欧拉筛法\"></a>欧拉筛法</h2><p>到这里可以忘掉上面了。<br>why?<br><em>与埃氏筛相比，不会对已经被标记过的合数再进行重复筛，故效率更高。欧拉筛保证合数仅被该合数的最小值因数筛去仅一次。</em>  </p>\n<h2 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int isprime[n],prime[n],p;//ispr[i]=1表示i不是素数 </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tisprime[0]=isprime[1]=1;</span><br><span class=\"line\">    for (int i = 2;i &lt;= n; i++) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        if (!isprime[i]) //如果值为1</span><br><span class=\"line\">        prime[++p] = i; //前面部分与埃氏筛一样 ，prime数组存当前已经确定的素数 </span><br><span class=\"line\">        for (int j = 1; j &lt;=p &amp;&amp; i*prime[j] &lt;= n; j++)</span><br><span class=\"line\">\t\t &#123;</span><br><span class=\"line\">            ispr[i*prime[j]] = 1;</span><br><span class=\"line\">            if (i % prime[j] == 0) //如果pri[j]是i的最小质因子的话，对i不再往后筛 </span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>了解就好，多用用   </p>\n<p><em><strong>周四了，记得点击下方按钮V我50！</strong></em></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/",
            "title": "C语言_前缀和、差分算法",
            "date_published": "2022-10-19T14:06:05.000Z",
            "content_html": "<h1 id=\"前缀和算法\"><a href=\"#前缀和算法\" class=\"headerlink\" title=\"前缀和算法\"></a>前缀和算法</h1><h2 id=\"关于前缀和\"><a href=\"#关于前缀和\" class=\"headerlink\" title=\"关于前缀和\"></a>关于前缀和</h2><p><strong>前缀和就是从位置1到位置i这个区间内的所有的数字之和。</strong><br><img data-src=\"https://img-blog.csdnimg.cn/20200716164747656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTE0NTU4,size_16,color_FFFFFF,t_70\"></p>\n<h2 id=\"一维数组求前缀和\"><a href=\"#一维数组求前缀和\" class=\"headerlink\" title=\"一维数组求前缀和\"></a>一维数组求前缀和</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\"> scanf(&quot;%d&quot;, &amp;a[i]);       //读入n个数</span><br><span class=\"line\">for (int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\"> s[i] = s[i - 1] + a[i];   //处理前缀和</span><br></pre></td></tr></table></figure>\n<p> 如上图。<br> 注：数组最好定义为全局变量。  </p>\n<h2 id=\"二维数组求前缀和\"><a href=\"#二维数组求前缀和\" class=\"headerlink\" title=\"二维数组求前缀和\"></a>二维数组求前缀和</h2><h3 id=\"求S-i-j\"><a href=\"#求S-i-j\" class=\"headerlink\" title=\"求S[i,j]\"></a>求S[i,j]</h3><p> 如图，用i表示行，j表示列：<br> <img data-src=\"https://img-blog.csdnimg.cn/20210418215020780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center\"></p>\n<p>   根据图片分析，求S[i,j]：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[i, j] = s[i, j - 1] + s[i - 1, j] - s[i - 1, j - 1] + a[i, j];</span><br></pre></td></tr></table></figure>\n<h3 id=\"求（X1-Y1-X2-Y2-子矩阵的和\"><a href=\"#求（X1-Y1-X2-Y2-子矩阵的和\" class=\"headerlink\" title=\"求（X1,Y1),(X2,Y2)子矩阵的和\"></a>求（X1,Y1),(X2,Y2)子矩阵的和</h3><p>如图：<br><img data-src=\"https://img-blog.csdnimg.cn/20210418221844586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center\"><br>根据图分析：求s[x1 ~ x2, y1 ~ y2]:  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[x1 ~ x2, y1 ~ y2] = s[x2,y2] - s[x2, y1-  1] - s[x1 - 1, y2] + s[x1 - 1,y1 - 1];</span><br></pre></td></tr></table></figure>\n<h2 id=\"前缀和算法优点：\"><a href=\"#前缀和算法优点：\" class=\"headerlink\" title=\"前缀和算法优点：\"></a>前缀和算法优点：</h2><p>对二维矩阵，求子矩阵 (n*m) 的和。暴力法就是两重循环，累加求和。  </p>\n<p>每次查询花费 O(n*m)O(n∗m) 时间，n和m是子矩阵的行数和列数。查询的代价有点大。  </p>\n<h1 id=\"差分算法\"><a href=\"#差分算法\" class=\"headerlink\" title=\"差分算法\"></a>差分算法</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>差分思想和前缀和是相反的。</p>\n<h2 id=\"一维差分\"><a href=\"#一维差分\" class=\"headerlink\" title=\"一维差分\"></a>一维差分</h2><p>首先我们先定义数组a, 其中a[1],a[2]…a[n]作为前缀和。  </p>\n<p>然后构造数组b，b[1],b[2]…b[n]为差分数组。其中通过差分数组的前缀和来表示a数组，即a[n] &#x3D; b[1] + b[2]+…+b[n]。  </p>\n<p>一维差分数组的构造也很简单，即a[1] &#x3D; b[1], b[2] &#x3D; a[2] - a[1], b[n] &#x3D; a[n] - a[n-1]；  </p>\n<p>注意：刚开始时可以初始化数组a,b全部为0，输入a数组后；在构造时，只需要将b[1]看做在[1, 1]区间上加上a[1]; b[2] 看作在[2, 2]区间上加上a[2]；  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对于b[1]:</span><br><span class=\"line\">b[1] = 0 + a[1];</span><br><span class=\"line\">b[2] = 0 - a[1]; //最终：b[1] = a[1]</span><br><span class=\"line\">//对于b[2]:</span><br><span class=\"line\">b[2] = b[2] + a[2]; //最终：b[2] = a[2] - a[1]</span><br><span class=\"line\">b[3] = b[3] - b[2];</span><br></pre></td></tr></table></figure>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><p>简化运算，节约时间，降低时间复杂度。  </p>\n<p>由于a[n] &#x3D; b[1] + b[2]+…+b[n]，因此只需要将b[l] &#x3D; b[l] + c 即可，这样l之后的数字会依次加上常数c，而在 b[r]处，将b[r+1] &#x3D; b[r+1] - c ，这样r之后的数组又会恢复原值，仅需要处理这两个边界的差分数组即可，时间复杂度大大降低。<br><img data-src=\"https://img-blog.csdnimg.cn/img_convert/5adc7d0e4bf14d24eef7f635232a9dc7.png\"></p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p><em><strong>不常用，加个例题理解一下</strong></em>  </p>\n<p>输入一个长度为 n 的整数序列。<br>接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。<br>请你输出进行完所有操作后的序列。<br><strong>输入格式</strong><br>第一行包含两个整数 n 和 m。<br>第二行包含 n 个整数，表示整数序列。<br>接下来 m 行，每行包含三个整数 l，r，c表示一个操作。<br><strong>输出格式</strong><br>共一行，包含 n 个整数，表示最终序列。<br><strong>数据范围</strong><br>1 ≤ n , m ≤ 100000,<br>1 ≤ l ≤ r ≤ n,<br>−1000 ≤ c ≤ 1000,<br>−1000 ≤ 整数序列中元素的值 ≤ 1000<br><strong>输入样例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 3</span><br><span class=\"line\">1 2 2 1 2 1</span><br><span class=\"line\">1 3 1</span><br><span class=\"line\">3 5 1</span><br><span class=\"line\">1 6 1</span><br></pre></td></tr></table></figure>\n<p><strong>输出样例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 5 3 4 2</span><br></pre></td></tr></table></figure>\n<p><strong>代码模板</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N = 100010;</span><br><span class=\"line\"></span><br><span class=\"line\">int m,n;</span><br><span class=\"line\">int a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(int l, int r , int c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[l] += c;</span><br><span class=\"line\">    b[r+1] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;,&amp;n, &amp;m);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">    //插入的方式形成b[i]</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) insert(i, i, a[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int l, r ,c;</span><br><span class=\"line\">        scanf(&quot;%d%d%d&quot;,&amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        insert(l, r, c);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) b[i] += b[i - 1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, b[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二维差分\"><a href=\"#二维差分\" class=\"headerlink\" title=\"二维差分\"></a>二维差分</h2><p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/a03bb33ac1482c46c1351ed6381a039c.png\"><br>基本思路：给其中的一个子矩阵加上一个值。矩阵以外的减去一个值即可。<br>可列公式表示各个范围如下：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[x1] [y1] += C;  </span><br><span class=\"line\">b[x1] [y2+1] −= C;  </span><br><span class=\"line\">b[x2+1] [y1] += C;  </span><br><span class=\"line\">b[x2+1] [y2+1] += C;  </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/cba504522f15428b8149054d363f3f18.png\"><br>由上面范围，可以求得最终要算的小正方形的面积公式：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S=b[x1] [y1] − b[x1] [y2​+1] − b[x2+1] [y1] + b[x2+1] [y2+1]</span><br></pre></td></tr></table></figure>\n<p>矩阵的初始化；<br>假定a[i][j] &#x3D; 0,b[i][j] &#x3D;0,然后读取数组a，只需要对b进行插入即可。b[i][j]相当于从(i,j)到(i,j)插入一个a[i][j]形成的。<br>最后求a[i][j]只需要求解b[i][j]的前缀和即可。</p>\n<h2 id=\"例题：差分矩阵\"><a href=\"#例题：差分矩阵\" class=\"headerlink\" title=\"例题：差分矩阵\"></a>例题：差分矩阵</h2><p><em><strong>老样子，不常用，上个题</strong></em>  </p>\n<p>输入一个 n 行 m 列的整数矩阵，<br>再输入 q 个操作，<br>每个操作包含五个整数 x1,y1,x2,y2,c，<br>其中 (x1,y1) 和 (x2,y2)表示一个子矩阵的左上角坐标和右下角坐标。<br>每个操作都要将选中的子矩阵中的每个元素的值加上 c。<br>请你将进行完所有操作后的矩阵输出。<br><strong>输入格式</strong>  </p>\n<p>第一行包含整数 n,m,q<br>接下来 n 行，每行包含 m 个整数，表示整数矩阵。<br>接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c表示一个操作。<br><strong>输出格式</strong><br>共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。<br><strong>数据范围</strong><br>1 ≤ n , m ≤ 1000<br>1 ≤ q ≤ 100000<br>1 ≤ x 1 ≤ x 2 ≤n<br>1 ≤ y 1 ≤ y 2 ≤ m<br>−1000 ≤ c ≤ 1000<br>−1000 ≤ 矩阵内元素的值 ≤ 1000<br><strong>输入样例</strong>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 3</span><br><span class=\"line\">1 2 2 1</span><br><span class=\"line\">3 2 2 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 2 2 1</span><br><span class=\"line\">1 3 2 3 2</span><br><span class=\"line\">3 1 3 4 1</span><br></pre></td></tr></table></figure>\n<p><strong>输出样例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 4 1</span><br><span class=\"line\">4 3 4 1</span><br><span class=\"line\">2 2 2 2</span><br></pre></td></tr></table></figure>\n<p><strong>代码模板</strong>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int N =1010;</span><br><span class=\"line\">int a[N][N],b[N][N];</span><br><span class=\"line\">int n, m ,q;</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(int x1, int y1, int x2, int y2, int c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x2 + 1][y1] -= c;</span><br><span class=\"line\">    b[x1][y2 +1] -= c;</span><br><span class=\"line\">    b[x2 +1][y2+1] +=c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">        for(int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">            scanf(&quot;%d&quot;, &amp;a[i][j]);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">        for(int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">            insert(i, j, i, j, a[i][j]);</span><br><span class=\"line\">    while( q-- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int x1, x2, y1, y2, c;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1&gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">        insert(x1,y1, x2, y2, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //求前缀和</span><br><span class=\"line\">    for(int i = 1; i&lt;=n; i++)</span><br><span class=\"line\">        for(int j = 1; j&lt;= m; j++)</span><br><span class=\"line\">        b[i][j] += b[i-1][j] +b[i][j-1] -b[i-1][j-1];</span><br><span class=\"line\">    for(int i = 1; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for(int j = 1; j&lt;= m; j++)</span><br><span class=\"line\">        printf(&quot;%d &quot;, b[i][j]);</span><br><span class=\"line\">        puts(&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>前缀和重要，差分有个印象。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "title": "C语言_排序算法_选择排序法",
            "date_published": "2022-10-19T04:41:26.000Z",
            "content_html": "<h1 id=\"C语言选择排序法\"><a href=\"#C语言选择排序法\" class=\"headerlink\" title=\"C语言选择排序法\"></a>C语言选择排序法</h1><h2 id=\"原理-amp-技术要点\"><a href=\"#原理-amp-技术要点\" class=\"headerlink\" title=\"原理&amp;技术要点\"></a>原理&amp;技术要点</h2><p>选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到 a[0] 中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到 a[1] 中，a[1] 中的数字仅大于 a[0]，依此类推，即可实现排序。</p>\n<h2 id=\"规则\"><a href=\"#规则\" class=\"headerlink\" title=\"规则\"></a>规则</h2><p>1.选择排序一共有 数组大小-1 轮排序<br>2.每一轮排序，又是一个循环<br>3.先假定当前这个数是最小数<br>4.然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标<br>5.当遍历到数组的最后时，就得到本轮最小数和下标<br>6.交换  </p>\n<h2 id=\"存储状态演示\"><a href=\"#存储状态演示\" class=\"headerlink\" title=\"存储状态演示\"></a>存储状态演示</h2><p><em><strong>黑体为无序区，其余为有序区</strong><br>初始序列：</em><em>2 4 7 1 6 9 8 3 0 5</em>* 　　</p>\n<p>第1趟：2与0交换：0 <strong>4 7 1 6 9 8 3 2 5</strong> 　　</p>\n<p>第2趟：0不动,4与1交换：0 1 <strong>7 4 6 9 8 3 2 5</strong> 　　</p>\n<p>第3趟：7与2交换：0 1 2 <strong>4 6 9 8 3 7 5</strong> 　　</p>\n<p>第4趟：4与3交换：0 1 2 3 <strong>6 9 8 4 7 5</strong> 　　</p>\n<p>第5趟：6与4交换：0 1 2 3 4 <strong>9 8 6 7 5</strong></p>\n<p>第6趟：9与5交换：0 1 2 3 4 5 <strong>8 6 7 9</strong></p>\n<p>第7趟：8与6交换：0 1 2 3 4 5 6 <strong>8 7 9</strong></p>\n<p>第8趟：8与7交换：0 1 2 3 4 5 6 7 <strong>8 9</strong></p>\n<p>第9趟：排序完成  </p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j,t,a[11];    //定义变量及数组为基本整型</span><br><span class=\"line\">    for(i=1;i&lt;11;i++)</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;a[i]);    //从键盘中输入要排序的10个数字</span><br><span class=\"line\">    for(i=1;i&lt;=9;i++)</span><br><span class=\"line\">        for (j=i+1;j&lt;=10;j++)</span><br><span class=\"line\">            if(a[i]&gt;a[j])    //如果前一个数比后一个数大，则利用中间变量t实现两值互换</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t=a[i];</span><br><span class=\"line\">                a[i]=a[j];</span><br><span class=\"line\">                a[j]=t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    for(i=1;i&lt;=10;i++)</span><br><span class=\"line\">        printf(&quot;%5d&quot;, a[i]);    //输出排序后的数组</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h2><p>input:<br>526 36 2 369 56 45 78 92 125 52<br>output:<br> 2 36 45 52 56 78 92 125 369 526</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "title": "C语言_辗转相除法两种方式两个用处",
            "date_published": "2022-10-19T02:17:51.000Z",
            "content_html": "<h1 id=\"辗转相除法\"><a href=\"#辗转相除法\" class=\"headerlink\" title=\"辗转相除法\"></a>辗转相除法</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>辗转相除法，被称为欧几里得（Euclidean）算法，是求最大公约数的算法。</p>\n<h2 id=\"证明\"><a href=\"#证明\" class=\"headerlink\" title=\"证明\"></a>证明</h2><p>设 b &#x3D; aq + r， (a,b) 为a，b的最大公约数。<br>则a % (a,b) &#x3D; 0; b % (a,b) &#x3D; 0,<br>因为(a和b的约数) % (a,b) &#x3D; 0,<br>所以 (b - aq) % (a,b) &#x3D; 0<br>即 r % (a,b) &#x3D; 0<br>因为a % (a,b) &#x3D; 0, r % (a,b) &#x3D; 0<br>所以(a,r) % (a,b) &#x3D; 0(最大公约数一定被公约数整除）<br>又因为a % (a,r) &#x3D; 0, r % (a,r) &#x3D; 0, b &#x3D; aq+r<br>所以 (aq + r) % (a,r) &#x3D; 0<br>即 b % （a,r) &#x3D; 0<br>因为 a % （a,r) &#x3D; 0<br>b % (a,r) &#x3D; 0<br>所以<br>(a,b) % (a,r) &#x3D; 0<br>所以<br>(a,b) &#x3D; (a,r)  </p>\n<p><strong>证明过程来自百度，大体了解即可！</strong></p>\n<h2 id=\"具体做法\"><a href=\"#具体做法\" class=\"headerlink\" title=\"具体做法\"></a>具体做法</h2><p>用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。最后的除数即为两个数的最大公约数。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long long int GCD(long long int n,long long int m)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long int t;</span><br><span class=\"line\">    if(n&lt;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t=n,n=m,m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(t=n%m,t&gt;0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=m;</span><br><span class=\"line\">        m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>自写GCD函数</strong></p>\n<h2 id=\"进阶实现（递归）\"><a href=\"#进阶实现（递归）\" class=\"headerlink\" title=\"进阶实现（递归）\"></a>进阶实现（递归）</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int GCD(int x,int y)//公因数 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(y==0)</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">    else </span><br><span class=\"line\">\treturn GCD(y,x%y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>通过递归精简代码</strong></p>\n<h2 id=\"辗转相除法求最小公倍数\"><a href=\"#辗转相除法求最小公倍数\" class=\"headerlink\" title=\"辗转相除法求最小公倍数\"></a>辗转相除法求最小公倍数</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = a*b/m;</span><br></pre></td></tr></table></figure>\n<p>其中ans为最小公倍数，a,b为输入的两个数，m为两个数字的最大公因数。<br><strong>原理很简单，两个数的最小公倍数等于两个数的乘积除以最大公约数（证明过程略）。</strong></p>\n",
            "tags": []
        }
    ]
}