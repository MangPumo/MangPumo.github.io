{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "漏洞不在机器，漏洞在人",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/",
            "title": "C语言_前缀和、差分算法",
            "date_published": "2022-10-19T14:06:05.000Z",
            "content_html": "<h1 id=\"前缀和算法\"><a class=\"anchor\" href=\"#前缀和算法\">#</a> 前缀和算法</h1>\n<h2 id=\"关于前缀和\"><a class=\"anchor\" href=\"#关于前缀和\">#</a> 关于前缀和</h2>\n<p><strong>前缀和就是从位置 1 到位置 i 这个区间内的所有的数字之和。</strong><br>\n<img data-src=\"https://img-blog.csdnimg.cn/20200716164747656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTE0NTU4,size_16,color_FFFFFF,t_70\" alt></p>\n<h2 id=\"一维数组求前缀和\"><a class=\"anchor\" href=\"#一维数组求前缀和\">#</a> 一维数组求前缀和</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\"> scanf(&quot;%d&quot;, &amp;a[i]);       //读入n个数</span><br><span class=\"line\">for (int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\"> s[i] = s[i - 1] + a[i];   //处理前缀和</span><br></pre></td></tr></table></figure><br>\n 如上图。<br>\n注：数组最好定义为全局变量。</p>\n<h2 id=\"二维数组求前缀和\"><a class=\"anchor\" href=\"#二维数组求前缀和\">#</a> 二维数组求前缀和</h2>\n<h3 id=\"求sij\"><a class=\"anchor\" href=\"#求sij\">#</a> 求 S [i,j]</h3>\n<p>如图，用 i 表示行，j 表示列：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210418215020780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center\" alt></p>\n<p>根据图片分析，求 S [i,j]：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[i, j] = s[i, j - 1] + s[i - 1, j] - s[i - 1, j - 1] + a[i, j];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"求x1y1x2y2子矩阵的和\"><a class=\"anchor\" href=\"#求x1y1x2y2子矩阵的和\">#</a> 求（X1,Y1),(X2,Y2) 子矩阵的和</h3>\n<p>如图：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210418221844586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center\" alt><br>\n根据图分析：求 s [x1 ~ x2, y1 ~ y2]:<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[x1 ~ x2, y1 ~ y2] = s[x2,y2] - s[x2, y1-  1] - s[x1 - 1, y2] + s[x1 - 1,y1 - 1];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前缀和算法优点\"><a class=\"anchor\" href=\"#前缀和算法优点\">#</a> 前缀和算法优点：</h2>\n<p>对二维矩阵，求子矩阵 (n*m) 的和。暴力法就是两重循环，累加求和。</p>\n<p>每次查询花费 O (n*m) O (n∗m) 时间，n 和 m 是子矩阵的行数和列数。查询的代价有点大。</p>\n<h1 id=\"差分算法\"><a class=\"anchor\" href=\"#差分算法\">#</a> 差分算法</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>差分思想和前缀和是相反的。</p>\n<h2 id=\"一维差分\"><a class=\"anchor\" href=\"#一维差分\">#</a> 一维差分</h2>\n<p>首先我们先定义数组 a, 其中 a [1],a [2]…a [n] 作为前缀和。</p>\n<p>然后构造数组 b，b [1],b [2]…b [n] 为差分数组。其中通过差分数组的前缀和来表示 a 数组，即 a [n] = b [1] + b [2]+…+b [n]。</p>\n<p>一维差分数组的构造也很简单，即 a [1] = b [1], b [2] = a [2] - a [1], b [n] = a [n] - a [n-1]；</p>\n<p>注意：刚开始时可以初始化数组 a,b 全部为 0，输入 a 数组后；在构造时，只需要将 b [1] 看做在 [1, 1] 区间上加上 a [1]; b [2] 看作在 [2, 2] 区间上加上 a [2]；<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对于b[1]:</span><br><span class=\"line\">b[1] = 0 + a[1];</span><br><span class=\"line\">b[2] = 0 - a[1]; //最终：b[1] = a[1]</span><br><span class=\"line\">//对于b[2]:</span><br><span class=\"line\">b[2] = b[2] + a[2]; //最终：b[2] = a[2] - a[1]</span><br><span class=\"line\">b[3] = b[3] - b[2];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h2>\n<p>简化运算，节约时间，降低时间复杂度。</p>\n<p>由于 a [n] = b [1] + b [2]+…+b [n]，因此只需要将 b [l] = b [l] + c 即可，这样 l 之后的数字会依次加上常数 c，而在 b [r] 处，将 b [r+1] = b [r+1] - c ，这样 r 之后的数组又会恢复原值，仅需要处理这两个边界的差分数组即可，时间复杂度大大降低。<br>\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/5adc7d0e4bf14d24eef7f635232a9dc7.png\" alt></p>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p><em><strong>不常用，加个例题理解一下</strong></em></p>\n<p>输入一个长度为 n 的整数序列。<br>\n接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。<br>\n请你输出进行完所有操作后的序列。<br>\n<strong>输入格式</strong><br>\n第一行包含两个整数 n 和 m。<br>\n第二行包含 n 个整数，表示整数序列。<br>\n接下来 m 行，每行包含三个整数 l，r，c 表示一个操作。<br>\n<strong>输出格式</strong><br>\n共一行，包含 n 个整数，表示最终序列。<br>\n<strong>数据范围</strong><br>\n 1 ≤ n , m ≤ 100000,<br>\n1 ≤ l ≤ r ≤ n,<br>\n−1000 ≤ c ≤ 1000,<br>\n−1000 ≤ 整数序列中元素的值 ≤ 1000<br>\n<strong> 输入样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 3</span><br><span class=\"line\">1 2 2 1 2 1</span><br><span class=\"line\">1 3 1</span><br><span class=\"line\">3 5 1</span><br><span class=\"line\">1 6 1</span><br></pre></td></tr></table></figure><br>\n<strong> 输出样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 5 3 4 2</span><br></pre></td></tr></table></figure><br>\n<strong> 代码模板</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N = 100010;</span><br><span class=\"line\"></span><br><span class=\"line\">int m,n;</span><br><span class=\"line\">int a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(int l, int r , int c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[l] += c;</span><br><span class=\"line\">    b[r+1] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;,&amp;n, &amp;m);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">    //插入的方式形成b[i]</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) insert(i, i, a[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int l, r ,c;</span><br><span class=\"line\">        scanf(&quot;%d%d%d&quot;,&amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        insert(l, r, c);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) b[i] += b[i - 1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, b[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二维差分\"><a class=\"anchor\" href=\"#二维差分\">#</a> 二维差分</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/a03bb33ac1482c46c1351ed6381a039c.png\" alt><br>\n基本思路：给其中的一个子矩阵加上一个值。矩阵以外的减去一个值即可。<br>\n可列公式表示各个范围如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[x1] [y1] += C;  </span><br><span class=\"line\">b[x1] [y2+1] −= C;  </span><br><span class=\"line\">b[x2+1] [y1] += C;  </span><br><span class=\"line\">b[x2+1] [y2+1] += C;  </span><br></pre></td></tr></table></figure><br>\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/cba504522f15428b8149054d363f3f18.png\" alt><br>\n 由上面范围，可以求得最终要算的小正方形的面积公式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S=b[x1] [y1] − b[x1] [y2​+1] − b[x2+1] [y1] + b[x2+1] [y2+1]</span><br></pre></td></tr></table></figure><br>\n 矩阵的初始化；<br>\n假定 a [i][j] = 0,b [i][j] =0, 然后读取数组 a，只需要对 b 进行插入即可。b [i][j] 相当于从 (i,j) 到 (i,j) 插入一个 a [i][j] 形成的。<br>\n最后求 a [i][j] 只需要求解 b [i][j] 的前缀和即可。</p>\n<h2 id=\"例题差分矩阵\"><a class=\"anchor\" href=\"#例题差分矩阵\">#</a> 例题：差分矩阵</h2>\n<p><em><strong>老样子，不常用，上个题</strong></em></p>\n<p>输入一个 n 行 m 列的整数矩阵，<br>\n再输入 q 个操作，<br>\n每个操作包含五个整数 x1,y1,x2,y2,c，<br>\n其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。<br>\n每个操作都要将选中的子矩阵中的每个元素的值加上 c。<br>\n请你将进行完所有操作后的矩阵输出。<br>\n<strong>输入格式</strong></p>\n<p>第一行包含整数 n,m,q<br>\n 接下来 n 行，每行包含 m 个整数，表示整数矩阵。<br>\n接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c 表示一个操作。<br>\n<strong>输出格式</strong><br>\n共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。<br>\n<strong>数据范围</strong><br>\n 1 ≤ n , m ≤ 1000<br>\n1 ≤ q ≤ 100000<br>\n1 ≤ x 1 ≤ x 2 ≤n<br>\n1 ≤ y 1 ≤ y 2 ≤ m<br>\n−1000 ≤ c ≤ 1000<br>\n−1000 ≤ 矩阵内元素的值 ≤ 1000<br>\n<strong> 输入样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 3</span><br><span class=\"line\">1 2 2 1</span><br><span class=\"line\">3 2 2 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 2 2 1</span><br><span class=\"line\">1 3 2 3 2</span><br><span class=\"line\">3 1 3 4 1</span><br></pre></td></tr></table></figure><br>\n<strong> 输出样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 4 1</span><br><span class=\"line\">4 3 4 1</span><br><span class=\"line\">2 2 2 2</span><br></pre></td></tr></table></figure><br>\n<strong> 代码模板</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int N =1010;</span><br><span class=\"line\">int a[N][N],b[N][N];</span><br><span class=\"line\">int n, m ,q;</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(int x1, int y1, int x2, int y2, int c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x2 + 1][y1] -= c;</span><br><span class=\"line\">    b[x1][y2 +1] -= c;</span><br><span class=\"line\">    b[x2 +1][y2+1] +=c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">        for(int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">            scanf(&quot;%d&quot;, &amp;a[i][j]);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">        for(int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">            insert(i, j, i, j, a[i][j]);</span><br><span class=\"line\">    while( q-- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int x1, x2, y1, y2, c;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1&gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">        insert(x1,y1, x2, y2, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //求前缀和</span><br><span class=\"line\">    for(int i = 1; i&lt;=n; i++)</span><br><span class=\"line\">        for(int j = 1; j&lt;= m; j++)</span><br><span class=\"line\">        b[i][j] += b[i-1][j] +b[i][j-1] -b[i-1][j-1];</span><br><span class=\"line\">    for(int i = 1; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for(int j = 1; j&lt;= m; j++)</span><br><span class=\"line\">        printf(&quot;%d &quot;, b[i][j]);</span><br><span class=\"line\">        puts(&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>前缀和重要，差分有个印象。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "title": "C语言_排序算法_选择排序法",
            "date_published": "2022-10-19T04:41:26.000Z",
            "content_html": "<h1 id=\"c语言选择排序法\"><a class=\"anchor\" href=\"#c语言选择排序法\">#</a> C 语言选择排序法</h1>\n<h2 id=\"原理技术要点\"><a class=\"anchor\" href=\"#原理技术要点\">#</a> 原理 &amp; 技术要点</h2>\n<p>选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到 a [0] 中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到 a [1] 中，a [1] 中的数字仅大于 a [0]，依此类推，即可实现排序。</p>\n<h2 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h2>\n<p>1. 选择排序一共有 数组大小 - 1 轮排序<br>\n 2. 每一轮排序，又是一个循环<br>\n 3. 先假定当前这个数是最小数<br>\n 4. 然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标<br>\n 5. 当遍历到数组的最后时，就得到本轮最小数和下标<br>\n 6. 交换</p>\n<h2 id=\"存储状态演示\"><a class=\"anchor\" href=\"#存储状态演示\">#</a> 存储状态演示</h2>\n<p>*<strong> 黑体为无序区，其余为有序区</strong><br>\n初始序列：<strong>2 4 7 1 6 9 8 3 0 5</strong></p>\n<p>第 1 趟：2 与 0 交换：0 <strong>4 7 1 6 9 8 3 2 5</strong></p>\n<p>第 2 趟：0 不动，4 与 1 交换：0 1 <strong>7 4 6 9 8 3 2 5</strong></p>\n<p>第 3 趟：7 与 2 交换：0 1 2 <strong>4 6 9 8 3 7 5</strong></p>\n<p>第 4 趟：4 与 3 交换：0 1 2 3 <strong>6 9 8 4 7 5</strong></p>\n<p>第 5 趟：6 与 4 交换：0 1 2 3 4 <strong>9 8 6 7 5</strong></p>\n<p>第 6 趟：9 与 5 交换：0 1 2 3 4 5 <strong>8 6 7 9</strong></p>\n<p>第 7 趟：8 与 6 交换：0 1 2 3 4 5 6 <strong>8 7 9</strong></p>\n<p>第 8 趟：8 与 7 交换：0 1 2 3 4 5 6 7 <strong>8 9</strong></p>\n<p>第 9 趟：排序完成</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j,t,a[11];    //定义变量及数组为基本整型</span><br><span class=\"line\">    for(i=1;i&lt;11;i++)</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;a[i]);    //从键盘中输入要排序的10个数字</span><br><span class=\"line\">    for(i=1;i&lt;=9;i++)</span><br><span class=\"line\">        for (j=i+1;j&lt;=10;j++)</span><br><span class=\"line\">            if(a[i]&gt;a[j])    //如果前一个数比后一个数大，则利用中间变量t实现两值互换</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t=a[i];</span><br><span class=\"line\">                a[i]=a[j];</span><br><span class=\"line\">                a[j]=t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    for(i=1;i&lt;=10;i++)</span><br><span class=\"line\">        printf(&quot;%5d&quot;, a[i]);    //输出排序后的数组</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h2>\n<p>input:<br>\n526 36 2 369 56 45 78 92 125 52<br>\noutput:<br>\n2 36 45 52 56 78 92 125 369 526</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "title": "C语言_辗转相除法两种方式两个用处",
            "date_published": "2022-10-19T02:17:51.000Z",
            "content_html": "<h1 id=\"辗转相除法\"><a class=\"anchor\" href=\"#辗转相除法\">#</a> 辗转相除法</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>辗转相除法，被称为欧几里得（Euclidean）算法，是求最大公约数的算法。</p>\n<h2 id=\"证明\"><a class=\"anchor\" href=\"#证明\">#</a> 证明</h2>\n<p>设 b = aq + r， (a,b) 为 a，b 的最大公约数。<br>\n则 a % (a,b) = 0; b % (a,b) = 0,<br>\n 因为 (a 和 b 的约数) % (a,b) = 0,<br>\n 所以 (b - aq) % (a,b) = 0<br>\n 即 r % (a,b) = 0<br>\n 因为 a % (a,b) = 0, r % (a,b) = 0<br>\n 所以 (a,r) % (a,b) = 0 (最大公约数一定被公约数整除）<br>\n又因为 a % (a,r) = 0, r % (a,r) = 0, b = aq+r<br>\n 所以 (aq + r) % (a,r) = 0<br>\n 即 b % （a,r) = 0<br>\n 因为 a % （a,r) = 0<br>\nb % (a,r) = 0<br>\n 所以<br>\n (a,b) % (a,r) = 0<br>\n 所以<br>\n (a,b) = (a,r)</p>\n<p><strong>证明过程来自百度，大体了解即可！</strong></p>\n<h2 id=\"具体做法\"><a class=\"anchor\" href=\"#具体做法\">#</a> 具体做法</h2>\n<p>用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是 0 为止。最后的除数即为两个数的最大公约数。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long long int GCD(long long int n,long long int m)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long int t;</span><br><span class=\"line\">    if(n&lt;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t=n,n=m,m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(t=n%m,t&gt;0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=m;</span><br><span class=\"line\">        m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 自写 GCD 函数</strong></p>\n<h2 id=\"进阶实现递归\"><a class=\"anchor\" href=\"#进阶实现递归\">#</a> 进阶实现（递归）</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int GCD(int x,int y)//公因数 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(y==0)</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">    else </span><br><span class=\"line\">\treturn GCD(y,x%y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 通过递归精简代码</strong></p>\n<h2 id=\"辗转相除法求最小公倍数\"><a class=\"anchor\" href=\"#辗转相除法求最小公倍数\">#</a> 辗转相除法求最小公倍数</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = a*b/m;</span><br></pre></td></tr></table></figure><br>\n 其中 ans 为最小公倍数，a,b 为输入的两个数，m 为两个数字的最大公因数。<br>\n<strong>原理很简单，两个数的最小公倍数等于两个数的乘积除以最大公约数（证明过程略）。</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/",
            "url": "https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/",
            "title": "CTF_密码学方向常用密码目录",
            "date_published": "2022-10-17T05:58:51.000Z",
            "content_html": "<h1 id=\"ctf密码学\"><a class=\"anchor\" href=\"#ctf密码学\">#</a> CTF 密码学</h1>\n<p><strong>本篇博客将列举 CTF 中常用密码供参考</strong></p>\n<blockquote>\n<p>常见编码</p>\n<blockquote>\n<p>ASCII 编码<br>\n shellcode 编码<br>\n Quoted-printable 编码<br>\n XXencode 编码<br>\n URL 编码<br>\n Unicode 编码<br>\n Escape/Unescape 编码<br>\n HTML 实体编码<br>\n MD5 算法<br>\n敲击码（Tap code)<br>\n 摩尔斯电码（Morse Code)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>换位加密</p>\n<blockquote>\n<p>栅栏密码（Rail-fence Cipher)<br>\n 曲路密码（Curve Cipher)<br>\n 列移位密码（Columnar Transposition Cipher)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>替换加密</p>\n<blockquote>\n<p>埃特巴什码（Atbash Cipher)<br>\n 凯撒密码（Caesar Cipher)<br>\nROT/13/18/47<br>\n 简单换位密码（Simple Substitution Cipher)<br>\n 希尔密码 (Hill Cipher)<br>\n 猪圈密码 (Pigpen Cipher)<br>\n 波利比奥斯方阵密码（Polybius Square Cipher)<br>\n 夏多密码 (曲折加密)<br>\n 普莱菲尔密码（Playfair Cipher)<br>\n 维吉尼亚密码（Vigenere Cipher)<br>\n 自动密钥密码 (Autokey Cipher)<br>\n 博福特密码 (Beaufort Cipher)<br>\n 滚动密钥密码（Running Key Cipher)<br>\n Porta 密码 (Porta Cipher)<br>\n 同音替换密码（Homophoic Substitution Cipher)<br>\n 仿射密码（Affine Cipher)<br>\n 培根密码（Baconian Cipher)<br>\n ADFGX 和 ADFGVX 密码（ADFG/VX Cipher)<br>\n 双密码 (Bifid Cipher)<br>\n 三分密码（Trifid Cipher)<br>\n 四方密码（Four-Square Cipher)<br>\n 棋盘密码（Checkerboard Cipher)<br>\n 跨棋盘密码（Straddle Checkerboard Cipher)<br>\n 分组摩尔斯替换密码（Fractionated Morse Cipher)<br>\n Bazeries 密码（Bazeries Cipher)<br>\n Digrafid 密码（Digrafid Cipher)<br>\n 格朗普雷密码（Grandpre Cipher)<br>\n 盲文密码（Blind Cipher)<br>\n 键盘密码（Keyboard Cipher)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>代码混淆加密</p>\n<blockquote>\n<p>asp 混淆加密<br>\n php 混淆加密<br>\n css/js 混淆加密<br>\n VBScript.Encode 混淆加密<br>\n ppencode<br>\nrrencode<br>\njjencode/aaencode<br>\nJSfuck<br>\njother<br>\nbranfuck<br>\nuuencode</p>\n</blockquote>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/16/hello-world/",
            "url": "https://mangpumo.github.io/2022/10/16/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-16T01:57:15.958Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}