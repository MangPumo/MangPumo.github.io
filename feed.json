{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "翩若浮云着霓裳，落幕鬓边皆染霜",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2023/01/12/CPP%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "url": "https://mangpumo.github.io/2023/01/12/CPP%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "title": "CPP并查集",
            "date_published": "2023-01-11T16:44:42.000Z",
            "content_html": "<h1 id=\"c并查集\"><a class=\"anchor\" href=\"#c并查集\">#</a> C++ 并查集</h1>\n<h2 id=\"1并查集简介及构成\"><a class=\"anchor\" href=\"#1并查集简介及构成\">#</a> 1. 并查集简介及构成：</h2>\n<p>并查集是一种树型的数据结构，用于处理一些不相交集合的合并及查询问题。合并及查询即代表 &quot;并&quot; 和 &quot;查&quot;。</p>\n<p>并查集由一个整数数组 parent []，两个函数 find 和 connect 构成。</p>\n<p>parent [] 数组记录每一个元素的前驱节点是什么，find 用于查找指定元素属于哪个集合 (表现形式一般为查找该元素的根节点)，connect 用于连接两个集合 (表现形式一般为根节点不一样的两个元素)。</p>\n<p>构建并查集的命名可以和上述不同。比如 parent 可以根据实际意义改为 father,root 等等。find 一般不需要修改名称，因为在几乎所有的场景这个函数都代表查找的意思。connect 也可以叫 union 等等。</p>\n<p>并查集的主要作用是求连通分支数，比如无向图有多少连通分支，图中 A 和 B 两个顶点是否连通等。</p>\n<h2 id=\"2构建并查集\"><a class=\"anchor\" href=\"#2构建并查集\">#</a> 2. 构建并查集：</h2>\n<h3 id=\"21-数组初始化\"><a class=\"anchor\" href=\"#21-数组初始化\">#</a> 2.1 数组初始化：</h3>\n<p>一般情况数组 parent 初始化时将所有元素设为自己，但是也有特殊情况。比如各种岛屿包围的问题。具体情况要具体看。</p>\n<p>对于数据是 int 型元素构建并查集可以使用数组，但是有时我们要为字符串等其它类型元素构建并查集，因此很多时候需要使用哈希，即 unordered_map 来做数组存储。</p>\n<h3 id=\"22-find函数的构建\"><a class=\"anchor\" href=\"#22-find函数的构建\">#</a> 2.2 find 函数的构建：</h3>\n<p>find 作用是查找元素最前面的前驱元素。代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int find(int&amp; node,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int q=node;</span><br><span class=\"line\">    while(parent[q]!=q)&#123;</span><br><span class=\"line\">        q=parent[q];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码还是很好理解的。此时 find 复杂度最坏为 O (n)，平均为 O (logN)。</p>\n<h2 id=\"23-connect函数的构建\"><a class=\"anchor\" href=\"#23-connect函数的构建\">#</a> 2.3 connect 函数的构建：</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void connect(int&amp; node1,int&amp; node2,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int root1=find(node1,parent);</span><br><span class=\"line\">    int root2=find(node2,parent);</span><br><span class=\"line\">    if(root1==root2)&#123;</span><br><span class=\"line\">        //两个元素属于同一顶点，已连通，无需作处理</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //两个元素不属于同一顶点，那么其中一个顶点的前驱节点变为另一个前驱节点。</span><br><span class=\"line\">    //一般情况下parent[root1]=root2和parent[root2]=root1没有太大区别，但是</span><br><span class=\"line\">    //有些情况可能只能parent[root1]=root2或parent[root2]=root1</span><br><span class=\"line\">    parent[root1]=root2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>connect 复杂度和 find 一样。因为调用了 2 次 find。</p>\n<h3 id=\"24-完整代码及举例\"><a class=\"anchor\" href=\"#24-完整代码及举例\">#</a> 2.4 完整代码及举例：</h3>\n<p>举一个简单的例子，参照下题：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 给定n和vector&lt;vector&lt;int&gt;&gt; array,n代表有n个顶点，array每个元素均是长度为2的数组，</span><br><span class=\"line\">代表array[i][0]与array[1]连通。</span><br><span class=\"line\">如下：</span><br><span class=\"line\">3，&#123;&#123;1，2&#125;，&#123;0，1&#125;&#125;</span><br><span class=\"line\">代表3个顶点，1和2连通，0和1连通</span><br></pre></td></tr></table></figure></p>\n<p>构造完整并查集如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\">//这里省去n和array的初始化，如果是标准输入需要在主函数进行多组输入操作。</span><br><span class=\"line\">//如果是力扣的模式就无需这一步</span><br><span class=\"line\">int n;</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; array;</span><br><span class=\"line\"> </span><br><span class=\"line\">int find(int&amp; node,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int q=node;</span><br><span class=\"line\">    while(parent[q]!=q)&#123;</span><br><span class=\"line\">        q=parent[q];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void connect(int&amp; node1,int&amp; node2,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int root1=find(node1,parent);</span><br><span class=\"line\">    int root2=find(node2,parent);</span><br><span class=\"line\">    if(root1==root2)&#123;</span><br><span class=\"line\">        //两个元素属于同一顶点，已连通，无需作处理</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //两个元素不属于同一顶点，那么其中一个顶点的前驱节点变为另一个前驱节点。</span><br><span class=\"line\">    //一般情况下parent[root1]=root2和parent[root2]=root1没有太大区别，但是</span><br><span class=\"line\">    //有些情况可能只能parent[root1]=root2或parent[root2]=root1</span><br><span class=\"line\">    parent[root1]=root2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    vector&lt;int&gt; parent(n,0);</span><br><span class=\"line\">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">        //用自己初始化parent</span><br><span class=\"line\">        parent[n]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">        connect(array[i][0],array[i][1],parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //构建完并查集的其它操作，如判断是不是同一个集合或者求集合数等等</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式可以构建并查集。我们也可以构建一个类，让 parent 作成员变量，这样 find 和 connect 就不需要最后一个参数了。</p>\n<p>这种方式复杂度比较高，每次 connect 都需要平均 O (logN) 的复杂度。我们可以尝试优化 connect 的效率。</p>\n<h2 id=\"3优化\"><a class=\"anchor\" href=\"#3优化\">#</a> 3. 优化：</h2>\n<p>优化一般有两种方式，路径压缩和按秩合并。</p>\n<h3 id=\"31-路径压缩\"><a class=\"anchor\" href=\"#31-路径压缩\">#</a> 3.1 路径压缩：</h3>\n<p>路径压缩是压缩 find 函数的时间，它的核心思想是在寻找根节点后递归的把所有中间节点的前驱节点改为根节点，代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int find(int&amp; node,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    if(parent[node]!=node)&#123;</span><br><span class=\"line\">        parent[node]=find(parent[node],parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return parent[node];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式可以一定程度压缩 find 函数，使得第二次查找起复杂度均为 1，直到根节点下次更新。不过第一次的复杂度还是 n。</p>\n<p>单独使用路径压缩算法，每次 connect 的平均时间复杂度为 O (α(n))，最坏为 O (logN)。</p>\n<p>α(n) 为阿克曼函数的反函数，基本可以认为是常数，即便 n 取已知宇宙中包含的原子总数，α(n) 也不会超过 5，因此 α(n) 复杂度基本可以认为是 O (1)。</p>\n<h3 id=\"32-按秩合并\"><a class=\"anchor\" href=\"#32-按秩合并\">#</a> 3.2 按秩合并:</h3>\n<p>按秩合并主要处理 connect 函数。它的原理是先建立一个 parentSize 数组，parentSize [i] 表示以 i 为顶点的树的节点数或高度。我习惯使用高度。</p>\n<p>代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void connect(int&amp; node1,int&amp; node2,vector&lt;int&gt;&amp; parent,vector&lt;int&gt;&amp; parentSize)&#123;</span><br><span class=\"line\">    int root1=find(node1,parent);</span><br><span class=\"line\">    int root2=find(node2,parent);</span><br><span class=\"line\">    if(root1==root2)&#123;</span><br><span class=\"line\">        //两个元素属于同一顶点，已连通，无需作处理</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //两个元素不属于同一顶点，将高度低的根节点指向为高度高的</span><br><span class=\"line\">    if(parentSize[root1]&lt;parentSize[root2])&#123;</span><br><span class=\"line\">        parent[root1]=root2;</span><br><span class=\"line\">        parentSize[root2]=max(parentSize[root2],parentSize[root1]+1);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent[root2]=root1;</span><br><span class=\"line\">    parentSize[root1]=max(parentSize[root1],parentSize[root2]+1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>单独这种方式最坏复杂度和平均复杂度均为 O (logN).</p>\n<h3 id=\"33-按秩合并和路径压缩结合\"><a class=\"anchor\" href=\"#33-按秩合并和路径压缩结合\">#</a> 3.3 按秩合并和路径压缩结合</h3>\n<p>我们可以在两个函数分别使用路径压缩和按秩合并，联合使用的最好和最坏复杂度均为 O (α(n))。</p>\n<h2 id=\"4例题\"><a class=\"anchor\" href=\"#4例题\">#</a> 4. 例题：</h2>\n<p>在力扣中我找到的最适合并查集的是第 547 题：力扣</p>\n<p>这道题其实不能完全体现并查集的优势，因为使用 DFS/BFS 的复杂度是 n<sup>2，而并查集的复杂度是 α(n)*n</sup>2。如果将题目改为给出任意两点判断是否连通并查集优势就体现出来了。</p>\n<p>解题代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int find(int&amp; num,vector&lt;int&gt;&amp; father)&#123;</span><br><span class=\"line\">        if(father[num]!=num)&#123;</span><br><span class=\"line\">            father[num]=find(father[num],father);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return father[num];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void connect(int&amp; num1,int&amp; num2,vector&lt;int&gt;&amp; father,vector&lt;int&gt;&amp; fatherSize)&#123;</span><br><span class=\"line\">        int root1=find(num1,father);</span><br><span class=\"line\">        int root2=find(num2,father);</span><br><span class=\"line\">        if(root1==root2)&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(fatherSize[root1]&lt;fatherSize[root2])&#123;</span><br><span class=\"line\">            father[root1]=root2;</span><br><span class=\"line\">            fatherSize[root2]=max(fatherSize[root2],fatherSize[root1]+1);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        father[root2]=root1;</span><br><span class=\"line\">        fatherSize[root1]=max(fatherSize[root1],fatherSize[root2]+1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) &#123;</span><br><span class=\"line\">        int len=isConnected.size();</span><br><span class=\"line\">        vector&lt;int&gt; father(len);</span><br><span class=\"line\">        vector&lt;int&gt; fatherSize(len,1);</span><br><span class=\"line\">        int i(0),j(0),t(0),n(len);</span><br><span class=\"line\">        for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">            father[i]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">            for(j=i+1;j&lt;len;j++)&#123;</span><br><span class=\"line\">                if(isConnected[i][j])&#123;</span><br><span class=\"line\">                    connect(i,j,father,fatherSize);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">            if(father[i]!=i)&#123;</span><br><span class=\"line\">                n-=1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/CPP%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://mangpumo.github.io/2023/01/12/CPP%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "CPP结构体",
            "date_published": "2023-01-11T16:26:29.000Z",
            "content_html": "<h1 id=\"c-结构体struct\"><a class=\"anchor\" href=\"#c-结构体struct\">#</a> C++ 结构体（struct）</h1>\n<h2 id=\"一-定义与声明\"><a class=\"anchor\" href=\"#一-定义与声明\">#</a> 一、定义与声明</h2>\n<h3 id=\"1-先定义结构体类型再单独进行变量定义\"><a class=\"anchor\" href=\"#1-先定义结构体类型再单独进行变量定义\">#</a> 1. 先定义结构体类型再单独进行变量定义</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">struct Student Stu;</span><br><span class=\"line\">struct Student StuArray[10];</span><br><span class=\"line\">struct Student *pStru;</span><br></pre></td></tr></table></figure></p>\n<p>结构体类型是 struct Student，因此，struct 和 Student 都不能省略。但实际上，我用 codeblocks 运行时，下面变量的定义，不加 struct 也是可以的。</p>\n<h3 id=\"2-紧跟在结构体类型说明之后进行定义\"><a class=\"anchor\" href=\"#2-紧跟在结构体类型说明之后进行定义\">#</a> 2. 紧跟在结构体类型说明之后进行定义</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;Stu,StuArray[10],*pStu;</span><br></pre></td></tr></table></figure></p>\n<p>这种情况时，后面还可以再定义结构体变量。</p>\n<h3 id=\"3-在说明一个无名结构体变量的同时直接进行定义\"><a class=\"anchor\" href=\"#3-在说明一个无名结构体变量的同时直接进行定义\">#</a> 3. 在说明一个无名结构体变量的同时直接进行定义</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;Stu,Stu[10],*pStu;</span><br></pre></td></tr></table></figure></p>\n<p>这种情况下，之后不能再定义其他变量。</p>\n<h3 id=\"4-使用typedef说明一个结构体变量之后再用新类名来定义变量\"><a class=\"anchor\" href=\"#4-使用typedef说明一个结构体变量之后再用新类名来定义变量\">#</a> 4. 使用 typedef 说明一个结构体变量之后再用新类名来定义变量</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;student;</span><br><span class=\"line\">Student Stu,Stu[10],*pStu;</span><br></pre></td></tr></table></figure></p>\n<p>Student 是一个具体的结构体类型，唯一标识。这里不用再加 struct</p>\n<h3 id=\"5-使用new动态创建结构体变量\"><a class=\"anchor\" href=\"#5-使用new动态创建结构体变量\">#</a> 5. 使用 new 动态创建结构体变量</h3>\n<p>使用 new 动态创建结构体变量时，必须是结构体指针类型。访问时，普通结构体变量使用使用成员变量访问符 &quot;.&quot;，指针类型的结构体变量使用的成员变量访问符为 &quot;-&gt;&quot;。</p>\n<p><strong>注意：动态创建结构体变量使用后勿忘 delete。</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;Stu,StuArray[10],*pStu;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Student *s = new Student();  // 或者Student *s = new Student;</span><br><span class=\"line\">    s-&gt;Code = 1;</span><br><span class=\"line\">    cout&lt;&lt;s-&gt;Code;</span><br><span class=\"line\"></span><br><span class=\"line\">    delete s;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二-结构体构造函数\"><a class=\"anchor\" href=\"#二-结构体构造函数\">#</a> 二、结构体构造函数</h2>\n<h3 id=\"三种结构体初始化方法\"><a class=\"anchor\" href=\"#三种结构体初始化方法\">#</a> 三种结构体初始化方法：</h3>\n<ul>\n<li>1. 利用结构体自带的默认构造函数</li>\n<li>2. 利用带参数的构造函数</li>\n<li>3. 利用默认无参的构造函数</li>\n</ul>\n<p><strong>要点</strong>：什么都不写就是使用的结构体自带的默认构造函数，如果自己重写了带参数的构造函数，初始化结构体时如果不传入参数会出现错误。在建立结构体数组时，如果只写了带参数的构造函数将会出现数组无法初始化的错误！！！下面是一个比较安全的带构造的结构体示例<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int data;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    char x;</span><br><span class=\"line\">    //注意构造函数最后这里没有分号哦！</span><br><span class=\"line\">  node() :x(), str(), data()&#123;&#125; //无参数的构造函数数组初始化时调用</span><br><span class=\"line\">  node(int a, string b, char c) :data(a), str(b), x(c)&#123;&#125;//有参构造</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//结构体数组声明和定义</span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int data;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    char x;</span><br><span class=\"line\">    //注意构造函数最后这里没有分号哦！</span><br><span class=\"line\">  node() :x(), str(), data()&#123;&#125; //无参数的构造函数数组初始化时调用</span><br><span class=\"line\">  node(int a, string b, char c) :data(a), str(b), x(c)&#123;&#125;//初始化列表进行有参构造</span><br><span class=\"line\">&#125;N[10];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三-结构体嵌套\"><a class=\"anchor\" href=\"#三-结构体嵌套\">#</a> 三、结构体嵌套</h2>\n<p>正如一个类的对象可以嵌套在另一个类中一样，一个结构体的实例也可以嵌套在另一个结构体中。例如，来看以下声明：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Costs</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double wholesale;</span><br><span class=\"line\">    double retail;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Item</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string partNum;</span><br><span class=\"line\">    string description;</span><br><span class=\"line\">    Costs pricing;</span><br><span class=\"line\">&#125;widget;</span><br></pre></td></tr></table></figure></p>\n<p>Costs 结构体有两个 double 类型成员，wholesale 和 retail。Item 结构体有 3 个成员，前 2 个是 partNum 和 description，它们都是 string 对象。第 3 个是 pricing，它是一个嵌套的 Costs 结构体。如果定义了一个名为 widget 的 Item 结构体，则图 3 说明了其成员。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-dece9e95d9fdc33d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp\" alt></p>\n<p>嵌套结构体访问的方式：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">widget.partnum = &quot;123A&quot;;</span><br><span class=\"line\">widget.description = &quot;iron widget&quot;;</span><br><span class=\"line\">widget.pricing.wholesale = 100.0;</span><br><span class=\"line\">widget.pricing.retail = 150.0;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四-结构体赋值与访问\"><a class=\"anchor\" href=\"#四-结构体赋值与访问\">#</a> 四、结构体赋值与访问</h2>\n<ul>\n<li>赋值</li>\n</ul>\n<p>初始化结构体变量成员的最简单的方法是使用初始化列表。初始化列表是用于初始化一组内存位置的值列表。列表中的项目用逗号分隔并用大括号括起来。<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Date</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int day, month, year;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>该声明定义 birthday 是一个 Date 结构体的变量，大括号内的值按顺序分配给其成员。所以 birthday 的数据成员已初始化，如图 2 所示。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-20ccb4470e86cf05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/250/format/webp\" alt></p>\n<p>也可以仅初始化结构体变量的部分成员。例如，如果仅知道要存储的生日是 8 月 23 日， 但不知道年份，则可以按以下方式定义和初始化变量：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date birthday = &#123;23,8&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里只有 day 和 month 成员被初始化，year 成员未初始化。但是，如果某个结构成员未被初始化，则所有跟在它后面的成员都需要保留为未初始化。使用初始化列表时，C++ 不提供跳过成员的方法。以下语句试图跳过 month 成员的初始化。这是不合法的。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date birthday = &#123;23,1983&#125;; //非法</span><br></pre></td></tr></table></figure></p>\n<p>还有一点很重要，不能在结构体声明中初始化结构体成员，因为结构体声明只是创建一个新的数据类型，还不存在这种类型的变量。例如，以下声明是非法的：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //非法结构体声明</span><br><span class=\"line\">struct Date</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int day = 23,</span><br><span class=\"line\">    month = 8,</span><br><span class=\"line\">    year = 1983;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure></p>\n<p>因为结构体声明只声明一个结构体 “看起来是什么样子的”，所以不会在内存中创建成员变量。只有通过定义该结构体类型的变量来实例化结构体，才有地方存储初始值。</p>\n<ul>\n<li>访问<br>\n定义结构体：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct MyTree&#123;</span><br><span class=\"line\">    MyTree*left;</span><br><span class=\"line\">    MyTree*right;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    MyTree()&#123;&#125;</span><br><span class=\"line\">    MyTree(int val):left(NULL),right(NULL),val(val)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一般结构体变量的访问方式：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyTree t;</span><br><span class=\"line\">    t.val = 1;</span><br><span class=\"line\">    cout&lt;&lt;t.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可见，结构体中的变量，可以直接通过 &quot;.&quot; 操作符来访问。</p>\n<p>而对于结构体指针而言：必须通过 &quot;-&gt;&quot; 符号来访问指针所指结构体的变量。<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyTree *t1 = new MyTree(1);</span><br><span class=\"line\">    MyTree *t2 ;</span><br><span class=\"line\">    t2-&gt;val = 2;</span><br><span class=\"line\">    cout&lt;&lt;t1-&gt;val&lt;&lt;&quot; &quot;&lt;&lt;t2-&gt;val;  //输出：1 2</span><br><span class=\"line\">    t2.val = 3;  //error: request for member &#x27;val&#x27; in &#x27;t2&#x27;, whitch is of pointer type &#x27;MyTree*&#x27; (maybe you meant to use &#x27;-&gt;&#x27; ?)</span><br><span class=\"line\">    cout&lt;&lt;t2.val;  //error: request for member &#x27;val&#x27; in &#x27;t2&#x27;, which is of pointer type &#x27;MyTree*&#x27; (maybe you mean to use &#x27;-&gt;&#x27; ?</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/CPP%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97priority-queue/",
            "url": "https://mangpumo.github.io/2023/01/11/CPP%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97priority-queue/",
            "title": "CPP优先队列priority_queue",
            "date_published": "2023-01-11T14:38:44.000Z",
            "content_html": "<h1 id=\"c优先队列priority_queue用法详解\"><a class=\"anchor\" href=\"#c优先队列priority_queue用法详解\">#</a> c++ 优先队列 (priority_queue) 用法详解</h1>\n<p>既然是队列那么先要包含头文件 #include &lt;queue&gt;, 他和 queue 不同的就在于我们可以自定义其中数据的优先级，让优先级高的排在队列前面，优先出队</p>\n<p>优先队列具有队列的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的</p>\n<p><strong>和队列基本操作相同:</strong></p>\n<ul>\n<li>top 访问队头元素</li>\n<li>empty 队列是否为空</li>\n<li>size 返回队列内元素个数</li>\n<li>push 插入元素到队尾 (并排序)</li>\n<li>emplace 原地构造一个元素并插入队列</li>\n<li>pop 弹出队头元素</li>\n<li>swap 交换内容</li>\n</ul>\n<p>定义：priority_queue&lt;Type, Container,Functional&gt;</p>\n<p>Type 就是数据类型，Container 就是容器类型（Container 必须是用数组实现的容器，比如 vector,deque 等等，但不能用 list。STL 里面默认用的是 vector），Functional 就是比较的方式，当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆<br>\n一般是：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//升序队列</span><br><span class=\"line\">priority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;</span><br><span class=\"line\">//降序队列</span><br><span class=\"line\">priority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;q;</span><br><span class=\"line\"></span><br><span class=\"line\">//greater和less是std实现的两个仿函数（就是使一个类的使用看上去像一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了）</span><br></pre></td></tr></table></figure></p>\n<p>基本类型例子：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //对于基础类型 默认是大顶堆</span><br><span class=\"line\">    priority_queue&lt;int&gt; a; </span><br><span class=\"line\">    //等同于 priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; a;</span><br><span class=\"line\">    </span><br><span class=\"line\">  </span><br><span class=\"line\">    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; c;  //这样就是小顶堆</span><br><span class=\"line\">    priority_queue&lt;string&gt; b;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i = 0; i &lt; 5; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a.push(i);</span><br><span class=\"line\">        c.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (!a.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a.top() &lt;&lt; &#x27; &#x27;;</span><br><span class=\"line\">        a.pop();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (!c.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; c.top() &lt;&lt; &#x27; &#x27;;</span><br><span class=\"line\">        c.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    b.push(&quot;abc&quot;);</span><br><span class=\"line\">    b.push(&quot;abcd&quot;);</span><br><span class=\"line\">    b.push(&quot;cbd&quot;);</span><br><span class=\"line\">    while (!b.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; b.top() &lt;&lt; &#x27; &#x27;;</span><br><span class=\"line\">        b.pop();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 3 2 1 0</span><br><span class=\"line\">0 1 2 3 4</span><br><span class=\"line\">cbd abcd abc</span><br></pre></td></tr></table></figure></p>\n<p>pair 的比较，先比较第一个元素，第一个相等比较第二个<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    priority_queue&lt;pair&lt;int, int&gt; &gt; a;</span><br><span class=\"line\">    pair&lt;int, int&gt; b(1, 2);</span><br><span class=\"line\">    pair&lt;int, int&gt; c(1, 3);</span><br><span class=\"line\">    pair&lt;int, int&gt; d(2, 5);</span><br><span class=\"line\">    a.push(d);</span><br><span class=\"line\">    a.push(c);</span><br><span class=\"line\">    a.push(b);</span><br><span class=\"line\">    while (!a.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a.top().first &lt;&lt; &#x27; &#x27; &lt;&lt; a.top().second &lt;&lt; &#x27;\\n&#x27;;</span><br><span class=\"line\">        a.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 5</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 2</span><br></pre></td></tr></table></figure></p>\n<p>对于自定义类型<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">//方法1</span><br><span class=\"line\">struct tmp1 //运算符重载&lt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x;</span><br><span class=\"line\">    tmp1(int a) &#123;x = a;&#125;</span><br><span class=\"line\">    bool operator&lt;(const tmp1&amp; a) const</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return x &lt; a.x; //大顶堆</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//方法2</span><br><span class=\"line\">struct tmp2 //重写仿函数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    bool operator() (tmp1 a, tmp1 b) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return a.x &lt; b.x; //大顶堆</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    tmp1 a(1);</span><br><span class=\"line\">    tmp1 b(2);</span><br><span class=\"line\">    tmp1 c(3);</span><br><span class=\"line\">    priority_queue&lt;tmp1&gt; d;</span><br><span class=\"line\">    d.push(b);</span><br><span class=\"line\">    d.push(c);</span><br><span class=\"line\">    d.push(a);</span><br><span class=\"line\">    while (!d.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; d.top().x &lt;&lt; &#x27;\\n&#x27;;</span><br><span class=\"line\">        d.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    priority_queue&lt;tmp1, vector&lt;tmp1&gt;, tmp2&gt; f;</span><br><span class=\"line\">    f.push(c);</span><br><span class=\"line\">    f.push(b);</span><br><span class=\"line\">    f.push(a);</span><br><span class=\"line\">    while (!f.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; f.top().x &lt;&lt; &#x27;\\n&#x27;;</span><br><span class=\"line\">        f.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/nessus%E9%AB%98%E7%BA%A7%E6%89%AB%E6%8F%8F/",
            "url": "https://mangpumo.github.io/2023/01/11/nessus%E9%AB%98%E7%BA%A7%E6%89%AB%E6%8F%8F/",
            "title": "nessus高级扫描",
            "date_published": "2023-01-10T21:39:51.000Z",
            "content_html": "<h1 id=\"nessus高级扫描\"><a class=\"anchor\" href=\"#nessus高级扫描\">#</a> nessus 高级扫描</h1>\n<p>1. 启动 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nessus</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2. 进入 nessus 网站，点击【new Scan】</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://kaliip:8834/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2c2ffafb93224ebc93afafe4e60205a6.png\" alt=\"image.png\"></p>\n<p>3. 选择【adVanced Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4b0472b99dad4eeaa167296afbe686f6.png\" alt=\"image.png\"></p>\n<p>4. 输入 Name【高级扫描】，Description【高级扫描】，Targets【需要扫描的 ip】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/fa67076b941a4560931eff0d7e6402dd.png\" alt=\"image.png\"></p>\n<p>5. 点击【 Schedule】</p>\n<p>这里是配置定时任务的，可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/9ddf0e54c7e84387b0f01d53eee31e1c.png\" alt=\"image.png\"></p>\n<p>6. 点击【 Notifications】</p>\n<p>这里主要是配置邮件提醒的，可以配置也可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ae35754b03ed48659a0f1532fa3ba68d.png\" alt=\"image.png\"></p>\n<p>7. 点击【Discovery 】，点击【主机发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/22517e11d91146c588f52f474972889e.png\" alt=\"image.png\"></p>\n<p>8. 点击【Port Scanning】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/0d89b04664654f7da3b03400675244f7.png\" alt=\"image.png\"></p>\n<p>9. 点击【Service Discovery】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/aa6a279e953b4fab8b7e2bc86c73d61d.png\" alt=\"image.png\"></p>\n<p>10. 点击【ASSESSMENT】，点击【general】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/6c0868e2b7b5431db222a8730137c0bd.png\" alt=\"image.png\"></p>\n<p>11. 点击【Brute Force】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ca890cc0fcf3413cbfcb5e37dccd2a75.png\" alt=\"image.png\"></p>\n<p>12. 点击【SCADA】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4d068852466b4a5c8cfa60c1e467d760.png\" alt=\"image.png\"></p>\n<p>13. 点击【Web Application Settings】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/443875aa60784a0ba4ac9474f669b447.png\" alt=\"image.png\"></p>\n<p>14. 点击【Windows】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2da89cbf88494f2c89117281bf7f5a06.png\" alt=\"image.png\"></p>\n<p>15. 点击【Malware 】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ffbdf0e4f0d1405fb4c0f300b4dce573.png\" alt=\"image.png\"></p>\n<p>16. 点击【Database】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ba1e37e085ae49b384488d7dd7b02bf2.png\" alt=\"image.png\"></p>\n<p>17. 点击 [REPORT]</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/e70c22e594534560812685745ecd861a.png\" alt=\"image.png\"></p>\n<p>18. 点击【ADVANCED】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4991e91caf0c4fbdb5c4685c66553cd3.png\" alt=\"image.png\"></p>\n<p>19. 点击【Credentials 】，选则【windows】，输入账户密码（必须输入）</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/5a3dea619e0443c39bfcf3998aeb3fcb.png\" alt=\"image.png\"></p>\n<p>20. 点击【Plugins】</p>\n<p>所有的扫描服务，都是由插件提供的</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/b5c28355b94a47e2bcd739c7805c18ee.png\" alt=\"image.png\"></p>\n<p>21. 点击【Save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/10b06f0b62794a5684b16d25be5fda52.png\" alt=\"image.png\"></p>\n<p>22. 点击【高级扫描】，点击【More】，点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/c32b8e2986a94c41825952aa9b5556fb.png\" alt=\"image.png\"></p>\n<p>23. 点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/67c1160a61ed4f4888885028f23f80d9.png\" alt=\"image.png\"></p>\n<p>24. 点击【高级扫描】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/d5ba69b703904698b6b1d338255f2563.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2ee335411d2741738f14131e5794d87e.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/5ee2d857b1af45edbf67f3e7e865b302.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/e6a0d4b88eb548fa8deeafc16922ddcd.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Fweb%E6%9C%8D%E5%8A%A1/",
            "url": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Fweb%E6%9C%8D%E5%8A%A1/",
            "title": "Nessus扫描web服务",
            "date_published": "2023-01-10T21:39:26.000Z",
            "content_html": "<h1 id=\"nessus-扫描web服务\"><a class=\"anchor\" href=\"#nessus-扫描web服务\">#</a> Nessus 扫描 web 服务</h1>\n<p>1. 启动 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nessus</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2. 进入 nessus 网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.3.47:8834/</span><br></pre></td></tr></table></figure></p>\n<p>3. 点击【New Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/55304735fe8946f6a0ced005bc35c64a.png\" alt=\"image.png\"></p>\n<p>4. 点击【Web 应用程序测试】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/e9d95f4061d6499c823cb51e7879ebe6.png\" alt=\"image.png\"></p>\n<p>5. 输入 name【web 扫描】，描述【web 扫描】，目标【127.0.0.1】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/50c7f3ab84c44ee0b6fe81e3b8a30f4c.png\" alt=\"image.png\"></p>\n<p>6. 点击【发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/49f9bad581cb40dea6ed3abae5c95cd5.png\" alt=\"image.png\"></p>\n<p>7. 选择扫描类型【端口扫描 (常用端口)】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c1e34fee97b0485dad86f8df929e5430.png\" alt=\"image.png\"></p>\n<p>8. 点击【评估】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/4ea7b2375b8c41349514308597c351e2.png\" alt=\"image.png\"></p>\n<p>9. 扫描类型选择【扫描所有 web 漏洞 (快速)】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/9f4dc31931d04fccae316141d8bc6c3f.png\" alt=\"image.png\"></p>\n<p>10. 点击【证书】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/a7c908efe8444f4eae6a37a90c7fa3dd.png\" alt=\"image.png\"></p>\n<p>11. 点击【HTTP】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/a83dc3e5b4814ce3b38c45e0b8d68379.png\" alt=\"image.png\"></p>\n<p>12. 选择身份验证方法【自动认证】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/bf47d655d7754bf0867b0b8b3a12e173.png\" alt=\"image.png\"></p>\n<p>13. 输入用户名【xiaogang】，密码【123456】（需要扫描网站的用户名和密码）</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/dc040e35f171464482f0922aa58491ff.png\" alt=\"image.png\"></p>\n<p>14. 点击【插件】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c36226d195f94681bd294fc12f13eece.png\" alt=\"image.png\"></p>\n<p>15. 确认是否在可用的扫描插件</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/ed665f405a0547ec9f301ec455040870.png\" alt=\"image.png\"></p>\n<p>16. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/4a820525dba34f2ca51513670b0fc63e.png\" alt=\"image.png\"></p>\n<p>17. 选择【web 扫描】，点击后边的【小三角】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/3e5fbe3b52504eefae3df12b42e4561f.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/064b9a7184534364a04215d195b1c29b.png\" alt=\"image.png\"></p>\n<p>18. 点击【web 扫描】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/52b4c83c31d34caf87530813de3952cd.png\" alt=\"image.png\"></p>\n<p>19. 等待扫描完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c98d001614bb4fa9b675d16ed08b4885.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/1ecb527fb62442d8bc7f3f66cf2ca4d6.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Flog4J%E6%BC%8F%E6%B4%9E/",
            "url": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Flog4J%E6%BC%8F%E6%B4%9E/",
            "title": "Nessus扫描log4J漏洞",
            "date_published": "2023-01-10T21:38:46.000Z",
            "content_html": "<h1 id=\"nessus-扫描log4j漏洞\"><a class=\"anchor\" href=\"#nessus-扫描log4j漏洞\">#</a> Nessus 扫描 log4J 漏洞</h1>\n<h2 id=\"1扫描环境搭建\"><a class=\"anchor\" href=\"#1扫描环境搭建\">#</a> 1. 扫描环境搭建</h2>\n<h5 id=\"1centos7-安装装宝塔面板\"><a class=\"anchor\" href=\"#1centos7-安装装宝塔面板\">#</a> 1.centos7 安装装宝塔面板</h5>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/0441e1bbb16a4097a848d126df6ad17a.png\" alt=\"image.png\"></p>\n<h5 id=\"2面板里下载docker\"><a class=\"anchor\" href=\"#2面板里下载docker\">#</a> 2. 面板里下载 docker</h5>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/de849a33389c490bb17d0eac6a96fecb.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/519f4443f1814959b11df6d88aac4145.png\" alt=\"image.png\"></p>\n<h5 id=\"3进入centos检查docker是否生效\"><a class=\"anchor\" href=\"#3进入centos检查docker是否生效\">#</a> 3. 进入 centos 检查 docker 是否生效</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"4安装docker-compose\"><a class=\"anchor\" href=\"#4安装docker-compose\">#</a> 4. 安装 docker-compose</h5>\n<p>Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。一个使用 Docker 容器的应用，通常由多个容器组成。使用 Docker Compose 不再需要使用 shell 脚本来启动容器。</p>\n<p>Compose 通过一个配置文件来管理多个 Docker 容器，在配置文件中，所有的容器通过 services 来定义，然后使用 docker-compose 脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==\">https://docs.docker.com/compose/install/</span></p>\n<p>4.1 下载 docker-compose</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/021b03ca8c80487f9195adc1109febbd.png\" alt=\"image.png\"></p>\n<p>4.2 查看 docker-compose</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/local/bin/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/07d926dcfd0d42d99b24743b674def58.png\" alt=\"image.png\"></p>\n<p>4.3 给 docker-compose 目录增加可执行权限</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">ls /usr/local/bin/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/1a52eca9ba98451e9944261df831b9e1.png\" alt=\"image.png\"></p>\n<p>4.4 查看版本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -version</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/2e178bf8083d40e8a8a2a4626dce321a.png\" alt=\"image.png\"></p>\n<h5 id=\"5安装vulhub\"><a class=\"anchor\" href=\"#5安装vulhub\">#</a> 5. 安装 vulhub</h5>\n<p>5.1 创建 zsoft 文件夹</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /www/wwwroot/</span><br><span class=\"line\">ls</span><br><span class=\"line\">mkdir softs</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd softs</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/100e72d253494a77865a0ef28e3853e0.png\" alt=\"image.png\"></p>\n<p>5.2 下载 vulhub, 并查看</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/vulhub/vulhub.git</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd vulhub</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f07e9e024a4845c3b9b041e2e551536d.png\" alt=\"image.png\"></p>\n<h5 id=\"6部署log4j靶场\"><a class=\"anchor\" href=\"#6部署log4j靶场\">#</a> 6. 部署 log4J 靶场</h5>\n<p>6.1 进入 log4j/CVE-2021-44228</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd log4j/CVE-2021-44228</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/dac22ab5392b42ceb89fdb2d04f1f6cf.png\" alt=\"image.png\"></p>\n<p>6.2 编译环境</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/8826d479399247d19cac4368b5584a13.png\" alt=\"image.png\"></p>\n<p>6.3 运行环境</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>6.4 查看端口</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose ps</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/99dbccec16e8460cb65771e03b010197.png\" alt=\"image.png\"></p>\n<p>6.5 查看 ip</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip a</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/b864d9f810564857a93c5eb342240344.png\" alt=\"image.png\"></p>\n<p>6.6 宝塔面板放行端口</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5398f901945340fb9f0531283655dd15.png\" alt=\"image.png\"></p>\n<p>6.7 访问靶场地址</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.110.198:8983</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f19a24723ea74f90bfbd516c97ac17fc.png\" alt=\"image.png\"></p>\n<h2 id=\"2扫描log4j漏洞\"><a class=\"anchor\" href=\"#2扫描log4j漏洞\">#</a> 2. 扫描 log4J 漏洞</h2>\n<h3 id=\"1log4jshell扫描\"><a class=\"anchor\" href=\"#1log4jshell扫描\">#</a> 1.log4Jshell 扫描</h3>\n<p>1. 访问 nessus 扫描网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.110.230:8834/#/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5312ef585b90494393ac1c3836733512.png\" alt=\"image.png\"></p>\n<p>2. 登录后，点击【新增扫描】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d7b219844c3d4be4a870a9172bd1a0c8.png\" alt=\"image.png\"></p>\n<p>3. 选择【Log4Shell】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/879dab939e1948fe88055cce194c4472.png\" alt=\"image.png\"></p>\n<p>4. 输入 Name【log4jshell】，目标【192.168.110.198】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/2c9bafcb837e4b10acdfe1796110af16.png\" alt=\"image.png\"></p>\n<p>5. 点击【发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/54e3442117ad4a51808430dcd3d9004a.png\" alt=\"image.png\"></p>\n<p>6. 选择扫描类型【彻底】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/27cc3ab79bf54b9da3af319a2d8ed9ff.png\" alt=\"image.png\"></p>\n<p>7. 点击【评估】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/249465aabe16419b9480bc51108f7922.png\" alt=\"image.png\"></p>\n<p>8. 选择扫描类型【默认】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/1be69e69dc224a41bab404c4918e0e4f.png\" alt=\"image.png\"></p>\n<p>9. 点击【证书】, 点击【ssh】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/e39419bb80074bfc9a6f0173912c924d.png\" alt=\"image.png\"></p>\n<p>10. 选择身份验证方法【密码】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/ae7649df348d424397281fcfb273e6d0.png\" alt=\"image.png\"></p>\n<p>11. 输入被扫描服务器的用户名【root】，密码【root】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/20a706aa71c149f988c2bd3a0a8c91d1.png\" alt=\"image.png\"></p>\n<p>12. 点击【插件】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d55fa35e69ea42768a03f1513c35f1ef.png\" alt=\"image.png\"></p>\n<p>13. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f9ea1593922343a58b2ce767e674cdf0.png\" alt=\"image.png\"></p>\n<p>14. 执行【log4shell】扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d7721cd40f2d4817b55c50dccb64b0b5.png\" alt=\"image.png\"></p>\n<p>15. 查看 log4J 的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/366adf34bbb8440ba60b270fdcf51d87.png\" alt=\"image.png\"></p>\n<h3 id=\"2nesuss扫描log4shell-漏洞生态系统\"><a class=\"anchor\" href=\"#2nesuss扫描log4shell-漏洞生态系统\">#</a> 2.nesuss 扫描 Log4Shell 漏洞生态系统</h3>\n<p>1. 访问 nessus 扫描网站</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly8xOTIuMTY4LjExMC4yMzA6ODgzNC8jLw==\">https://192.168.110.230:8834/#/</span></p>\n<p>2. 点击新建扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/3e85bf0e4380479b8df37afeb85973e5.png\" alt=\"image.png\"></p>\n<p>3. 选择【Log4Shell 漏洞生态系统】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/24fc6288d71340efae4d97bd5ad9f870.png\" alt=\"image.png\"></p>\n<p>4. 输入 Name【log4jshell 生态】，目标【192.168.110.198】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5fe55d20097c458db27204caad1b22af.png\" alt=\"image.png\"></p>\n<p>5. 点击【发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5b8e5e6b086742fe85a816475ef782bc.png\" alt=\"image.png\"></p>\n<p>6. 选择扫描类型【彻底】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/525da2c8e3684e69a3e7ebde40302d61.png\" alt=\"image.png\"></p>\n<p>7. 点击【评估】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/99012fc379dd4e27aec5c0a4e3f2c1f8.png\" alt=\"image.png\"></p>\n<p>8. 选择扫描类型【默认】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/4ea0cce3414643abb0cce510e0b882b4.png\" alt=\"image.png\"></p>\n<p>9. 点击【证书】, 点击【ssh】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/7c20e6d3e7824e95ba02c85bc7722628.png\" alt=\"image.png\"></p>\n<p>10. 点击【插件】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/741be19fc5044b4c84da53ecdf6bab9f.png\" alt=\"image.png\"></p>\n<p>11. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5e45a982324f4b14a7c17e016f0c5b9f.png\" alt=\"image.png\"></p>\n<p>12. 执行【log4shell 生态】扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/fc08c461762b4f96aa936946747c4e05.png\" alt=\"image.png\"></p>\n<p>13. 查看 log4J 生态的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/3192b68ad96e4e9aaaff70e36b057477.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/NessusHostDiscovery/",
            "url": "https://mangpumo.github.io/2023/01/11/NessusHostDiscovery/",
            "title": "NessusHostDiscovery",
            "date_published": "2023-01-10T21:38:08.000Z",
            "content_html": "<h1 id=\"nessus-host-discovery\"><a class=\"anchor\" href=\"#nessus-host-discovery\">#</a> Nessus Host Discovery</h1>\n<p>1. 启动 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nessus</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2. 进入 nessus 网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.3.47:8834/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7ab2d5aa1c7a436d9a4236390971d873.png\" alt=\"image.png\"></p>\n<p>3. 点击【New Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/ae91d3e49a014ce4bf5d16e14d4c009a.png\" alt=\"image.png\"></p>\n<p>4. 选择【Host Discovery】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/6314833fd6b24fc482bbf884bdeb3bd4.png\" alt=\"image.png\"></p>\n<p>5. 输入 name【主机发现】，Description【主机发现】，Targets【192.168.3.0/24】, 点击【Save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/9af5119ff47a41ef9f14fc1edd751799.png\" alt=\"image.png\"></p>\n<p>6. 点击【 Schedule】</p>\n<p>这里是配置定时任务的，可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/32d9e17742fa4afb8942d1cf5db96ba6.png\" alt=\"image.png\"></p>\n<p>7. 点击【 Notifications】</p>\n<p>这里主要是配置邮件提醒的，可以配置也可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/c65ec8c79ceb4e16a91630ce6bfcddf5.png\" alt=\"image.png\"></p>\n<p>8. 点击【Discovery 】</p>\n<p>这里选择常用端口扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7c9a0ee9cc2b48bfa166e80f991819c5.png\" alt=\"image.png\"></p>\n<p>9. 点击【Report 】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/a768bfa493014b299c4cf4aca1346474.png\" alt=\"image.png\"></p>\n<p>10. 点击【Advanced 】</p>\n<p>这里是高级设置选项</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/07171ac22bdb481a97298199b7a36636.png\" alt=\"image.png\"></p>\n<p>11. 点击【Plugins】</p>\n<p>这里是配置插件的地方，主机发现不要配置插件</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/1b538e5621c64332a3ee06cd862080b0.png\" alt=\"image.png\"></p>\n<p>12. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/193ae3a3dbd145b88480bb71deb6e721.png\" alt=\"image.png\"></p>\n<p>13. 点击【主机发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/2fe3b92bf40640bea04bc8ecbb12a487.png\" alt=\"image.png\"></p>\n<p>14. 点击【More】，点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7abedbdf5cb94f9faafa11eec2017cca.png\" alt=\"image.png\"></p>\n<p>15. 点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/bda6368a8f0a48d5a42370ce5a7bf537.png\" alt=\"image.png\"></p>\n<p>16. 点击【主机发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/de021dcff58f431c9ceee57cd0354fae.png\" alt=\"image.png\"></p>\n<p>17. 查看扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/a9678c7f935a4213bfdd401d11ed91ae.png\" alt=\"image.png\"></p>\n<p>18. 选择其中一个主机查看</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/0a1af822d924498bb1c20ed9a3675b4e.png\" alt=\"image.png\"></p>\n<p>19. 查看具体的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/c8b48d3a6f4241d6a9be2a6bf3b678e3.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Nessus%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "url": "https://mangpumo.github.io/2023/01/11/Nessus%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "title": "Nessus介绍与安装",
            "date_published": "2023-01-10T21:37:04.000Z",
            "content_html": "<h1 id=\"nessus介绍与安装\"><a class=\"anchor\" href=\"#nessus介绍与安装\">#</a> Nessus 介绍与安装</h1>\n<h2 id=\"1nessus简介\"><a class=\"anchor\" href=\"#1nessus简介\">#</a> 1.Nessus 简介</h2>\n<p>Nessus 号称是世界上最流行的漏洞扫描程序，全世界有超过 75000 个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus 不同于传统的漏洞扫描软件，Nessus 可同时在本机或远端上遥控，进行系统的漏洞分析扫描。Nessus 也是渗透测试重要工具之一</p>\n<h2 id=\"2kali安装nessus\"><a class=\"anchor\" href=\"#2kali安装nessus\">#</a> 2.kali 安装 Nessus</h2>\n<p>1. 访问 Nessus 官网</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.tenable.com/downloads/nessus</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/1dde7c7b4ec645cba3c61b1e8a5ca73f.png\" alt=\"image.png\"></p>\n<p>或者下载课程资料里的安装包【Nessus-10.1.1-debian6_amd64.deb】到 kali</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/22505ff746a648c397bf5dc2cef5a7a2.png\" alt=\"image.png\"></p>\n<p>2. 安装 Nessus 程序</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i Nessus-10.1.1-debian6_amd64.deb </span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/071d1f15c17c42f381975763adf711d0.png\" alt=\"image.png\"></p>\n<p>You can start Nessus Scanner by typing /bin/systemctl start nessusd.service 启动服务命令</p>\n<p>Then go to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWxpOjg4MzQv\">https://kali:8834/</span>to configure your scanner  访问地址</p>\n<p>3. 启动 Nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd start</span><br></pre></td></tr></table></figure></p>\n<p>4. 查看 kali 的 ip</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip a</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/f892a26fccf8481fa9f5f687c26c1a58.png\" alt=\"image.png\"></p>\n<p>5. 浏览器访问 nessus 的 web 网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.11.75:8834/#/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/d7e0366737ee4e91b5e16b403792ae4b.png\" alt=\"image.png\"></p>\n<p>6. 选择 【Managed Scanner】选项，点击【Continue】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/f8c1d51f75694259b6a4cd4ce504dfea.png\" alt=\"image.png\"></p>\n<p>7. 选择【<span class=\"exturl\" data-url=\"aHR0cDovL1RlbmFibGUuc2M=\">Tenable.sc</span>】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/80ba631a892e4a089673aedb0df08804.png\" alt=\"image.png\"></p>\n<p>8. 点击【Continue】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/3f4f08d4a8544277ae02f174a8e62ecc.png\" alt=\"image.png\"></p>\n<p>9. 输入用户名【admin】，输入密码【123456】，点击【Submit】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/8021cf24bd45404eaeba0b0fae793bd5.png\" alt=\"image.png\"></p>\n<p>10. 等待配置插件</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/86313f9a1137476c8a1a0d023c89069b.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/565d98fe895c431eb8504e1814f9403d.png\" alt=\"image.png\"></p>\n<p>安装完成后是这样的界面，尚未激活，不能扫描，此时只有一个设置按钮，并无扫描按钮.</p>\n<h2 id=\"3离线激活nessus\"><a class=\"anchor\" href=\"#3离线激活nessus\">#</a> 3. 离线激活 Nessus</h2>\n<ol>\n<li>去 nessus 官方申请激活码，姓名随便填，邮箱必须正确，用来接收激活码</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://zh-cn.tenable.com/products/nessus/nessus-essentials</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/2e042a1b3bc24ebe96668f68b6ccd487.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/b89303b62eee43bc99b9d7c3739212f2.png\" alt=\"image.png\"></p>\n<p>2. 进入填写的邮箱获取激活码</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9b2d9202c94c4da080936d485a3c2c83.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/24bf49a1d16e4261a1d30d92ec805d5b.png\" alt=\"image.png\"></p>\n<p>3. 获得质询码（challenge code）</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/nessus/sbin/nessuscli fetch  --challenge</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/97008ee858754d229d82981cc26b7a62.png\" alt=\"image.png\"></p>\n<p>4. 获取离线插件包地址及激活证书</p>\n<p>浏览器打开网页 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbHVnaW5zLm5lc3N1cy5vcmcvdjIvb2ZmbGluZS5waHA=\">https://plugins.nessus.org/v2/offline.php</span> ，输入申请的激活码，以及上一步得到的质询码，点击【Submit】</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://plugins.nessus.org/v2/offline.php</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/dad3f4a3b1804e7e88742ace5246b2f2.png\" alt=\"image.png\"></p>\n<p>5. 得到更新插件地址，及 license 证书</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/c2f6d9b61f25438c838edc005ac099cc.png\" alt=\"image.png\"></p>\n<p>6. 下载更新包，下载证书 nessus.license。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/045c0b7dccda4006a172bbe12979e312.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9788ef99b5ce4621ae1e644285f43ed2.png\" alt=\"image.png\"></p>\n<p>7. 将下载好的激活证书和插件包复制到 kali</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/4f9d3d443be24573a4e003cdad62294d.png\" alt=\"image.png\"></p>\n<p>8. 离线激活 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/nessus/sbin/nessuscli fetch --register-offline ./nessus.license</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/4da74bfab4124d49824c08fabcfbb02f.png\" alt=\"image.png\"></p>\n<p>您的激活码已正确注册 - 谢谢。</p>\n<p>9. 安装插件包</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">/opt/nessus/lib/nessus/plugins/  #插件包目录</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/3602dbf8e98c41b08e2698986e81f194.png\" alt=\"image.png\"></p>\n<p>10. 重启 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd restart</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/2f8e50f756dd4a4797a7e0f9bc2213fa.png\" alt=\"image.png\"></p>\n<p>11. 重新访问 nessus 网站，等待加载插件【耗时较长，需要耐心等待】</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.10.141:8834/#/settings/about</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9b16c2d94b5d4440b025297ec1f9b6f5.png\" alt=\"image.png\"></p>\n<p>完成后进入 nessus 系统。显示激活成功，具有了 scan 功能。但显示仅允许扫描 16 个 IP。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/b2def339468746fdbd114bed1f43d1d3.png\" alt=\"image.png\"></p>\n<h2 id=\"4解除ip限制\"><a class=\"anchor\" href=\"#4解除ip限制\">#</a> 4. 解除 IP 限制</h2>\n<p>1. 获取当前 plugins 的版本。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://plugins.nessus.org/v2/plugins.php</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/3032df10296340a5bcba5e1d51445822.png\" alt=\"image.png\"></p>\n<p>2. 停止 nessus 服务</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd stop</span><br></pre></td></tr></table></figure></p>\n<p>3. 创建 plugin_feed_info.inc</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi plugin_feed_info.inc</span><br></pre></td></tr></table></figure></p>\n<p>内容如下，并将刚刚获取到的版本号替换如下内容中的数字串。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PLUGIN_SET = &quot;202203090609&quot;;</span><br><span class=\"line\">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;;</span><br><span class=\"line\">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>4. 将 plugin_feed_info.inc 替换到 /opt/nessus/var/nessus/plugin_feed_info.inc</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp plugin_feed_info.inc /opt/nessus/var/nessus/</span><br></pre></td></tr></table></figure></p>\n<p>5. 将 /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc 文件删除。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc</span><br></pre></td></tr></table></figure></p>\n<p>6. 启动 nessus 服务</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd start</span><br></pre></td></tr></table></figure></p>\n<p>7. 访问 Nessus，windows 打开浏览器，访问 nessus，会看到 nessus 初始化插件，完成后，看设置页面显示 unlimited。表示解除 IP 限制成功。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.3.47:8834/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/be568c6057e74ea59f2f4a61bbad1fd2.png\" alt=\"image.png\"></p>\n<h2 id=\"5解决nessus重启失效后遗症\"><a class=\"anchor\" href=\"#5解决nessus重启失效后遗症\">#</a> 5. 解决 Nessus 重启失效后遗症</h2>\n<p>由于 Nessus 服务每次重启后，都会重置 plugin_feed_info.inc，这将会使 nessus/plugins 目录下所有的插件都被删除，无法扫描。因此要将 nessus 服务设置为手动，并且先停止 nessus 服务。可以写成批处理解决此问题</p>\n<p>1. 编写启动脚本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi qd_nessus.sh</span><br><span class=\"line\"></span><br><span class=\"line\">service nessusd stop;</span><br><span class=\"line\">cp /root/nessus/plugin_feed_info.inc /opt/nessus/var/nessus/;</span><br><span class=\"line\">rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc;</span><br><span class=\"line\">service nessusd start;</span><br></pre></td></tr></table></figure></p>\n<p>每次需要启动 nessus 时 输入启动命令</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /root/nessus/qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2.nessus 命令合集</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动</span><br><span class=\"line\">service nessusd start;</span><br><span class=\"line\">#重启</span><br><span class=\"line\">service nessusd restart;</span><br><span class=\"line\">#查看状态</span><br><span class=\"line\">service nessusd status</span><br><span class=\"line\">#停止服务</span><br><span class=\"line\">service nessusd stop</span><br></pre></td></tr></table></figure></p>\n<p>3. 遇到的坑及相应的解决办法</p>\n<p>在解除 ip 限制的过程中，如果已经解除成功，但是新建扫描项目时，发现很快就结束，无扫描结果。此时查看 plugins 目录内容是否被删除。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -h /opt/nessus/lib/nessus/plugins</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/e89f232f79234dfabfe2419db15ac273.png\" alt=\"image.png\"></p>\n<p>正常情况下，该目录应该在 1.4G 左右。如远远低于此数值。请按如下步骤操作：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd stop;</span><br><span class=\"line\">/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gz</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后打开浏览器，正常访问 nessus。（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmNlbnRvcw==\">https://</span>ip:8843）静待 plugins 更新完成。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AppScan%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A/",
            "url": "https://mangpumo.github.io/2023/01/11/AppScan%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A/",
            "title": "AppScan扫描报告",
            "date_published": "2023-01-10T21:35:41.000Z",
            "content_html": "<h1 id=\"appscan扫描报告\"><a class=\"anchor\" href=\"#appscan扫描报告\">#</a> AppScan 扫描报告</h1>\n<h2 id=\"1加载扫描结果\"><a class=\"anchor\" href=\"#1加载扫描结果\">#</a> 1. 加载扫描结果</h2>\n<p>1. 点击【打开】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/6113b3be3e3f4823b6e8a3299a4168b2.png\" alt=\"image.png\"></p>\n<p>2. 选择之前保存过的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/5a5205ed79b54851b4d2ab9b00e3b94e.png\" alt=\"image.png\"></p>\n<p>3. 等待加载完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4cdd51d08f5c48188c7a4c76a2a1af52.png\" alt=\"image.png\"></p>\n<h2 id=\"2领导查看的报告\"><a class=\"anchor\" href=\"#2领导查看的报告\">#</a> 2. 领导查看的报告</h2>\n<p>1. 点击【报告】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/147bde4944b941558a599f08ff29cdde.png\" alt=\"image.png\"></p>\n<p>2. 模板选择为【缺省值】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/fda3f723caab4dabb81cee31211c0197.png\" alt=\"image.png\"></p>\n<p>3. 最低严重性选择为【中】，测试类型选择为【应用程序】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/9c78640cace24a498a841f9cb43410bd.png\" alt=\"image.png\"></p>\n<p>4. 点击【布局】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/e41b7307149b430eb2606f0cee651a84.png\" alt=\"image.png\"></p>\n<p>5. 选择【其他徽标】，点击上传徽标</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/df41332deeca4243bd9a9f2b098c50e3.png\" alt=\"image.png\"></p>\n<p>6. 选择徽标，点击打开</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/58c0f0878dd4457bbf97c1ca6fbfae45.png\" alt=\"image.png\"></p>\n<p>7. 修改报告标题，比如输入 【哔哩嘀哩网站安全评估报告】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/c9709b41eff441cab81b66b982fa958a.png\" alt=\"image.png\"></p>\n<p>8. 点击【保存报告】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4a4c6ce4f8b44483be607691b1ca8dc1.png\" alt=\"image.png\"></p>\n<p>9. 选择喜欢的位置保存</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/59d25ea09c1b46169c0a3a6258711bbd.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/2de43fdea3194cd5ac62997e1dc5edaf.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/f0c77212eb8e4e828585f795344b6ab9.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/fa4e3bd17c6743f994862de41f0e87eb.png\" alt=\"image.png\"></p>\n<h2 id=\"3其他报告\"><a class=\"anchor\" href=\"#3其他报告\">#</a> 3. 其他报告</h2>\n<p>1. 行业标准报告</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/5c7340c0a26f498cbcf4a9feb30a8b65.png\" alt=\"image.png\"></p>\n<p>2. 合规一致性报告</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4812c10f2bd445d6ac3d63e3caae12f8.png\" alt=\"image.png\"></p>\n<p>3. 基于模板报告</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/d7bbb31bea304c5086c93f66a8e4bbda.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AppScan%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%AB%E6%8F%8F%E7%AD%96%E7%95%A5%EF%BC%8C%E6%89%AB%E6%8F%8F%E9%92%88%E5%AF%B9%E6%80%A7%E6%BC%8F%E6%B4%9E/",
            "url": "https://mangpumo.github.io/2023/01/11/AppScan%E8%87%AA%E5%AE%9A%E4%B9%89%E6%89%AB%E6%8F%8F%E7%AD%96%E7%95%A5%EF%BC%8C%E6%89%AB%E6%8F%8F%E9%92%88%E5%AF%B9%E6%80%A7%E6%BC%8F%E6%B4%9E/",
            "title": "AppScan自定义扫描策略，扫描针对性漏洞",
            "date_published": "2023-01-10T21:35:00.000Z",
            "content_html": "<h1 id=\"appscan自定义扫描策略扫描针对性漏洞\"><a class=\"anchor\" href=\"#appscan自定义扫描策略扫描针对性漏洞\">#</a> AppScan 自定义扫描策略，扫描针对性漏洞</h1>\n<p>安全扫描往往速度是很慢的，有些场景下他的扫描项目又不是我们需要的，这时候就需要定制专属的扫描策略了。本节课以 sql 注入漏洞为例</p>\n<p>1. 选择【扫描 web 应用程序】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/2e5a3c50f05f46879fac8a82573bd283.png\" alt=\"image.png\"></p>\n<p>2. 点击【取消】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/c18d316f818b4febb9be9624370583c3.png\" alt=\"image.png\"></p>\n<p>3. 点击【配置】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/8b3ac7c8fb804ecabcd04b20606236f1.png\" alt=\"image.png\"></p>\n<p>4. 输入被目标网站 url</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/6acf7962b56b40cdae8e59cbdfd2b83d.png\" alt=\"image.png\"></p>\n<p>5. 选择【参数和 cookie】，选择【定制头】，点击【+】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/0025b2e972fb46f594c42f356e17cadb.png\" alt=\"image.png\"></p>\n<p>4. 切换火狐浏览器，复制网站 cookie</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/ed966b809eb140b4842fd846b623c2cb.png\" alt=\"image.png\"></p>\n<p>5. 切换到 AppScan，填写定制头，点击【确定】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/6b9c37b2f38744c499373f48b7c7466e.png\" alt=\"image.png\"></p>\n<p>6. 点击【测试策略】，选择【缺省值】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/cda5ef11493848ee9431d497e693fff5.png\" alt=\"image.png\"></p>\n<p>7. 将所有的选中状态去掉</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/832603718ecc4424a80ee7907253d79f.png\" alt=\"image.png\"></p>\n<p>8. 搜索 sql 注入</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/71eed16ff0ce4cd69ad97e6815d5e36b.png\" alt=\"image.png\"></p>\n<p>9. 展开全选该漏洞的 pload</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/c6ffc56796ae4b5f8c78e70633b7b55b.png\" alt=\"image.png\"></p>\n<p>10. 点击【应用】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/c17d8474fb044dcfa9fc2f32e5bf5ceb.png\" alt=\"image.png\"></p>\n<p>11. 点击【导出】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/e2071bd37d6641aa92c003bfb570f143.png\" alt=\"image.png\"></p>\n<p>12. 选择喜欢的位置保存</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/b75c613fc42b48f6a80ba270be667ae2.png\" alt=\"image.png\"></p>\n<p>13. 点击【导入】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/a75ab821e297455989669f00ae32795f.png\" alt=\"image.png\"></p>\n<p>14. 选则需要的自定义策略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/6026d155a3164ec396ca75796f63432c.png\" alt=\"image.png\"></p>\n<p>15. 点击【确定】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/fa0211647f8c4fe3be38710e2de6b8be.png\" alt=\"image.png\"></p>\n<p>16. 点击【手动扫描】，选择【AppScan Chromium 浏览器】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/f2167c67d48b4feb989384b52ab805fb.png\" alt=\"image.png\"></p>\n<p>17. 选则要探索的页面，然后点击【确定】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/24f2de24301b4d92a9d3cbeebfb9bd97.png\" alt=\"image.png\"></p>\n<p>18. 点击【确定】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/1609886d3eae47f29af655201b45d55a.png\" alt=\"image.png\"></p>\n<p>19. 等待加载完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/9cf3cea101ae41c4b2e9262d58988b1e.png\" alt=\"image.png\"></p>\n<p>20. 点击【扫描】，选择【仅测试】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/8b9305d524584c41b7257845bc43e999.png\" alt=\"image.png\"></p>\n<p>21. 等待测试结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/cc5a78f3e4a34902a888da3f4785e63c.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640667392000/eb7431b64b194406a0548243f877c9f9.png\" alt=\"image.png\"><br>\ni</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AppScan%E7%BB%95%E8%BF%87%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B7%B1%E5%85%A5%E6%89%AB%E6%8F%8F/",
            "url": "https://mangpumo.github.io/2023/01/11/AppScan%E7%BB%95%E8%BF%87%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E7%A0%81%E6%B7%B1%E5%85%A5%E6%89%AB%E6%8F%8F/",
            "title": "AppScan绕过登录验证码深入扫描",
            "date_published": "2023-01-10T21:34:10.000Z",
            "content_html": "<h1 id=\"绕过登录验证码深入扫描\"><a class=\"anchor\" href=\"#绕过登录验证码深入扫描\">#</a> 绕过登录验证码深入扫描</h1>\n<p>我们工作中最长碰到的工作场景是网站采用 https 协议，这时我们要用 appScan 进行扫描时，就需要先安装证书</p>\n<h2 id=\"1证书安装\"><a class=\"anchor\" href=\"#1证书安装\">#</a> 1. 证书安装</h2>\n<p>1. 新建一个文件，点击【文件】，点击【新建】</p>\n<p><img data-src=\"images/c2cfd88d4b714cdab43af4c8e7cdb06d.png\" alt=\"image.png\"></p>\n<p>2. 选择【扫描 web 应用程序】</p>\n<p><img data-src=\"images/c2c466aa8c474c8285cfedea2cd4e819.png\" alt=\"image.png\"></p>\n<p>3. 点击【取消】</p>\n<p><img data-src=\"images/4bdc797b5c1a4b0db90df2164600a0ce.png\" alt=\"image.png\"></p>\n<p>4. 点击【手动扫描】，选择【外部设备】</p>\n<p><img data-src=\"images/cab4a5ef42054822941f0831e9498498.png\" alt=\"image.png\"></p>\n<p>5. 记录代理端口</p>\n<p><img data-src=\"images/3d64ba27c5084853a0a3dbdfff736651.png\" alt=\"image.png\"></p>\n<p>6. 点击【记录代理配置】</p>\n<p><img data-src=\"images/704f20425aa2482fa6bfdacf166f7c19.png\" alt=\"image.png\"></p>\n<p>7. 点击【记录代理】, 点击【导出】</p>\n<p><img data-src=\"images/646d91731ece4fce965495fb0af02830.png\" alt=\"image.png\"></p>\n<p>8. 选择喜欢的位置，点击【保存】</p>\n<p><img data-src=\"images/19cc1e3e724a4d01b63b8a62fa8b6437.png\" alt=\"image.png\"></p>\n<p>9. 点击【取消】</p>\n<p><img data-src=\"images/4429279212ee445bada658d51e2081ae.png\" alt=\"image.png\"></p>\n<p>10. 解压已经保存的证书</p>\n<p><img data-src=\"images/fb6f8a02302f49c7979a7d3911228e9b.png\" alt=\"image.png\"></p>\n<p>11. 切换到火狐浏览器，点击【更多】，点击【设置】</p>\n<p><img data-src=\"images/183fa51ed27a4fb9a29bf53145876b97.png\" alt=\"image.png\"></p>\n<p>12. 输入证书，点击【回车】，点击【查看证书】</p>\n<p><img data-src=\"images/72039d699ea14ed59b691f2f3bdbb9eb.png\" alt=\"image.png\"></p>\n<p>13. 点击【证书颁发机构】，点击【导入】</p>\n<p><img data-src=\"images/640bf9059f674c2eae885b39eca32392.png\" alt=\"image.png\"></p>\n<p>14. 选择证书，点击【打开】</p>\n<p><img data-src=\"images/0eb3191f0ec845bc86bbc171ecc0f45c.png\" alt=\"image.png\"></p>\n<p>15. 勾选信任证书，点击【确定】</p>\n<p><img data-src=\"images/ff7fb370aec84bf7bb00d407e92ae443.png\" alt=\"image.png\"></p>\n<p>16. 点击【确定】</p>\n<p><img data-src=\"images/d782b58bd4e14794aad272ebf192947a.png\" alt=\"image.png\"></p>\n<h2 id=\"2手工探测绕过登录\"><a class=\"anchor\" href=\"#2手工探测绕过登录\">#</a> 2. 手工探测绕过登录</h2>\n<p>扫描过程会遇到网站 存在 手机验证码，图形验证码，滑动验证等等，这时候想要深度扫描时，就需要进行登录绕过。有两种方法可以选择</p>\n<p>第一：使用第三节课介绍的定制头解决</p>\n<p>第二：使用手工探索 - 外置设备进行登录绕过，我们今天讲解第二种</p>\n<p>1. 新建一个文件，点击【文件】，点击【新建】</p>\n<p><img data-src=\"images/c2cfd88d4b714cdab43af4c8e7cdb06d.png\" alt=\"image.png\"></p>\n<p>2. 选择【扫描 web 应用程序】</p>\n<p><img data-src=\"images/c2c466aa8c474c8285cfedea2cd4e819.png\" alt=\"image.png\"></p>\n<p>3. 输入被测网址，点击【下一步】</p>\n<p><img data-src=\"images/df15f4f11ddc4368a9f2225e6e52b131.png\" alt=\"image.png\"></p>\n<p>4. 点击【记录】, 点击【AppScan Chromium 浏览器】</p>\n<p><img data-src=\"images/655fdfe74d934406ada64b9800aafe91.png\" alt=\"image.png\"></p>\n<p>5. 进行登录</p>\n<p><img data-src=\"images/ebf536ebb6e44530b40a28df07d0784f.png\" alt=\"image.png\"></p>\n<p>6. 点击【我已登录到站点】</p>\n<p><img data-src=\"images/128a98bf975040cba4ffb2204623e16a.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/3a5c95f334bc40df86c1db022798bfba.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/dceb8d324cc04ac1bed635a6f4d34d62.png\" alt=\"image.png\"></p>\n<p>可以看到，登录回放是失败，遇到这种情况，我们今天使用手工探索 - 外置设备进行登录绕过</p>\n<p>7. 点击【关闭】</p>\n<p><img data-src=\"images/873586ce76cd43cb925bc6cc216f9569.png\" alt=\"image.png\"></p>\n<p>8. 点击【取消】</p>\n<p><img data-src=\"images/14cc3447348f44ed89a023bf07863d5c.png\" alt=\"image.png\"></p>\n<p>9. 点击【取消】</p>\n<p><img data-src=\"images/9ea29ca3ecbb4f3387d2efd2187b002b.png\" alt=\"image.png\"></p>\n<p>10. 点击【手动扫描】，选择【外部设备】</p>\n<p><img data-src=\"images/cab4a5ef42054822941f0831e9498498.png\" alt=\"image.png\"></p>\n<p>11. 记录代理端口</p>\n<p><img data-src=\"images/02cc9d867b9d4ae4b4cceb505a271d18.png\" alt=\"image.png\"></p>\n<p>12. 切到火狐浏览器，进入被测网站，登录</p>\n<p><img data-src=\"images/c26acb3fb5c4422b86274cf8d2c256e9.png\" alt=\"image.png\"></p>\n<p>13. 点击【代理】，点击【选项】</p>\n<p><img data-src=\"images/a6a9e71178ae40a29a238b632a87cfc0.png\" alt=\"image.png\"></p>\n<p>14. 点击【编辑】</p>\n<p><img data-src=\"images/9a8cf830b95a4d93899a0a64672f691c.png\" alt=\"image.png\"></p>\n<p>15. 输入 AppScan 的端口，点击【保存】</p>\n<p><img data-src=\"images/883d17b276b24cec95950f80d64e7642.png\" alt=\"image.png\"></p>\n<p>16. 切换到被测网站，点击【代理】，选择【appscan】</p>\n<p><img data-src=\"images/c89091852abb4fc5b6f7a6f06fa594ef.png\" alt=\"image.png\"></p>\n<p>17. 点击想要测试功能</p>\n<p><img data-src=\"images/63d15e0c22fc40b99974ef30daa4f687.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/2723ab0161b7436aa7cb9f8c903789a0.png\" alt=\"image.png\"></p>\n<p>18. 点击【停止记录】</p>\n<p><img data-src=\"images/3b26cf2705b04f98bfc8e3abedd75003.png\" alt=\"image.png\"></p>\n<p>19. 选择被测网站，点击【确定】</p>\n<p><img data-src=\"images/d8a705be72e0435e963f93efe07c4fa7.png\" alt=\"image.png\"></p>\n<p>20. 等待流量加载完成</p>\n<p><img data-src=\"images/030b485295774299b3b5c71da4e1d48b.png\" alt=\"image.png\"></p>\n<p>21. 点击【扫描】，点击【仅测试】</p>\n<p><img data-src=\"images/ad65b72debe443fdb80dcbe019654dcf.png\" alt=\"image.png\"></p>\n<p>22. 等待测试结果</p>\n<p><img data-src=\"images/e9c9f52f51bb4138b66f3a0524f14311.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/8330ddbad423477a8f66206c6c07bf1c.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AppScan%E8%A2%AB%E5%8A%A8%E6%89%8B%E5%8A%A8%E6%8E%A2%E7%B4%A2%E6%89%AB%E6%8F%8F/",
            "url": "https://mangpumo.github.io/2023/01/11/AppScan%E8%A2%AB%E5%8A%A8%E6%89%8B%E5%8A%A8%E6%8E%A2%E7%B4%A2%E6%89%AB%E6%8F%8F/",
            "title": "AppScan被动手动探索扫描",
            "date_published": "2023-01-10T21:33:02.000Z",
            "content_html": "<h1 id=\"appscan被动手动探索扫描\"><a class=\"anchor\" href=\"#appscan被动手动探索扫描\">#</a> AppScan 被动手动探索扫描</h1>\n<p>被动式扫描：浏览器代理到 AppScan，然后进行手工操作，探索产生出的流量给 AppScan 进行扫描。</p>\n<p>他的优点是：扫描足够精准，覆盖率更加高，减少不必要的干扰包等等</p>\n<h2 id=\"1扫描基础准备\"><a class=\"anchor\" href=\"#1扫描基础准备\">#</a> 1. 扫描基础准备</h2>\n<h3 id=\"1火狐安装foxyproxy\"><a class=\"anchor\" href=\"#1火狐安装foxyproxy\">#</a> 1. 火狐安装 FoxyProxy</h3>\n<p>1. 打开扩展和主题</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">about:addons</span><br></pre></td></tr></table></figure></p>\n<p>2. 输入 FoxyProxy 点击【回车】搜索</p>\n<p><img data-src=\"images/image-20211220101102542.png\" alt=\"image-20211220101102542\"></p>\n<p>3. 点击 【FoxyProxy Standard】</p>\n<p><img data-src=\"images/image-20211220101117058.png\" alt=\"image-20211220101117058\"></p>\n<p>4. 点击【添加到 Firefox】</p>\n<p><img data-src=\"images/image-20211220101133106.png\" alt=\"image-20211220101133106\"></p>\n<h3 id=\"2马士兵靶场\"><a class=\"anchor\" href=\"#2马士兵靶场\">#</a> 2. 马士兵靶场</h3>\n<p>1. 进入靶场</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.bafangwy.com/battle</span><br></pre></td></tr></table></figure></p>\n<p>2. 启动 dvwa 靶场</p>\n<p><img data-src=\"images/image-20211220101210330.png\" alt=\"image-20211220101210330\"></p>\n<p><img data-src=\"images/image-20211220101218208.png\" alt=\"image-20211220101218208\"></p>\n<p>3. 访问靶场</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://39.101.162.123:64936/login.php</span><br><span class=\"line\">admin</span><br><span class=\"line\">password</span><br></pre></td></tr></table></figure></p>\n<p>4. 设置安全等级为 low</p>\n<p><img data-src=\"images/image-20211220101245688.png\" alt=\"image-20211220101245688\"></p>\n<p><img data-src=\"images/image-20211220101251950.png\" alt=\"image-20211220101251950\"></p>\n<h2 id=\"2扫描步骤\"><a class=\"anchor\" href=\"#2扫描步骤\">#</a> 2. 扫描步骤</h2>\n<h3 id=\"1选择扫描-手动探索-外部设备\"><a class=\"anchor\" href=\"#1选择扫描-手动探索-外部设备\">#</a> 1 选择【扫描】--【手动探索】--【外部设备】</h3>\n<p><img data-src=\"images/image-20211220101317215.png\" alt=\"image-20211220101317215\"></p>\n<p><img data-src=\"images/image-20211220101326318.png\" alt=\"image-20211220101326318\"></p>\n<h3 id=\"2火狐浏览器点击代理-选择选项\"><a class=\"anchor\" href=\"#2火狐浏览器点击代理-选择选项\">#</a> 2. 火狐浏览器点击【代理】-- 选择【选项】</h3>\n<p><img data-src=\"images/image-20211220101344037.png\" alt=\"image-20211220101344037\"></p>\n<h3 id=\"3点击添加\"><a class=\"anchor\" href=\"#3点击添加\">#</a> 3. 点击【添加】</h3>\n<p><img data-src=\"images/image-20211220101355972.png\" alt=\"image-20211220101355972\"></p>\n<h3 id=\"4输入标题appsacn添加ip127001添加端口49729点击保存\"><a class=\"anchor\" href=\"#4输入标题appsacn添加ip127001添加端口49729点击保存\">#</a> 4. 输入标题【appsacn】，添加 ip【127.0.0.1】，添加端口【49729】，点击保存</h3>\n<p><img data-src=\"images/image-20211220101409923.png\" alt=\"image-20211220101409923\"></p>\n<p><img data-src=\"images/image-20211220101417072.png\" alt=\"image-20211220101417072\"></p>\n<h3 id=\"5开启代理\"><a class=\"anchor\" href=\"#5开启代理\">#</a> 5. 开启代理</h3>\n<p><img data-src=\"images/image-20211220101432626.png\" alt=\"image-20211220101432626\"></p>\n<h3 id=\"6操作被测网站\"><a class=\"anchor\" href=\"#6操作被测网站\">#</a> 6. 操作被测网站</h3>\n<p><img data-src=\"images/image-20211220101444737.png\" alt=\"image-20211220101444737\"></p>\n<h3 id=\"7切换到appscan-点击停止记录\"><a class=\"anchor\" href=\"#7切换到appscan-点击停止记录\">#</a> 7. 切换到 appScan 点击【停止记录】</h3>\n<p><img data-src=\"images/image-20211220101456598.png\" alt=\"image-20211220101456598\"></p>\n<h3 id=\"8选择网站点击确定\"><a class=\"anchor\" href=\"#8选择网站点击确定\">#</a> 8. 选择网站，点击【确定】</h3>\n<p><img data-src=\"images/image-20211220101508810.png\" alt=\"image-20211220101508810\"></p>\n<p><img data-src=\"images/image-20211220101515856.png\" alt=\"image-20211220101515856\"></p>\n<h3 id=\"9点击扫描选择仅测试\"><a class=\"anchor\" href=\"#9点击扫描选择仅测试\">#</a> 9. 点击【扫描】，选择【仅测试】</h3>\n<p><img data-src=\"images/image-20211220101534029.png\" alt=\"image-20211220101534029\"></p>\n<h3 id=\"10点击是\"><a class=\"anchor\" href=\"#10点击是\">#</a> 10. 点击【是】</h3>\n<p><img data-src=\"images/image-20211220101544955.png\" alt=\"image-20211220101544955\"></p>\n<h3 id=\"11选则储存位置点击保存\"><a class=\"anchor\" href=\"#11选则储存位置点击保存\">#</a> 11. 选则储存位置，点击保存</h3>\n<p><img data-src=\"images/image-20211220101556686.png\" alt=\"image-20211220101556686\"></p>\n<h3 id=\"12等待测试结果\"><a class=\"anchor\" href=\"#12等待测试结果\">#</a> 12. 等待测试结果</h3>\n<p><img data-src=\"images/image-20211220101609909.png\" alt=\"image-20211220101609909\"></p>\n<p><img data-src=\"images/image-20211220101617427.png\" alt=\"image-20211220101617427\"></p>\n<h2 id=\"3appscan内置浏览器扫描\"><a class=\"anchor\" href=\"#3appscan内置浏览器扫描\">#</a> 3.appscan 内置浏览器扫描</h2>\n<h3 id=\"1点击手动探索选则appscan-chromium-浏览器\"><a class=\"anchor\" href=\"#1点击手动探索选则appscan-chromium-浏览器\">#</a> 1. 点击【手动探索】，选则【AppScan Chromium 浏览器】</h3>\n<p><img data-src=\"images/image-20211220101630427.png\" alt=\"image-20211220101630427\"></p>\n<h3 id=\"2点击是\"><a class=\"anchor\" href=\"#2点击是\">#</a> 2. 点击【是】</h3>\n<p><img data-src=\"images/image-20211220101650772.png\" alt=\"image-20211220101650772\"></p>\n<h3 id=\"3输入url-点击确定\"><a class=\"anchor\" href=\"#3输入url-点击确定\">#</a> 3. 输入 URL 点击【确定】</h3>\n<p><img data-src=\"images/image-20211220101703074.png\" alt=\"image-20211220101703074\"></p>\n<h3 id=\"4点击取消\"><a class=\"anchor\" href=\"#4点击取消\">#</a> 4. 点击取消</h3>\n<p><img data-src=\"images/image-20211220101715529.png\" alt=\"image-20211220101715529\"></p>\n<h3 id=\"5点击配置-参数和cookie-定制头\"><a class=\"anchor\" href=\"#5点击配置-参数和cookie-定制头\">#</a> 5. 点击【配置】--【参数和 cookie】--【定制头】</h3>\n<p><img data-src=\"images/image-20211220101727775.png\" alt=\"image-20211220101727775\"></p>\n<h3 id=\"6在火狐浏览器复制cookie\"><a class=\"anchor\" href=\"#6在火狐浏览器复制cookie\">#</a> 6. 在火狐浏览器复制 cookie</h3>\n<p><img data-src=\"images/image-20211220101740026.png\" alt=\"image-20211220101740026\"></p>\n<h3 id=\"7切换到appscan点击添加cookie点击确定\"><a class=\"anchor\" href=\"#7切换到appscan点击添加cookie点击确定\">#</a> 7. 切换到 AppScan，点击【+】，添加 cookie，点击【确定】</h3>\n<p><img data-src=\"images/image-20211220101752959.png\" alt=\"image-20211220101752959\"></p>\n<h3 id=\"8点击确定\"><a class=\"anchor\" href=\"#8点击确定\">#</a> 8. 点击确定</h3>\n<p><img data-src=\"images/image-20211220101803601.png\" alt=\"image-20211220101803601\"></p>\n<h3 id=\"9点击手动探索选则appscan-chromium-浏览器\"><a class=\"anchor\" href=\"#9点击手动探索选则appscan-chromium-浏览器\">#</a> 9. 点击【手动探索】，选则【AppScan Chromium 浏览器】</h3>\n<p><img data-src=\"images/image-20211220101815512.png\" alt=\"image-20211220101815512\"></p>\n<h3 id=\"10进行手工探索完成后点击确定\"><a class=\"anchor\" href=\"#10进行手工探索完成后点击确定\">#</a> 10. 进行手工探索，完成后，点击【确定】</h3>\n<p><img data-src=\"images/image-20211220101829329.png\" alt=\"image-20211220101829329\"></p>\n<p><img data-src=\"images/image-20211220101836928.png\" alt=\"image-20211220101836928\"></p>\n<h3 id=\"11点击确定\"><a class=\"anchor\" href=\"#11点击确定\">#</a> 11. 点击【确定】</h3>\n<p><img data-src=\"images/image-20211220101848039.png\" alt=\"image-20211220101848039\"></p>\n<p><img data-src=\"images/image-20211220101854695.png\" alt=\"image-20211220101854695\"></p>\n<h3 id=\"12点击扫描-仅测试\"><a class=\"anchor\" href=\"#12点击扫描-仅测试\">#</a> 12. 点击【扫描】--【仅测试】</h3>\n<p><img data-src=\"images/image-20211220101906463.png\" alt=\"image-20211220101906463\"></p>\n<p>13. 点击【是】</p>\n<p><img data-src=\"images/image-20211220101916451.png\" alt=\"image-20211220101916451\"></p>\n<h3 id=\"14选择保存位置点击保存\"><a class=\"anchor\" href=\"#14选择保存位置点击保存\">#</a> 14. 选择保存位置，点击【保存】</h3>\n<p><img data-src=\"images/image-20211220101929768.png\" alt=\"image-20211220101929768\"></p>\n<h3 id=\"15等待扫描结果\"><a class=\"anchor\" href=\"#15等待扫描结果\">#</a> 15. 等待扫描结果</h3>\n<p><img data-src=\"images/image-20211220101941766.png\" alt=\"image-20211220101941766\"></p>\n<p><img data-src=\"images/image-20211220101948472.png\" alt=\"image-20211220101948472\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AppScan%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85/",
            "url": "https://mangpumo.github.io/2023/01/11/AppScan%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%89%E8%A3%85/",
            "title": "AppScan介绍和安装",
            "date_published": "2023-01-10T21:32:05.000Z",
            "content_html": "<h1 id=\"第一节-appscan介绍和安装\"><a class=\"anchor\" href=\"#第一节-appscan介绍和安装\">#</a> 第一节 - AppScan 介绍和安装</h1>\n<h2 id=\"1简介\"><a class=\"anchor\" href=\"#1简介\">#</a> 1. 简介</h2>\n<p>Appscan 10 中文版是是全新网络安全漏洞扫描软件，软件可以直接可以对 OS 命令、SSRF 和 XXE 攻击等漏洞进行检测，使得漏洞检测更加容易，提高漏洞的扫描效率。软件同时支持动态、静态、互动分析三种不同的测试功能，可自动化扫描检测网络或者系统安全漏洞，并采用全新的爬虫技术，能够根据网站入口自动摸取网页链接进行安全扫描，提供了扫描、报告和修复建议等功能。</p>\n<h2 id=\"2功能特色\"><a class=\"anchor\" href=\"#2功能特色\">#</a> 2. 功能特色</h2>\n<p>1、动态分析（“黑盒扫描”）</p>\n<p>这是主要方法，用于测试和评估运行时的应用程序响应。</p>\n<p>2、静态分析（“白盒扫描”）【代码审计】</p>\n<p>这是用于在完整 Web 页面上下文中分析 JavaScript 代码的独特技术。</p>\n<p>3、交互分析（“glass box 扫描”）</p>\n<p>动态测试引擎可与驻留在 Web 服务器本身上的专用 glass-box 代理程序交互，从而使软件能够比仅通过传统动态测试时识别更多问题并具有更高准确性。</p>\n<p>4、软件的高级功能包括：</p>\n<p>常规和法规一致性报告，并提供超过 40 个不同的开箱即用模板。</p>\n<h2 id=\"3扫描流程\"><a class=\"anchor\" href=\"#3扫描流程\">#</a> 3. 扫描流程</h2>\n<p><img data-src=\"images/image-20211201203930801.png\" alt=\"image-20211201203930801\"></p>\n<p><img data-src=\"images/image-20211201203950394.png\" alt=\"image-20211201203950394\"></p>\n<h2 id=\"4扫描方式\"><a class=\"anchor\" href=\"#4扫描方式\">#</a> 4. 扫描方式</h2>\n<p>Static： 静态分析 （白盒扫描）   源码分析：支持（Taint analysis\\pattern matching）</p>\n<p>Dynamic： 动态分析 （黑盒扫描）</p>\n<p>Hybrid：混合分析（黑，白）【知道源代码】</p>\n<p>Run-Time： 运行时分析（玻璃盒）【不知道源代码】</p>\n<p>Client-Side：客户端分析 (Javascript)</p>\n<h2 id=\"5安装与破解\"><a class=\"anchor\" href=\"#5安装与破解\">#</a> 5. 安装与破解</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEueG4tLWxkcng4dGJhMjM0N2JjYTA3OXMuTkVU\">1. 安装前需安装.NET</span> Framework 4.7.2（已安装请忽略）</p>\n<p>2. 双击运行 Appscan_Setup_1002.exe，选择安装语言，点击确定；</p>\n<p><img data-src=\"images/image-20211201204315728.png\" alt=\"image-20211201204315728\"></p>\n<p>3. 选择 I accept，点击下一步；</p>\n<p><img data-src=\"images/image-20211201204336720.png\" alt=\"image-20211201204336720\"></p>\n<p>4. 更改安装目录，点击安装；（注意记录下这个目录后面破解需要用到）</p>\n<p><img data-src=\"images/image-20211201204403352.png\" alt=\"image-20211201204403352\"></p>\n<p>5. 等待安装直到完成；</p>\n<p><img data-src=\"images/image-20211201204422500.png\" alt=\"image-20211201204422500\"></p>\n<p>6. 将破解文件 AppScanSDK.dll 和 HclLicenseProvider.dll 拷贝到安装目录 D:\\Program Files (x86)\\HCL\\AppScan Standard 下替换原来的文件</p>\n<p><img data-src=\"images/image-20211201204444993.png\" alt=\"image-20211201204444993\"></p>\n<p><img data-src=\"images/image-20211201204453175.png\" alt=\"image-20211201204453175\"></p>\n<p>7. 双击桌面图标运行 AppScan；</p>\n<p><img data-src=\"images/image-20211201204517852.png\" alt=\"image-20211201204517852\"></p>\n<p>8. 安装成功</p>\n<p><img data-src=\"images/image-20211201204548270.png\" alt=\"image-20211201204548270\"></p>\n<p><img data-src=\"images/image-20211201204557166.png\" alt=\"image-20211201204557166\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Goby%E5%92%8CAWVS%E8%81%94%E5%8A%A8/",
            "url": "https://mangpumo.github.io/2023/01/11/Goby%E5%92%8CAWVS%E8%81%94%E5%8A%A8/",
            "title": "Goby和AWVS联动",
            "date_published": "2023-01-10T21:31:00.000Z",
            "content_html": "<h1 id=\"第五节-gobyawvs-联动\"><a class=\"anchor\" href=\"#第五节-gobyawvs-联动\">#</a> 第五节 - Goby+AWVS 联动</h1>\n<h2 id=\"1goby简介\"><a class=\"anchor\" href=\"#1goby简介\">#</a> 1.Goby 简介</h2>\n<p>Goby 是针对目标企业梳理最全面的工具，同构 goby 可以清晰的扫描出 ip 地址开放的端口，以及端口对应的服务，于此同事会根据开放的端口及应用进行实战化的测试，并不在乎他的中低危害漏洞，而更在乎的是它能直接 getshell 的漏洞。</p>\n<p>AWVS 这款工具大家应该都比较熟悉了，他是针对 web 的轻量级的漏洞扫描工具。也就是根据我们提供的被扫描地址，快速的扫描出其所有的漏洞，包含高中低及信息泄露等漏洞。</p>\n<p>结合我们前面的介绍，大家想想，Goby 探测出 ip 地址开放的所有服务及应用，然后直接丢给 AWVS，那么 AWVS 是不是就可以直接进行扫描了，然后存在的网站存在的漏扫是不是一幕了然了，还需要我们去手动挖么，很显然了啊，这俩工具一联动，躺着收洞洞呗。</p>\n<p>Goby 错误异常汇总</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi5nb2JpZXMub3JnL2ZhcS5odG1s\">https://cn.gobies.org/faq.html</span></p>\n<h2 id=\"2goby安装\"><a class=\"anchor\" href=\"#2goby安装\">#</a> 2.Goby 安装</h2>\n<p>1. 在附件中下载 goby-win-x64-1.9.320.zip</p>\n<p><img data-src=\"images/cae347217f2e4edb8f49885f9c31a6f2.png\" alt=\"image.png\"></p>\n<p>2. 解压到喜欢的位置</p>\n<p><img data-src=\"images/b25b706b644b4b54a1c5444d7773c6ff.png\" alt=\"image.png\"></p>\n<p>3. 解压目录找到 Goby.exe 右键 -- 管理员运行</p>\n<p><img data-src=\"images/7c563477fdff4c5a92a428fa38faba5f.png\" alt=\"image.png\"></p>\n<p>4. 点击【是】</p>\n<p><img data-src=\"images/1c17dae4b2724ad9a4609c8209c568b0.png\" alt=\"image.png\"></p>\n<p>5. 点击【More】如图所示，点击【EN】，点击【CN】</p>\n<p><img data-src=\"images/d1622b88bc2e43fd94bd7d394c2e6ba9.png\" alt=\"image.png\"></p>\n<p>6. 点击【扩展程序】，搜索【AWVS】，点击【下载】</p>\n<p><img data-src=\"images/94e1952d4b714acd8b24bdc3b4c50976.png\" alt=\"image.png\"></p>\n<p>7. 点击【已下载】</p>\n<p><img data-src=\"images/39fed8e90aeb463b8e99cbb721c626b0.png\" alt=\"image.png\"></p>\n<p>8. 点击【设置】</p>\n<p><img data-src=\"images/6faa54cf76814488b5cc2e8c83b41efb.png\" alt=\"image.png\"></p>\n<p>9. 切换到【AWVS】，点击【用户】，点击【Profile】</p>\n<p><img data-src=\"images/fa740fd2d32c46b5ad8cdd850deefa46.png\" alt=\"image.png\"></p>\n<p>10. 找到【API Key】，点击【Generate New Api Key】</p>\n<p><img data-src=\"images/23a868079ed34c498768f5d1bfa4a755.png\" alt=\"image.png\"></p>\n<p>11. 点击【Show】</p>\n<p><img data-src=\"images/3873ed2d97d04a4a8e8b8f85150c9e5d.png\" alt=\"image.png\"></p>\n<p>12. 点击【copy】</p>\n<p><img data-src=\"images/f8ea9c32faf2473b90555bca447f6a83.png\" alt=\"image.png\"></p>\n<p>13. 切换【Goby】，粘贴【API Key】和输入【AVWS WEB ADDress】，点击【Confirm】</p>\n<p><img data-src=\"images/8545ca84026847929bd53a6285f97edf.png\" alt=\"image.png\"></p>\n<p>14. 点击【设置】，点击【扩展设置】，点击【确认】</p>\n<p><img data-src=\"images/701dd8ccce124f31979a9b6600a5e74a.png\" alt=\"image.png\"></p>\n<h2 id=\"3安装npcap-09995exe\"><a class=\"anchor\" href=\"#3安装npcap-09995exe\">#</a> 3. 安装 npcap-0.9995.exe</h2>\n<p>1. 右键点击附件里的【npcap-0.9995.exe】，选则【以管理员身份运行】</p>\n<p><img data-src=\"images/f96ab014dfcd46d4a650b11b35f8f336.png\" alt=\"image.png\"></p>\n<p>2. 点击【是】</p>\n<p><img data-src=\"images/d41404e228f64985a88963772328a880.png\" alt=\"image.png\"></p>\n<p>3. 点击【I Agree】</p>\n<p><img data-src=\"images/3f7a7549f8cf4dab8d7bdd02685d2388.png\" alt=\"image.png\"></p>\n<p>4. 点击【Install】</p>\n<p><img data-src=\"images/27389ce180dc455c9664b7ba65497d98.png\" alt=\"image.png\"></p>\n<p>5. 点击【确定】</p>\n<p><img data-src=\"images/36733835588743a9a6f48f1c8995d86f.png\" alt=\"image.png\"></p>\n<p>6. 点击【Next】</p>\n<p><img data-src=\"images/fa9e44c0f7ea43f580eaa960ffd22238.png\" alt=\"image.png\"></p>\n<p>7. 点击【Finish】</p>\n<p><img data-src=\"images/7fd9171e27a24a3db7b5f7ae0dd12f1b.png\" alt=\"image.png\"></p>\n<h2 id=\"4gobyawvs联动扫描\"><a class=\"anchor\" href=\"#4gobyawvs联动扫描\">#</a> 4.Goby+AWVS 联动扫描</h2>\n<p>1. 点击【扫描】</p>\n<p><img data-src=\"images/e745ef82f410486a8c29fb843f2461df.png\" alt=\"image.png\"></p>\n<p>2. 输入 ip 进行扫描，点击【开始】</p>\n<p><img data-src=\"images/3fbba4b002b34c17b9cef3f28df2199c.png\" alt=\"image.png\"></p>\n<p>3. 等待扫描结果</p>\n<p><img data-src=\"images/d82b2aa35ea04f55bd3657510b9b4ee9.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/a1555b1037414aa89d64974f5de7aa2d.png\" alt=\"image.png\"></p>\n<p>4. 点击【Web 检测】</p>\n<p><img data-src=\"images/0d6585029108492b92257c9fa108cba2.png\" alt=\"image.png\"></p>\n<p>5. 点击【awvs】扫描</p>\n<p><img data-src=\"images/cf99391ca82e4b0db9569ca2ff4e6585.png\" alt=\"image.png\"></p>\n<p>6. 切换到【AWVS】，点击【Scans】，点击【Goby 传过来的任务】</p>\n<p><img data-src=\"images/8ce4d62b7ce141fdbf18e01a3150afe2.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/1f1055af4d6848338edfd6a5dd4b7de1.png\" alt=\"image.png\"></p>\n<p>7. 切回到【Goby】，点击【扩展程序】, 点击【awvs】</p>\n<p><img data-src=\"images/f3d160eed543449cafc8a417c8d6f85d.png\" alt=\"image.png\"></p>\n<p>8. 选择报告模板，点击【Generate】, 生成报告</p>\n<p><img data-src=\"images/05d00d10c2bc4de8b8d857f993d32588.png\" alt=\"image.png\"></p>\n<p>9. 点击【Export】可以导出报告</p>\n<p><img data-src=\"images/a93fcf070fa84692ae562e68e156cdb4.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AWVS%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90/",
            "url": "https://mangpumo.github.io/2023/01/11/AWVS%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A%E5%88%86%E6%9E%90/",
            "title": "AWVS扫描报告分析",
            "date_published": "2023-01-10T21:30:12.000Z",
            "content_html": "<h1 id=\"第四节-扫描报告分析\"><a class=\"anchor\" href=\"#第四节-扫描报告分析\">#</a> 第四节 - 扫描报告分析</h1>\n<h2 id=\"awvs报告类型\"><a class=\"anchor\" href=\"#awvs报告类型\">#</a> AWVS 报告类型</h2>\n<p>Standard Reports：标准报告</p>\n<p>Affected Items：受影响项目</p>\n<p>Comprehensive (new)：综合（新）</p>\n<p>Developer：开发者</p>\n<p>Executive Summary：执行摘要</p>\n<p>Quick：快速报告</p>\n<h2 id=\"compliance-reports合规报告\"><a class=\"anchor\" href=\"#compliance-reports合规报告\">#</a> Compliance Reports：合规报告</h2>\n<p>CWE / SANS Top 25：SANS (SysAdmin, Audit, Network, Security) 研究所是美国一家信息安全培训与认证机构</p>\n<p>DISA STIG：DISA STIG 是指提供技术指南（STIG — 安全技术实施指南）的组织（DISA — 国防信息系统局）</p>\n<p>HIPAA：HIPAA 标准</p>\n<p>ISO 27001：国际标准</p>\n<p>NIST SP 800-53：联邦信息系统标准</p>\n<p>OWASP Top 10 2013：开放式 Web 应用程序安全项目 2013 标准</p>\n<p>OWASP Top 10 2017：开放式 Web 应用程序安全项目 2017 标准</p>\n<p>PCI DSS 3.2：即支付卡行业数据安全标准</p>\n<p>Sarbanes Oxley：萨班斯法案标准</p>\n<p>WASC Threat Classification：WASC 组织标准</p>\n<h2 id=\"最常用的报告类型\"><a class=\"anchor\" href=\"#最常用的报告类型\">#</a> 最常用的报告类型：</h2>\n<p>1.Executive Summary：执行摘要 给公司大领导看，只关注整体情况，不关注具体细节</p>\n<p>2.Comprehensive (new)：综合（新）：一般给 QA 和产品经理看</p>\n<p>3.Developer：开发者：给开发人员看</p>\n<p>4.OWASP Top 10 2017 行业报告的代表</p>\n<p>5.WASC Threat Classification 行业报告的代表</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AWVS%E6%89%AB%E6%8F%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/",
            "url": "https://mangpumo.github.io/2023/01/11/AWVS%E6%89%AB%E6%8F%8FWeb%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/",
            "title": "AWVS扫描Web应用程序",
            "date_published": "2023-01-10T21:29:37.000Z",
            "content_html": "<h1 id=\"第三节-awvs扫描web应用程序\"><a class=\"anchor\" href=\"#第三节-awvs扫描web应用程序\">#</a> 第三节 - AWVS 扫描 Web 应用程序</h1>\n<h2 id=\"1账户密码登录扫描\"><a class=\"anchor\" href=\"#1账户密码登录扫描\">#</a> 1. 账户密码登录扫描</h2>\n<p>1. 点击【Targets】，点击【add Target】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/36991ed7d4ba43f5aff2ed560749d35c.png\" alt=\"image.png\"></p>\n<p>2. 输入扫描地址和扫描描述，点击【save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/a92e61f1c3cf479ca7c04a8105bc617b.png\" alt=\"image.png\"></p>\n<p>3. 点击【Site Login】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/cc6082a28000438fb243888a3b5327f5.png\" alt=\"image.png\"></p>\n<p>4. 选择【try to auto-login into the site】, 输入登录地址，用户名【xiaogang】，密码【123456】，重复密码【123456】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4f5f3ed8e050454da04304dfbf077784.png\" alt=\"image.png\"></p>\n<p>5. 点击【HTTP Authentication】的开启按钮</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/ca1b8fd89df143d8a32a114a9f971fa6.png\" alt=\"image.png\"></p>\n<p>6. 输入用户名【小刚】, 密码【123456】，重复密码【123456】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/02d9c182fc4a4aaf84186c293614aac5.png\" alt=\"image.png\"></p>\n<p>7. 点击【save】，然后点击【Scan】按钮</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/d9df48791deb4782bf8e421cc69d64a8.png\" alt=\"image.png\"></p>\n<p>8. 选择扫描设置，如图所示，点击【create Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4ebab4587a3a4abf81832bc4989c26ba.png\" alt=\"image.png\"></p>\n<p>9. 点击扫描目标，查看扫描具体内容</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/9e11ed8ed6f24a76a46002b080400de5.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/5e96d1f03e154a0f822790fa2c0e68ec.png\" alt=\"image.png\"></p>\n<p>10. 等待扫描完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/d78be9706759447580549e5988e03992.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4d217c7e40e74a27b0ef45cc199e8164.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/c0a379d78ce840c8a7e53eb742c00063.png\" alt=\"image.png\"></p>\n<h2 id=\"2利用录制登录序列脚本扫描\"><a class=\"anchor\" href=\"#2利用录制登录序列脚本扫描\">#</a> 2. 利用录制登录序列脚本扫描</h2>\n<p>1. 点击【Targets】，点击【add Target】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/339ff784fc8a4afb9ff6764f19515ef6.png\" alt=\"image.png\"></p>\n<p>2. 输入扫描地址和扫描描述，点击【save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/776d1d5413c344f9b0971f516d601343.png\" alt=\"image.png\"></p>\n<p>3. 点击【Site Login】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/7739d66d7aac4c5da0480d475773b3e8.png\" alt=\"image.png\"></p>\n<p>4. 选择【Use pre-recorded login sequence 】, 点击【New】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/994d395f718b45499787edd45a19b638.png\" alt=\"image.png\"></p>\n<p>5. 点击【登录】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/c29d1e54000945b192df336e08c91347.png\" alt=\"image.png\"></p>\n<p>6. 输入用户名【xiaogang】，密码【123456】, 点击【登录】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/cc5e9e0302c54028812dacf84cb06860.png\" alt=\"image.png\"></p>\n<p>7. 检查登录脚本流程是否完整，点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/e62eec33761c4c2094454c341bb51095.png\" alt=\"image.png\"></p>\n<p>8. 点击【xaiogang_vip3】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/387c0b1b3d4a4bdab0fd2ff9f7f63927.png\" alt=\"image.png\"></p>\n<p>9. 点击【Restrict requests to path】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/fddbf7c1804e41548435d3528683d093.png\" alt=\"image.png\"></p>\n<p>10. 点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/ce0add0774944ffe9d8927a577cb2ef6.png\" alt=\"image.png\"></p>\n<p>11. 点击【确定】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/98c4b3e7a6dc419eb47b7c7484cd2031.png\" alt=\"image.png\"></p>\n<p>12. 点击【Finish】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/696267829a0b43fc9e85b95fca2d88f8.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/dc773606b84d4711bf43c4e6dc931ce0.png\" alt=\"image.png\"></p>\n<p>13. 点击【Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/485e9f63b9b04b54b4b0d167fcce6109.png\" alt=\"image.png\"></p>\n<p>14. 选怎扫描配置，如下图所示，点击【Create Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/1a594edc6fd04f2aa029c8bdd8243c61.png\" alt=\"image.png\"></p>\n<p>15. 点击目标连接，查看具体扫描信息</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/dbb993767f214481b9d2e73f3edd6341.png\" alt=\"image.png\"></p>\n<p>16. 等待扫描完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/03e6d16afaec4f48b73bfe009796c34f.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/fd0c824cc75d4e0daaed7d6d3aeeeb82.png\" alt=\"image.png\"></p>\n<h2 id=\"3利用定制cookie扫描\"><a class=\"anchor\" href=\"#3利用定制cookie扫描\">#</a> 3. 利用定制 cookie 扫描</h2>\n<p>扫描过程会遇到网站 存在 手机验证码，图形验证码，滑动验证等等，这时候想要深度扫描时，就需要进行登录绕过。最长用的手段就是定制 cookie 绕过。</p>\n<p>1. 点击【Targets】，点击【add Target】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/773081aad11743e1afa80907ea1cee93.png\" alt=\"image.png\"></p>\n<p>2. 输入扫描地址和扫描描述，点击【save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/38cb04b93af647d8b728150d39621a16.png\" alt=\"image.png\"></p>\n<p>3. 点击【Advanced】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/5825a551928b43219f0fc9af60192257.png\" alt=\"image.png\"></p>\n<p>4. 点击【Custom Cookies】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/fcdc3b768b124c3facf16d1b48f6b501.png\" alt=\"image.png\"></p>\n<p>5. 输入被测网站网址</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/b0275ea0dd1d40a08419dcb420fd0cc3.png\" alt=\"image.png\"></p>\n<p>6. 切换到其他浏览器，获取网站的 cookie 值</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/152a0512b80e4849841a679a47a39523.png\" alt=\"image.png\"></p>\n<p>7. 切换会 AWVS，输入 cookie 的值，点击【+】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/649473f702434786b796dbc2d2c288fa.png\" alt=\"image.png\"></p>\n<p>8. 点击【save】，然后点击【Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/e4875f76ecdf4c018469b5a95a64c094.png\" alt=\"image.png\"></p>\n<p>9. 设置扫描选项，如下图所示，点击【Create Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/5ffa52bd590e42048dfb0e8158b83211.png\" alt=\"image.png\"></p>\n<p>10. 点击扫描的网站地址，查看扫描信息</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/4e18d51428f741c9a5e8da8cdda0f3c0.png\" alt=\"image.png\"></p>\n<p>11. 等待扫描完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/1e36af11e5b14c9ca46f1f4bb1fd9ca0.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1642128985000/979340ee6370462da77cfb93f83b7407.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AWVS%E6%89%AB%E6%8F%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "url": "https://mangpumo.github.io/2023/01/11/AWVS%E6%89%AB%E6%8F%8F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",
            "title": "AWVS扫描环境搭建",
            "date_published": "2023-01-10T21:28:42.000Z",
            "content_html": "<h1 id=\"第二节-扫描环境搭建\"><a class=\"anchor\" href=\"#第二节-扫描环境搭建\">#</a> 第二节 - 扫描环境搭建</h1>\n<h2 id=\"1phpstudy_pro安装\"><a class=\"anchor\" href=\"#1phpstudy_pro安装\">#</a> 1.phpstudy_pro 安装</h2>\n<p>1. 右键【phpstudy_x64_8.1.1.3】，选则【以管理员身份运行】</p>\n<p><img data-src=\"images/b356aebd026a401ab1280cd88de7dbc1.png\" alt=\"image.png\"></p>\n<p>2. 点击【是】</p>\n<p><img data-src=\"images/72a8f98ad53c4f8386286be533efeb84.png\" alt=\"image.png\"></p>\n<p>3. 点击【自定义选项】</p>\n<p><img data-src=\"images/0ec2b36d494e47aaa18b13d6ffff66bd.png\" alt=\"image.png\"></p>\n<p>4. 选择喜欢的位置安装</p>\n<p><img data-src=\"images/9aa79d49261d403b88ae8e718edd8cf8.png\" alt=\"image.png\"></p>\n<p>5. 点击【立即安装】</p>\n<p><img data-src=\"images/53c37dd487324979b5c1bf8bbe67241a.png\" alt=\"image.png\"></p>\n<p>6. 等待安装</p>\n<p><img data-src=\"images/7abe81557a3641ee8bd5df7c023f2d46.png\" alt=\"image.png\"></p>\n<p>7. 点击【安装完成]</p>\n<p><img data-src=\"images/4de8ebb124e148e380e1cf41d8ac17fb.png\" alt=\"image.png\"></p>\n<p>8. 点击启动【Apache】</p>\n<p><img data-src=\"images/da5592a33fd64576b9595e61b879d6e2.png\" alt=\"image.png\"></p>\n<p>9. 点击【允许访问】</p>\n<p><img data-src=\"images/22dfca13a18c48fc903e04d49fcf60c5.png\" alt=\"image.png\"></p>\n<p>10. 点击启动【MySQL】</p>\n<p><img data-src=\"images/946782beb70d48b88eea87240e7634a3.png\" alt=\"image.png\"></p>\n<p>11. 点击【允许访问】</p>\n<p><img data-src=\"images/5d0618a415824060ac2cb34d37df5f9d.png\" alt=\"image.png\"></p>\n<p>12. 按照下图确认服务启动状态</p>\n<p><img data-src=\"images/054b9c7efd944364af2be96892efc5d5.png\" alt=\"image.png\"></p>\n<h2 id=\"2设置扫描靶场的数据库\"><a class=\"anchor\" href=\"#2设置扫描靶场的数据库\">#</a> 2. 设置扫描靶场的数据库</h2>\n<p>1. 点击【数据库】</p>\n<p><img data-src=\"images/34958b63d9cb4ab591f43c4912d366c9.png\" alt=\"image.png\"></p>\n<p>2. 点击【修改 root 密码】</p>\n<p><img data-src=\"images/4d75a477c5004794b2d8c4dc71016167.png\" alt=\"image.png\"></p>\n<p>3. 输入新密码【123456】，点击【确定】</p>\n<p><img data-src=\"images/b4181c549ce84ba3ba82bb0cd2d9b373.png\" alt=\"image.png\"></p>\n<p>4. 点击【好】</p>\n<p><img data-src=\"images/6b4d5ece9ae84759ba5fc05e214618cc.png\" alt=\"image.png\"></p>\n<p>5. 点击【创建数据库】</p>\n<p><img data-src=\"images/7604abbea2be498fba9bfbcc809bfefa.png\" alt=\"image.png\"></p>\n<p>6. 输入数据库名称【gkk】，用户名【gkk】，密码【123456】，点击【确认】</p>\n<p><img data-src=\"images/a111522dd2024de88a93dd7408e3f008.png\" alt=\"image.png\"></p>\n<p>7. 点击【好】</p>\n<p><img data-src=\"images/fe06b9a505c741568a5fc0749de93eaf.png\" alt=\"image.png\"></p>\n<p>8. 按照下图核对数据信息（点击密码 ****** 就可以显示成明文）</p>\n<p><img data-src=\"images/aec1cf31b5114c7fbc5eb7429517d1b1.png\" alt=\"image.png\"></p>\n<p>9. 点击【软件管理】</p>\n<p><img data-src=\"images/a165762f120f430a9905c9a47e7b665e.png\" alt=\"image.png\"></p>\n<p>10. 点击【数据库工具（客户端）】, 点击【安装】</p>\n<p><img data-src=\"images/fb3eee3d72884553910fe7e01240a387.png\" alt=\"image.png\"></p>\n<p>11. 安装成功后，点击【管理】</p>\n<p><img data-src=\"images/62406be89b314b64ae478775b54ab678.png\" alt=\"image.png\"></p>\n<p>12. 点击【打开】</p>\n<p><img data-src=\"images/ccb4bb3c02084648a66b3232ae8c2f8a.png\" alt=\"image.png\"></p>\n<p>13. 点击【确定】</p>\n<p><img data-src=\"images/c3439b02b9e84aed888cd1d29f6f23ec.png\" alt=\"image.png\"></p>\n<p>14. 输入用户名【root】，密码【123456】，点击【确定】</p>\n<p><img data-src=\"images/475dca31e00c47d1b1407bbf83d0c714.png\" alt=\"image.png\"></p>\n<p>15. 点击【确定】</p>\n<p><img data-src=\"images/c30021f4fcce403694b9ddf7770c37ed.png\" alt=\"image.png\"></p>\n<p>16. 点击选中【gkk】</p>\n<p><img data-src=\"images/bf0e4a513f7f4ceb9a0afefb7c9e1fb0.png\" alt=\"image.png\"></p>\n<p>17. 点击【文件】，选则【输入】，点击【SQL 文件】</p>\n<p><img data-src=\"images/670f0df400d9463e895aab34ed22cd10.png\" alt=\"image.png\"></p>\n<p>18. 选择课程附件里带的【gkk.sql】，点击【打开】</p>\n<p><img data-src=\"images/170a264dbf7647829bbb4fbe0e0ab410.png\" alt=\"image.png\"></p>\n<p>19. 导入完成后，点击【关闭】</p>\n<p><img data-src=\"images/cae74489ba3540af8c7ea9f4ff6e6e6e.png\" alt=\"image.png\"></p>\n<p>20. 根据下图查看数据库表的配置，必须和课件一致才可以</p>\n<p><img data-src=\"images/722fea8aa43c4cacb4e503ab5c0d1b6b.png\" alt=\"image.png\"></p>\n<h2 id=\"3部署靶场网站\"><a class=\"anchor\" href=\"#3部署靶场网站\">#</a> 3. 部署靶场网站</h2>\n<p>1. 将课件里带的两个靶场【have_code】【no_code】复制到一个纯英文的路径下</p>\n<p>have_code: 登录有验证码靶场</p>\n<p>no_code: 登录没有验证码靶场</p>\n<p><img data-src=\"images/d75060e8774b4a949f32e5bd09ccf047.png\" alt=\"image.png\"></p>\n<p>2. 打开 phpstudy_pro, 点击【网站】</p>\n<p><img data-src=\"images/4172bad9154943dc802e55c24cbf374c.png\" alt=\"image.png\"></p>\n<p>3. 点击【创建网站】</p>\n<p><img data-src=\"images/bf201c4497e8480c9e771171ff6bac41.png\" alt=\"image.png\"></p>\n<p>4. 输入域名【127.0.0.1】，端口改为【81】，点击【浏览】</p>\n<p><img data-src=\"images/fa04d3e4f01a4db9ba18aea6e6ee213b.png\" alt=\"image.png\"></p>\n<p>5. 选择【no_code】靶场，点击【选择文件夹】</p>\n<p><img data-src=\"images/9c75e6911177447796da41d3ef745aa5.png\" alt=\"image.png\"></p>\n<p>6. 点击【确定】</p>\n<p><img data-src=\"images/e1bd846aa81c42a7929f0ce3794b44bd.png\" alt=\"image.png\"></p>\n<p>7. 点击【好】</p>\n<p><img data-src=\"images/691acf90a32e4edfae340933792db33f.png\" alt=\"image.png\"></p>\n<p>8. 点击【创建网站】</p>\n<p><img data-src=\"images/8158d81ba2c14ffa98b9dd5c67f64a98.png\" alt=\"image.png\"></p>\n<p>9. 输入域名【127.0.0.1】，端口改为【82】，点击【浏览】</p>\n<p><img data-src=\"images/ca9307144fb74a1286a00fe2adaade51.png\" alt=\"image.png\"></p>\n<p>10. 选择【have_code】，点击【选择文件】</p>\n<p><img data-src=\"images/a9f6188674c141f288ae3e2bfea04051.png\" alt=\"image.png\"></p>\n<p>11. 点击【确定】</p>\n<p><img data-src=\"images/c05237bc4a71445ca3ba733b6cf22410.png\" alt=\"image.png\"></p>\n<p>12. 点击【好】</p>\n<p><img data-src=\"images/ada2b949cdaa4bd7a0e88b89c7f4934d.png\" alt=\"image.png\"></p>\n<p>13. 点击【首页】</p>\n<p><img data-src=\"images/cd8d650c7a1a4b60adc1a585c6e49b0b.png\" alt=\"image.png\"></p>\n<p>14. 点击【重启】，重启 Apache</p>\n<p><img data-src=\"images/78a1d78620be4d37b535e6dff4e024f6.png\" alt=\"image.png\"></p>\n<p>15. 重启完成后，浏览器访问 127.0.0.1:81/login.php</p>\n<p><img data-src=\"images/58ca7dc93cd642a68b3d165a6f022327.png\" alt=\"image.png\"></p>\n<p>16. 输入用户名【xiaogang】，密码【123456】，点击登录，登录成功则环境部署完成</p>\n<p><img data-src=\"images/6e1a826bb7a94d639d71df8c37824261.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/bdcf29bf83054b429584057f86b36a5e.png\" alt=\"image.png\"></p>\n<p>17. 浏览器访问 127.0.0.1:82/login.php</p>\n<p><img data-src=\"images/94faa4aa2240470db79a806592c16e4c.png\" alt=\"image.png\"></p>\n<p>18. 输入用户名【xiaogang】，密码【123456】，验证码，点击登录，登录成功则环境部署完成</p>\n<p><img data-src=\"images/53ac7dd9018d4eee8db144d3510bdc0b.png\" alt=\"image.png\"></p>\n<p><img data-src=\"images/b15d0192e9804e9db873ab1d2467b9cf.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AWVS%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/",
            "url": "https://mangpumo.github.io/2023/01/11/AWVS%E5%AE%89%E8%A3%85%E4%B8%8E%E6%BF%80%E6%B4%BB/",
            "title": "AWVS安装与激活",
            "date_published": "2023-01-10T21:27:42.000Z",
            "content_html": "<h1 id=\"第一节-awvs安装与激活\"><a class=\"anchor\" href=\"#第一节-awvs安装与激活\">#</a> 第一节 - AWVS 安装与激活</h1>\n<h2 id=\"1awvs简介\"><a class=\"anchor\" href=\"#1awvs简介\">#</a> 1.AWVS 简介</h2>\n<p>AWVS（Acunetix Web Vulnerability Scanner）是一款知名的网络漏洞扫描工具，通过网络爬虫测试网站安全，检测流行的 Web 应用攻击，如跨站脚本、sql 注入等。据统计，75% 的互联网攻击目标是基于 Web 的应用程序。</p>\n<h2 id=\"2为什么要用awvs\"><a class=\"anchor\" href=\"#2为什么要用awvs\">#</a> 2. 为什么要用 AWVS</h2>\n<p>在今天，网站的安全是容易被忽视的，黑客具备广泛的攻击手段，例 SQL 注入，XSS，文件包含，目录遍历，参数篡改，认证攻击等，虽然你配置了正确的防火墙和 WAF，但是这些安全防御软件仍然 i 存在策略性的绕过，因此，需要您定期的扫描你的 web 应用，但是手动检测你所有的 web 应用是否存在安全漏洞比较复杂和费时，所以您需要一款自动化的 web 漏洞扫描工具来检测您的 web 应用是否存在安全漏洞。</p>\n<h2 id=\"3windows-安装\"><a class=\"anchor\" href=\"#3windows-安装\">#</a> 3.windows 安装</h2>\n<p>1. 解压 awvs14 补丁.zip</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/81e865bc2d964e5992df154d068e9b00.png\" alt=\"image.png\"></p>\n<p>2. 双击 acunetix_14.1.210316110.exe 安装</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/2d71bb4195454a4694ce88dd6c3ff88e.png\" alt=\"image.png\"></p>\n<p>3. 点击【是】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/0f9e40ee7a7f487199ebcbcbd829cccd.png\" alt=\"image.png\"></p>\n<p>4. 点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/4a57a401dc784646bb780f98ff4f5c44.png\" alt=\"image.png\"></p>\n<p>5. 点击【I accept the agreement 】, 点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/bf133d8a4e0a4c82b83f777bb7b8aa69.png\" alt=\"image.png\"></p>\n<p>6. 选择喜欢的位置安装，点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/88b1d9decc53420f8e913d962bf9f0c0.png\" alt=\"image.png\"></p>\n<p>7. 选择喜欢的位置保存 Data，点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/0b33e0cefcb848b395a5414cb71afae4.png\" alt=\"image.png\"></p>\n<p>8. 输入账号名：admin@msb.com, 密码：m123456@，点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/deb2586fac9942e68ecf8b0f848de948.png\" alt=\"image.png\"></p>\n<p>9. 选择【Allow remote access to Acunetix】，选择 IP，点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/20d3c97cb28d407ba52d8ad48a9320ee.png\" alt=\"image.png\"></p>\n<p>10. 点击【Next】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/9967226ab34146a0bfeab18109f1eb05.png\" alt=\"image.png\"></p>\n<p>11. 点击【install】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/fd5c6d67cf7a4be19d5c1348d7e11252.png\" alt=\"image.png\"></p>\n<p>12. 等待安装完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/def992e831474a3b82acb84da82f5d0d.png\" alt=\"image.png\"></p>\n<p>13. 点击【是】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/057f985ac8a34101aa55e2255c31519d.png\" alt=\"image.png\"></p>\n<p>14. 点击【Finsh】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/41c819b1c8014895a7a808f75f888790.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/b47d1c4b81d448098ca2effdf805161f.png\" alt=\"image.png\"></p>\n<p>15. 右键【我的电脑】，点击【管理】，选择【服务和应用成序】, 点击【服务】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/a9bf3bb1a1b9418ab5567e2aa325bbe4.png\" alt=\"image.png\"></p>\n<p>16. 右键【Acunetix】和【Acunetix Database】，停止 Acunetix 和 Acunetix Database 服务</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/99b73f6746b74eb5aba49d0ae808e4e1.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/292cbd039b4c4e959650b79fc48c08ae.png\" alt=\"image.png\"></p>\n<p>17. 将【awvs14 补丁】里的【license_info.json】 复制到【D:\\ProgramData\\Acunetix\\shared\\license】，点击【替换】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/3b23edb624d34503ac1bc702ee4d0497.png\" alt=\"image.png\"></p>\n<p>18. 将【awvs14 补丁】里的【wa_data.dat】复制到【D:\\ProgramData\\Acunetix\\shared\\license】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/49338f031ce9493998c03de87ed9ccbc.png\" alt=\"image.png\"></p>\n<p>19. 将【awvs14 补丁】里的【wvsc.exe】复制到【D:\\Program Files (x86)\\Acunetix\\14.1.210316110】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/8cafbb2374d54bbe85d296a8ca2f500b.png\" alt=\"image.png\"></p>\n<p>20. 右键【Acunetix】和【Acunetix Database】，启动 Acunetix 和 Acunetix Database 服务</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/1e154e0b0ee54e6ea5f057bb25fb2dbc.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/0519547b40a34109be8693cb411089d3.png\" alt=\"image.png\"></p>\n<p>21. 刷新浏览器的管理页面，点击【高级..】, 点击【接受风险并继续】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/7bf0bc40416a4ef9995284f6b5bd9e2f.png\" alt=\"image.png\"></p>\n<p>22. 登录管理员账号 <span class=\"exturl\" data-url=\"bWFpbHRvOmFkbWluQG1zYi5jb20=\">admin@msb.com</span>, 密码：m123456@</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/92cc8f0bd37f41348aef73b4e7a35655.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/ca33061b2639475e9291461f012c901d.png\" alt=\"image.png\"></p>\n<h2 id=\"4-kali-安装awvs\"><a class=\"anchor\" href=\"#4-kali-安装awvs\">#</a> 4. kali 安装 AWVS</h2>\n<p>1. 将 acunetix_trial.sh 和 patch_awvs 复制到 kali 中</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/2f852ac510d54e82bfac2e7cf3ac183a.png\" alt=\"image.png\"></p>\n<p>2. 修改 acunetix_trial.sh 和 patch_awvs  权限</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 777 acunetix_trial.sh patch_awvs</span><br></pre></td></tr></table></figure></p>\n<p>3. 执行安装命令</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./acunetix_trial.sh</span><br></pre></td></tr></table></figure></p>\n<p>4. 点击 enter 键继续</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/de2f4d0b46ee421d896b08db9e016a80.png\" alt=\"image.png\"></p>\n<p>5. 一直按住 enter 键继续</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/047824864f324f0c89e6e37a7824fdb4.png\" alt=\"image.png\"></p>\n<p>6. 输入 yes，点击 【回车】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/aa3d4d4cb50d4e92af6685bc90a9108e.png\" alt=\"image.png\"></p>\n<p>7. 输入主机名称，点击【回车】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/e91bc8a405054d6fadb58fbc76051884.png\" alt=\"image.png\"></p>\n<p>8. 输入 email ：【admin@msb.com】点击【回车】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/f3d402f52cdd46e59bdeda18fd704374.png\" alt=\"image.png\"></p>\n<p>9. 输入 Password：【m123456@】点击回车，输入【m123456@】，点击回车</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/00b3b7c2c16a4a899c607e7aadde1aa0.png\" alt=\"image.png\"></p>\n<p>10. 等待安装完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/9431cda311874684ba3251424cf8b5a7.png\" alt=\"image.png\"></p>\n<p>11. 把破解补丁复制到指定目录下，并设置好权限，直接运行即可</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -a patch_awvs /home/acunetix/.acunetix_trial/v_190325161/scanner/</span><br><span class=\"line\">chmod 777 /home/acunetix/.acunetix_trial/v_190325161/scanner/patch_awvs</span><br><span class=\"line\">/home/acunetix/.acunetix_trial/v_190325161/scanner/patch_awvs</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/db407d2b36ac498d8e47e079cf18de63.png\" alt=\"image.png\"></p>\n<p>12. 为了保护原始 license 不失效，这里尽快执行如下的命令，不然 license 会被修改然后就无法破解成功。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chattr +i /home/acunetix/.acunetix_trial/data/license/license_info.json</span><br><span class=\"line\">rm -fr /home/acunetix/.acunetix_trial/data/license/wa_data.dat</span><br><span class=\"line\">touch /home/acunetix/.acunetix_trial/data/license/wa_data.dat</span><br><span class=\"line\">chattr +i /home/acunetix/.acunetix_trial/data/license/wa_data.dat</span><br></pre></td></tr></table></figure></p>\n<p>13. 重新启动 AWVS 进程</p>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart acunetix_trial.service <span class=\"comment\">#重启进程</span></span><br><span class=\"line\">systemctl start acunetix_trial.service   <span class=\"comment\">#启动进程</span></span><br><span class=\"line\">systemctl stop acunetix_trial.service    <span class=\"comment\">#停止进程</span></span><br><span class=\"line\">systemctl status acunetix_trial.service  <span class=\"comment\">#查看进行状态 </span></span><br></pre></td></tr></table></figure></p>\n<p>14. 访问：<span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMjcuMC4wLjE6MTM0NDMv\">https://127.0.0.1:13443/</span> 进入 AWVS 首页，点击【Advanced..】, 点击【Accept the Risk and Continue】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/228eea4050e84c5bb1a2aa7dddee9c8b.png\" alt=\"image.png\"></p>\n<p>15. 输入用户名：admin@msb.com, 密码：m123456@ 进行登录</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/5375b020a8184250b679aea740cb4c6e.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/24f077d4968a4f16be2c42d0ca473c9d.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1641348406000/7de783bf900d46e581cbc78c26b9420c.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/CPP%E4%B8%AD%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "url": "https://mangpumo.github.io/2023/01/11/CPP%E4%B8%AD%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "title": "CPP中栈和队列的基本操作",
            "date_published": "2023-01-10T19:04:01.000Z",
            "content_html": "<h1 id=\"c中栈和队列的基本操作\"><a class=\"anchor\" href=\"#c中栈和队列的基本操作\">#</a> C++ 中栈和队列的基本操作</h1>\n<p>使用标准库的栈和队列时，先包含相关的头文件</p>\n<p>#include&lt;stack&gt;</p>\n<p>#include&lt;queue&gt;</p>\n<p>定义栈如下：</p>\n<p>stack&lt;int&gt; s;</p>\n<p>定义队列如下：</p>\n<p>queue&lt;int&gt; q;</p>\n<p>栈提供了如下的操作：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s.empty()               如果栈为空返回true，否则返回false    </span><br><span class=\"line\">s.size()                返回栈中元素的个数    </span><br><span class=\"line\">s.pop()                 删除栈顶元素但不返回其值    </span><br><span class=\"line\">s.top()                 返回栈顶的元素，但不删除该元素    </span><br><span class=\"line\">s.push()                在栈顶压入新元素  </span><br></pre></td></tr></table></figure></p>\n<p>如何输出栈内所有元素：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;stack&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tstack&lt;int&gt; s;</span><br><span class=\"line\">\tfor(int i = 0; i &lt; 3; i++) </span><br><span class=\"line\">\t\ts.push(i);</span><br><span class=\"line\">\twhile(s.empty() == false) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; s.top() &lt;&lt; &quot; &quot;; //返回栈顶的元素，但不删除该元素     </span><br><span class=\"line\">\t\ts.pop(); //删除栈顶元素但不返回其值   </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n 队列提供了下面的操作：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">q.empty()               如果队列为空返回true，否则返回false    </span><br><span class=\"line\">q.size()                返回队列中元素的个数    </span><br><span class=\"line\">q.pop()                 删除队列首元素但不返回其值    </span><br><span class=\"line\">q.front()               返回队首元素的值，但不删除该元素    </span><br><span class=\"line\">q.push()                在队尾压入新元素    </span><br><span class=\"line\">q.back()                返回队列尾元素的值，但不删除该元素  </span><br></pre></td></tr></table></figure></p>\n<p>如何输出队内所有元素：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt; </span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tqueue&lt;int&gt; q;</span><br><span class=\"line\">\tfor(int i = 0; i &lt; 3; i++)</span><br><span class=\"line\">\t\tq.push(i); //入队 </span><br><span class=\"line\">\twhile(q.empty() == false) &#123;</span><br><span class=\"line\">\t\tcout &lt;&lt; q.front() &lt;&lt; &quot; &quot;; //返回队首元素的值，但不删除该元素 </span><br><span class=\"line\">\t\tq.pop(); //删除队列首元素但不返回其值 </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/CPP%E7%B1%BBClass%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AE%9E%E7%8E%B0/",
            "url": "https://mangpumo.github.io/2023/01/11/CPP%E7%B1%BBClass%E7%9A%84%E5%AE%9A%E4%B9%89%E4%B8%8E%E5%AE%9E%E7%8E%B0/",
            "title": "C++类Class的定义与实现",
            "date_published": "2023-01-10T16:09:02.000Z",
            "content_html": "<h1 id=\"c类class的定义与实现\"><a class=\"anchor\" href=\"#c类class的定义与实现\">#</a> C++ 类 (Class) 的定义与实现</h1>\n<h2 id=\"一-类-的介绍\"><a class=\"anchor\" href=\"#一-类-的介绍\">#</a> <strong>一、&quot;类&quot; 的介绍</strong></h2>\n<p>在 C++ 中，用 &quot;<strong> 类</strong> &quot;来描述&quot;<strong> 对象</strong> &quot;, 所谓的&quot; 对象 &quot;是指现实世界中的一切事物。那么类就可以看做是对相似事物的抽象，找到这些不同事物间的共同点，如自行车和摩托车，首先他们都属于&quot; 对象 &quot;, 并且具有一定得相同点，和一些不同点，相同点如他们都有质量、都有两个轮子，都是属于交通工具等。&quot; 都有质量 &quot;、&quot; 两个轮子 &quot;属于这个对象的属性，而&quot; 都能够当做交通工具 &quot; 属于该对象具有的行为，也称方法。</p>\n<p>类是属于用户自定义的数据类型，并且该类型的数据具有一定的行为能力，也就是类中说描述的方法。通常来说，一个类的定义包含两部分的内容，一是该类的<strong>属性</strong>，另一部分是它所拥有的<strong>方法</strong>。以 &quot;人类&quot; 这个类来说，每个人都有自己的姓名、年龄、出生日期、体重等，为 人类 的属性部分，此外，人能够吃饭、睡觉、行走、说话等属于人类所具有的行为。</p>\n<p>上面举例中所描述的 &quot;人&quot; 类仅仅是具有人这种对象的最基础的一些属性和行为，可以称之为人的 &quot;<strong> 基类</strong> &quot;。 再说说一些具有一些职业的人，例如学生，一个学生还具有&quot; 基类 &quot; 中所没有的属性，如学校、班级、学号；也可以具有基类所不具有的行为，如每天需要去上课，需要考试等。</p>\n<p>学生类可以看做是基类的一个扩展，因为他具有基类的所有属性和行为，并且在此基础上增加了一些基类所没有的属性和行为，像 &quot;学生&quot; 这样的类称为 &quot;人类&quot; 这个基类的 &quot;<strong> 派生类</strong> &quot;或者&quot;<strong> 子类</strong> &quot;。在学生的基础上海可以进一步的扩展出其他更高级的类，如&quot; 研究生 &quot; 类。</p>\n<p>到此，我们不再更深的去介绍类的其他相关知识。</p>\n<h1 id=\"二-c类的定义\"><a class=\"anchor\" href=\"#二-c类的定义\">#</a> <strong>二、C++ 类的定义</strong></h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class 类名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public:</span><br><span class=\"line\">    //公共的行为或属性</span><br><span class=\"line\"> </span><br><span class=\"line\">    private:</span><br><span class=\"line\">    //私有的行为或属性</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>说明:</p>\n<ul>\n<li>类名 需要遵循一般的命名规则；</li>\n<li><strong>public</strong> 与 <strong>private</strong> 为属性 / 方法限制的关键字，private 表示该部分内容是私密的，不能被外部所访问或调用，只能被本类内部访问；而 public 表示公开的属性和方法，外界可以直接访问或者调用。 一般来说类的属性成员都应设置为 private, public 只留给那些被外界用来调用的函数接口，但这并非是强制规定，可以根据需要进行调整；</li>\n<li>结束部分的分号不能省略。</li>\n</ul>\n<h2 id=\"三-c类的实现\"><a class=\"anchor\" href=\"#三-c类的实现\">#</a> 三、C++ 类的实现</h2>\n<p>在上面的定义示例中我们只是定义了这个类的一些属性和方法声明，并没有去实现它，类的实现就是完成其方法的过程。类的实现有两种方式，一种是在类定义时完成对成员函数的定义，另一种是在类定义的外部进行完成。</p>\n<h3 id=\"1-在类定义时定义成员函数\"><a class=\"anchor\" href=\"#1-在类定义时定义成员函数\">#</a> 1&gt;. 在类定义时定义成员函数</h3>\n<p>成员函数的实现可以在类定义时同时完成，如代码:<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\">class Point</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    void setPoint(int x, int y) //实现setPoint函数</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        xPos = x;</span><br><span class=\"line\"> </span><br><span class=\"line\">        yPos = y;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    void printPoint() //实现printPoint函数</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        cout&lt;&lt; &quot;x = &quot; &lt;&lt; xPos &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">        cout&lt;&lt; &quot;y = &quot; &lt;&lt; yPos &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    private:</span><br><span class=\"line\">    </span><br><span class=\"line\">       int xPos;</span><br><span class=\"line\"> </span><br><span class=\"line\">       int yPos;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Point M; //用定义好的类创建一个对象 点M</span><br><span class=\"line\">    </span><br><span class=\"line\">    M.setPoint(10, 20); //设置 M点 的x,y值</span><br><span class=\"line\"> </span><br><span class=\"line\">    M.printPoint(); //输出 M点 的信息</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行输出:<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = 10 </span><br><span class=\"line\">y = 20</span><br></pre></td></tr></table></figure></p>\n<p>与类的定义相比，在类内实现成员函数不再是在类内进行声明，而是直接将函数进行定义，在类中定义成员函数时，编译器默认会争取将其定义为 inline 型函数</p>\n<h3 id=\"2-在类外定义成员函数\"><a class=\"anchor\" href=\"#2-在类外定义成员函数\">#</a> 2&gt;. 在类外定义成员函数</h3>\n<p>在类外定义成员函数通过在类内进行声明，然后在类外通过作用域操作符：：进行实现，形式如下:<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 返回类型 类名::成员函数名(参数列表)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">     //函数体</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"> </span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\">class Point</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    void setPoint(int x, int y); //在类内对成员函数进行声明</span><br><span class=\"line\"> </span><br><span class=\"line\">    void printPoint();</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    private:</span><br><span class=\"line\"> </span><br><span class=\"line\">    int xPos;</span><br><span class=\"line\"> </span><br><span class=\"line\">    int yPos;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">void Point::setPoint(int x, int y) //通过作用域操作符 &#x27;::&#x27; 实现setPoint函数</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    xPos = x;</span><br><span class=\"line\"> </span><br><span class=\"line\">    yPos = y;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void Point::printPoint() //实现printPoint函数</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    cout&lt;&lt; &quot;x = &quot; &lt;&lt; xPos &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">    cout&lt;&lt; &quot;y = &quot; &lt;&lt; yPos &lt;&lt; endl;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\"> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    Point M; //用定义好的类创建一个对象 点M</span><br><span class=\"line\"> </span><br><span class=\"line\">    M.setPoint(10, 20); //设置 M点 的x,y值</span><br><span class=\"line\"> </span><br><span class=\"line\">    M.printPoint(); //输出 M点 的信息</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n 依 setPoint 成员函数来说，在类内声明的形式为 <strong>void setPoint(int x, int y)</strong>; 那么在类外对其定义时函数头就应该是 <strong>void Point::setPoint(int x, int y)</strong> 这种形式，其返回类型、成员函数名、参数列表都要与类内声明的形式一致。</p>\n<h2 id=\"四-对象的作用域-可见域与生存周期\"><a class=\"anchor\" href=\"#四-对象的作用域-可见域与生存周期\">#</a> 四、对象的作用域、可见域与生存周期</h2>\n<p>类对象的作用域、可见域以及生存周期与普通变量的保持相同，当对象生存周期结束时对象被自动撤销，所占用的内存被回收，需要注意的是，如果对象的成员函数中有使用 new 或者 malloc 申请的动态内存程序不会对其进行释放，需要我们手动进行清理，否则会造成内存泄露。</p>\n<h2 id=\"c-类的定义和使用\"><a class=\"anchor\" href=\"#c-类的定义和使用\">#</a> c++ 类的定义和使用</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int n2;</span><br><span class=\"line\">    int n1;</span><br><span class=\"line\"> </span><br><span class=\"line\">public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    A() :n2(34), n1(n2+1) &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    void Print() &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;n1:&quot; &lt;&lt; n1 &lt;&lt; &quot;, n2: &quot; &lt;&lt; n2 &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.Print();</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1:35, n2:34</span><br></pre></td></tr></table></figure></p>\n<p>对上面代码稍微做调整： 将 n1 和 n2 两个变量定义的顺序互换一下<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int n1;</span><br><span class=\"line\">    int n2;</span><br><span class=\"line\"> </span><br><span class=\"line\">public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    A() :n2(34), n1(n2+1) &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    void Print() &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;n1:&quot; &lt;&lt; n1 &lt;&lt; &quot;, n2: &quot; &lt;&lt; n2 &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    A a;</span><br><span class=\"line\">    a.Print();</span><br><span class=\"line\"> </span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>打印结果：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1:-858993459, n2:34</span><br></pre></td></tr></table></figure></p>\n<p>由此可以总结： 构造函数中，变量初始化的顺序，是以变量定义的顺序来定的，而不是简单的以构造函数中变量出现的顺序来定的</p>\n<p>还可以使用有参的构造函数：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int n1;</span><br><span class=\"line\">    int n2;</span><br><span class=\"line\"> </span><br><span class=\"line\">public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    A(int k1,int k2) :n2(k1), n1(k2) &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    void Print() &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;n1:&quot; &lt;&lt; n1 &lt;&lt; &quot;, n2: &quot; &lt;&lt; n2 &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    A a(78,97);</span><br><span class=\"line\">    a.Print();</span><br><span class=\"line\"> </span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1:97, n2:78</span><br></pre></td></tr></table></figure></p>\n<p>下面对上面进行改造一下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &quot;stdafx.h&quot;</span><br><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;string&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">class A</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">    int n1;</span><br><span class=\"line\">    int n2;</span><br><span class=\"line\"> </span><br><span class=\"line\">public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    A(int k1) :n2(k1), n1(n2) &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    void Print() &#123;</span><br><span class=\"line\">        cout &lt;&lt; &quot;n1:&quot; &lt;&lt; n1 &lt;&lt; &quot;, n2: &quot; &lt;&lt; n2 &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    A a(115);</span><br><span class=\"line\">    a.Print();</span><br><span class=\"line\"> </span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    return 1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n1:858993460, n2:115</span><br></pre></td></tr></table></figure></p>\n<p>通过最后一个例子，再次证明，变量初始化的顺序是严格按照各个变量定义的先后顺序来的，而不是简单的依据各变量在构造函数中出现的先后顺序来定的</p>\n<p><strong>下面两种写法是一个意思：</strong><br>\n写法一：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public:</span><br><span class=\"line\">    A(int k1,int k2) &#123;</span><br><span class=\"line\">        n1 = k1;</span><br><span class=\"line\">        n2 = k2;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>写法二：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public:</span><br><span class=\"line\"> </span><br><span class=\"line\">    A(int k1,int k2) :n1(k1),n2(k2)&#123;&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        }
    ]
}