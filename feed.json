{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "漏洞不在机器，漏洞在人",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2022/10/26/C%E8%AF%AD%E8%A8%80-%E5%85%A8%E6%8E%92%E5%88%97%E6%9E%9A%E4%B8%BE/",
            "url": "https://mangpumo.github.io/2022/10/26/C%E8%AF%AD%E8%A8%80-%E5%85%A8%E6%8E%92%E5%88%97%E6%9E%9A%E4%B8%BE/",
            "title": "C语言_全排列枚举",
            "date_published": "2022-10-26T15:38:31.000Z",
            "content_html": "<h1 id=\"全排列枚举\"><a class=\"anchor\" href=\"#全排列枚举\">#</a> 全排列枚举</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>给定一个由不同的小写字母组成的字符串，输出这个字符串的所有全排列。 我们假设对于小写字母有’a’ &lt; ‘b’ &lt; … &lt; ‘y’ &lt; ‘z’，而且给定的字符串中的字母已经按照从小到大的顺序排列。</p>\n<h2 id=\"input\"><a class=\"anchor\" href=\"#input\">#</a> Input</h2>\n<p>输入只有一行，是一个由不同的小写字母组成的字符串，已知字符串的长度在 1 到 6 之间。</p>\n<h2 id=\"output\"><a class=\"anchor\" href=\"#output\">#</a> Output</h2>\n<p>输出这个字符串的所有排列方式，每行一个排列。要求字母序比较小的排列在前面。字母序如下定义：<br>\n已知 S = s1s2…sk , T = t1t2…tk，则 S &lt;T 等价于，存在 p (1 &lt;= p &lt;= k)，使得 s1 = t1, s2 = t2, …, sp - 1 = tp - 1, sp &lt; tp 成立。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">abc</span><br><span class=\"line\">acb</span><br><span class=\"line\">bac</span><br><span class=\"line\">bca</span><br><span class=\"line\">cab</span><br><span class=\"line\">cba</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">void qsort(int s);//递归排序 </span><br><span class=\"line\">void sort(char str[],int n);//冒泡排序 </span><br><span class=\"line\">bool ls[15];int n;//设定bool类型的数组，0对应该字母没有用到，1表示已经用了 </span><br><span class=\"line\">char str[15],temp[15];</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> scanf(&quot;%s&quot;,str);</span><br><span class=\"line\"> n=strlen(str);</span><br><span class=\"line\"> sort(str,n);//对随机输入的字符串进行排序，因为递归的时候不会按字母序大小输出，所以先排好序 </span><br><span class=\"line\"> qsort(0);//递归，并且输出 </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void qsort(int s)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> if(s==n)&#123;  //所有的字母用完即可输出 </span><br><span class=\"line\">  temp[s]=&#x27;\\0&#x27;;</span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,temp);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> int i;</span><br><span class=\"line\"> for( i=0;i&lt;n;i++)</span><br><span class=\"line\">  if(ls[i]==0) //用bool类型对应字母的状态，0表示字母没有被用到，即可以使用 </span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">   ls[i]=1; //使用之后立刻改变状态，1表示字母已经被使用 </span><br><span class=\"line\">   temp[s]=str[i]; //使用字母，将该字母排序到temp里 </span><br><span class=\"line\">   qsort(s+1);  //在当前状态下继续向下递归，直到输出 </span><br><span class=\"line\">   ls[i]=0; //回到初始状态，比如开头是a字母的已经排完，现在用b来开头，此时a字母又可以继续使用 </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void sort(char str[],int n)//冒泡排序，从小到大排 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> char tmp;</span><br><span class=\"line\"> for(int i=1;i&lt;n;i++)</span><br><span class=\"line\">  for(int j=0;j&lt;n-i;j++)</span><br><span class=\"line\">   if(str[j]&gt;str[j+1])&#123;</span><br><span class=\"line\">    tmp=str[j];str[j]=str[j+1];str[j+1]=tmp;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/26/XTUOJ-1088N/",
            "url": "https://mangpumo.github.io/2022/10/26/XTUOJ-1088N/",
            "title": "XTUOJ_1088N!",
            "date_published": "2022-10-26T15:19:38.000Z",
            "content_html": "<h1 id=\"n\"><a class=\"anchor\" href=\"#n\">#</a> N!</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>请求 N！（N&lt;=10000），输出结果对 10007 取余<br>\n输入<br>\n每行一个整数 n，遇到 - 1 结束。<br>\n输出<br>\n每行一个整数，为对应 n 的运算结果。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">-1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int N;</span><br><span class=\"line\">    long long int ans;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;N)&amp;&amp;N != -1)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for(long long int i = 1;i&lt;=N;i++)</span><br><span class=\"line\">        ans = (ans*i)%10007;  //取模</span><br><span class=\"line\">        printf(&quot;%I64d\\n&quot;,ans);</span><br><span class=\"line\">        ans = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/26/XTUOJ-1075%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/26/XTUOJ-1075%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/",
            "title": "XTUOJ_1075最小公倍数",
            "date_published": "2022-10-26T15:12:57.000Z",
            "content_html": "<h1 id=\"求最小公倍数\"><a class=\"anchor\" href=\"#求最小公倍数\">#</a> 求最小公倍数</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>有多个测试用例，每行两个正整数 x,y，保证 x*y 不超过 2^31-1。如果 x 与 y 都为 0，则输入结束。</p>\n<p>每行输出一个测试用例的结果，即 x 与 y 的最小公倍数。（最后一行有回车）</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 5</span><br><span class=\"line\">3 6</span><br><span class=\"line\">0 0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">20</span><br><span class=\"line\">6</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int gcd(int a,int b)//递归 ,注意返回值</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(b==0)</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    return gcd(b,a%b);</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\"> int main()</span><br><span class=\"line\"> &#123;</span><br><span class=\"line\">     long long int a,b;</span><br><span class=\"line\">     long long int temp;</span><br><span class=\"line\">     while(scanf(&quot;%I64d %I64d&quot;,&amp;a,&amp;b)!=EOF&amp;&amp;a != 0&amp;&amp;b != 0)</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         long long int prime = gcd(a,b);</span><br><span class=\"line\">         long long int ans;</span><br><span class=\"line\">         long long int s;</span><br><span class=\"line\">         s = a*b;</span><br><span class=\"line\">         ans = s/prime;</span><br><span class=\"line\">         printf(&quot;%I64d\\n&quot;,ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     return 0;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/22/XTUOJ-1342%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "url": "https://mangpumo.github.io/2022/10/22/XTUOJ-1342%E4%B8%89%E8%A7%92%E5%BD%A2/",
            "title": "XTUOJ_1342三角形",
            "date_published": "2022-10-22T08:25:01.000Z",
            "content_html": "<h1 id=\"三角形\"><a class=\"anchor\" href=\"#三角形\">#</a> 三角形</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>已知两个三角形的三条边的长度，请问它们是否相似？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 T (1≤T≤1000)，表示样例的个数。 每个样例占两行，每行为三个整数 a,b,c1≤a,b,c≤1000, 表示一个三角形的边长。 输入数据保证三条边一定能构成三角形。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>依次输出每个样例的结果，如果相似，输出 &quot;Yes&quot;，否则输出 &quot;No&quot;。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 4 5</span><br><span class=\"line\">3 3 3</span><br><span class=\"line\">3 4 5</span><br><span class=\"line\">6 8 10</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No</span><br><span class=\"line\">Yes</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tint a,b,c,x,y,z;</span><br><span class=\"line\">\tint m[3],n[3],i,j,t;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tscanf(&quot;%d %d %d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;x,&amp;y,&amp;z);</span><br><span class=\"line\">\t\tn[0]=a;n[1]=b;n[2]=c;</span><br><span class=\"line\">        m[0]=x;m[1]=y;m[2]=z;</span><br><span class=\"line\">        for(i=0;i&lt;3;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tfor(j=i;j&lt;3;j++)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">        \t    if(n[i]&gt;n[j])</span><br><span class=\"line\">\t\t\t    &#123;</span><br><span class=\"line\">\t\t\t        t = n[i];</span><br><span class=\"line\">\t\t\t        n[i] = n[j];</span><br><span class=\"line\">\t\t\t        n[j] = t;\t</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t for(i=0;i&lt;3;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        \tfor(j=i;j&lt;3;j++)</span><br><span class=\"line\">        \t&#123;</span><br><span class=\"line\">        \t    if(m[i]&gt;m[j])</span><br><span class=\"line\">\t\t\t    &#123;</span><br><span class=\"line\">\t\t\t        t = m[i];</span><br><span class=\"line\">\t\t\t        m[i] = m[j];</span><br><span class=\"line\">\t\t\t        m[j] = t;\t</span><br><span class=\"line\">\t\t\t    &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif((n[0]*1.0/m[0])==(n[1]*1.0/m[1])&amp;&amp;(n[0]*1.0/m[0])==(n[2]*1.0/m[2]))//比例不一定为整数 </span><br><span class=\"line\">\t\tprintf(&quot;Yes\\n&quot;);</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\tprintf(&quot;No\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/22/XTUOJ-1259AliceAndBob/",
            "url": "https://mangpumo.github.io/2022/10/22/XTUOJ-1259AliceAndBob/",
            "title": "XTUOJ_1259AliceAndBob",
            "date_published": "2022-10-22T07:32:07.000Z",
            "content_html": "<h1 id=\"alice-and-bob\"><a class=\"anchor\" href=\"#alice-and-bob\">#</a> Alice and Bob</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>Alice 喜欢 n 位数，Bob 喜欢能被 m 整除的数，请问被 Alice 和 Bob 都喜欢的数有多少个？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 K (K≤10000)，表示样例的个数。<br>\n每个样例是一行，两个整数 n (1≤n≤18),m (2≤m≤1000000)。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 2</span><br><span class=\"line\">3 3</span><br><span class=\"line\">3 10000</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">450</span><br><span class=\"line\">300</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,m,count;</span><br><span class=\"line\">    int K=0;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">    //while(K--)</span><br><span class=\"line\">    for (int i=1;i&lt;=K;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</span><br><span class=\"line\">        if(n == 1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            count = 9/m;</span><br><span class=\"line\">            printf(&quot;%d\\n&quot;,count+1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            long long a1 = pow(10,n)-1;</span><br><span class=\"line\">            long long a2 = pow(10,n-1)-1;//很奇怪，如果先求a2会WA</span><br><span class=\"line\">            long long count1 = a1/m-a2/m;</span><br><span class=\"line\">            printf(&quot;%I64d\\n&quot;,count1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/C%E8%AF%AD%E8%A8%80-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/",
            "url": "https://mangpumo.github.io/2022/10/21/C%E8%AF%AD%E8%A8%80-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/",
            "title": "C语言_进制转换",
            "date_published": "2022-10-21T07:26:57.000Z",
            "content_html": "<h1 id=\"进制转换\"><a class=\"anchor\" href=\"#进制转换\">#</a> 进制转换</h1>\n<h2 id=\"任意进制转十进制\"><a class=\"anchor\" href=\"#任意进制转十进制\">#</a> 任意进制转十进制</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tint x,p;   //x输入数字  p该数的进制数  </span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;p);</span><br><span class=\"line\">\tint y=0,product=1;</span><br><span class=\"line\">\twhile(x!=0)&#123;</span><br><span class=\"line\">\t\ty=y+(x%10)*product;</span><br><span class=\"line\">\t\tx=x/10;</span><br><span class=\"line\">\t\tproduct=product*p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%d&quot;,y);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"十进制转任意进制\"><a class=\"anchor\" href=\"#十进制转任意进制\">#</a> 十进制转任意进制</h2>\n<p><strong>注意：这里只能用 do...while（原因：如果输入的是 0，那么我们希望 a [0]=0）</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\tint x,p; //x为十进制数，p为目标进制大小 </span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;x);</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;p);</span><br><span class=\"line\">\tint a[100]; //存放余数 </span><br><span class=\"line\">\tint count=0;</span><br><span class=\"line\">\tdo&#123;</span><br><span class=\"line\">\t\ta[count++]=x%p;</span><br><span class=\"line\">\t\tx=x/p;</span><br><span class=\"line\">\t&#125;while(x!=0);//当商不为0时进行循环 </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfor(int i=count-1;i&gt;=0;i--)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%d&quot;,a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二进制转十六进制\"><a class=\"anchor\" href=\"#二进制转十六进制\">#</a> 二进制转十六进制</h2>\n<p>主要思路：确定十六进制数组大小 -&gt; 确定二进制数数组大小 -&gt; 二进制每过 4 位存入十六进制 1 位</p>\n<p>思路：输入的二进制数可能能不是 4 的整数倍，那么我们该如何处理呢？我们知道二进制不够 4 位，用 0 占位。于是我先将输入的二进制数除以 10000 取余 (看 4 位)，这样就确定十六进制数组的大小，反过 * 4 来就知道了二进制数的大小。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">\t//输入2进制数 </span><br><span class=\"line\">\tint x;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;x); </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t//确定：16进制数组大小size与2进制数组大小size*4.</span><br><span class=\"line\">\tint X=x;</span><br><span class=\"line\">\tint size=0; </span><br><span class=\"line\">\twhile(true)&#123;</span><br><span class=\"line\">\t\tif(X%10000!=0)&#123; //采取看4位二进制的方法 </span><br><span class=\"line\">\t\t\tsize++;</span><br><span class=\"line\">\t\t\tX=X/10000;</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tchar tt[size];   //16进制数数组 </span><br><span class=\"line\">\tint t[size*4]; //2进制数数组 </span><br><span class=\"line\">      //存入 </span><br><span class=\"line\">\tint sum=0;</span><br><span class=\"line\">\tint count=0;</span><br><span class=\"line\">\tfor(int i=0;i&lt;sizeof(t)/sizeof(int);i++)&#123;</span><br><span class=\"line\">\t\tt[i]=x%10;</span><br><span class=\"line\">\t\tx=x/10;</span><br><span class=\"line\">\t\tsum=sum+t[i]*pow(2,count);</span><br><span class=\"line\">\t\tcount++;</span><br><span class=\"line\">\t\tif(count%4==0)&#123;</span><br><span class=\"line\">\t\t\tif(sum&gt;=10)&#123;</span><br><span class=\"line\">\t\t\t\ttt[--size]=65+(sum-10);  //字符&#x27;A&#x27;的ascii码为65 </span><br><span class=\"line\">\t\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t\ttt[--size]=&#x27;0&#x27;+sum;    </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcount=0;</span><br><span class=\"line\">\t\t\tsum=0;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor(int i=0;i&lt;sizeof(tt);i++)&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%c&quot;,tt[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"十进制转十六进制\"><a class=\"anchor\" href=\"#十进制转十六进制\">#</a> 十进制转十六进制</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint a = 0;</span><br><span class=\"line\">\tint arr[32] = &#123; 0 &#125;;//将转换后的十六进制数放进数组arr。</span><br><span class=\"line\">\tint y = 0;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;, &amp;a);//获取一个十进制数</span><br><span class=\"line\">\twhile (a != 0)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ty++;</span><br><span class=\"line\">\t\tarr[y] = a % 16;</span><br><span class=\"line\">\t\ta = a / 16;</span><br><span class=\"line\">\t\tif (arr[y] &gt; 9)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tarr[y] = &#x27;A&#x27; + (arr[y] - 10);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tarr[y] = &#x27;0&#x27; + arr[y];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor (int i = y; i &gt; 0; i--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tprintf(&quot;%c&quot;, arr[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//存放在数组中的十六进制数是反着的，打印的时候可以直接倒过来打印，打印出来的就是十六进制数了。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"十六进制转十进制\"><a class=\"anchor\" href=\"#十六进制转十进制\">#</a> 十六进制转十进制</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">#include&lt;math.h&gt;//千万别忘了引这个库</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar a[20];//输入十六进制数</span><br><span class=\"line\">\tint b[20] = &#123; 0 &#125;;//将十六进制数转成int类型</span><br><span class=\"line\">\tint i, j, sum=0;//这里的sum别忘了初始化。</span><br><span class=\"line\">\tint c = 0;//最终的十进制数</span><br><span class=\"line\">\tgets(a);</span><br><span class=\"line\">\t//将其从char类型转成int类型，并存入数组b[]中。</span><br><span class=\"line\">\twhile (a[sum] != &#x27;\\0&#x27;)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif ((a[sum] &gt;= &#x27;a&#x27;) &amp;&amp; (a[sum] &lt;= &#x27;f&#x27;))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tb[sum] = a[sum] - &#x27;a&#x27; + 10;</span><br><span class=\"line\">\t\t\tsum++;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif ((a[sum] &gt;= &#x27;A&#x27;) &amp;&amp; (a[sum] &lt;= &#x27;F&#x27;))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tb[sum] = a[sum] - &#x27;A&#x27; + 10;</span><br><span class=\"line\">\t\t\tsum++;</span><br><span class=\"line\">\t\t\tcontinue;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\tb[sum] = a[sum] - &#x27;0&#x27;;</span><br><span class=\"line\">\t\t\tsum++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">   //将每一位都转成16进制</span><br><span class=\"line\">\tfor(i = 0; i &lt; sum; i++)十进制转十六进制和十六进制转十进制是互逆的</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tb[sum - 1 - i] = b[sum - 1 - i] * pow(16, i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//直接累加</span><br><span class=\"line\">\tfor (j = 0;j&lt;sum;j++) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tc = c + b[j];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%d&quot;, c);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/KALI-%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDOS-ATTACK/",
            "url": "https://mangpumo.github.io/2022/10/21/KALI-%E5%88%A9%E7%94%A8%E8%84%9A%E6%9C%AC%E5%AE%9E%E7%8E%B0DDOS-ATTACK/",
            "title": "KALI_利用脚本实现DDOS-ATTACK",
            "date_published": "2022-10-21T06:30:12.000Z",
            "content_html": "<h1 id=\"kali-linux利用脚本实现ddos-attack\"><a class=\"anchor\" href=\"#kali-linux利用脚本实现ddos-attack\">#</a> KALI LINUX 利用脚本实现 DDOS-ATTACK</h1>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<p>kali-everything 2022 镜像文件<br>\n VMware Workstation Pro</p>\n<h2 id=\"步骤\"><a class=\"anchor\" href=\"#步骤\">#</a> 步骤</h2>\n<ul>\n<li>下载配置文件（HA-MRX 大佬的脚本）（目前在用）<br>\n<em>其他脚本在此暂不提及。</em><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/Elsa-zlt/DDos-Attack</span><br></pre></td></tr></table></figure></li>\n<li>进入 root 模式<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo -i</span><br></pre></td></tr></table></figure><br>\n 输入账号密码，密码默认不显示。</li>\n<li>前往 DDos-Attack 文件夹<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd DDos-Attack</span><br></pre></td></tr></table></figure></li>\n<li>修改（设置）对 ddos-attack.py 文件执行的权限<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ddos-attack.py</span><br></pre></td></tr></table></figure></li>\n<li>执行 ddos-attack.py 程序<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Python ddos-attack.py</span><br></pre></td></tr></table></figure></li>\n<li>执行攻击<br>\n<img data-src=\"https://img-blog.csdnimg.cn/be24cb11083f4979a7841b2d4322f952.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6ZKf6Imv5aCC55qE5a2m5Lmg56yU6K6w,size_15,color_FFFFFF,t_70,g_se,x_16\" alt><br>\n如若成功此处会提示输入 IP 地址。<br>\n<em>打开一个命令行窗口，ping 一下目标网址获得 IP 地址</em><br>\n点击回车<br>\n Port 输入线程数（推荐 80）<br>\n原因：此次攻击并没有利用肉鸡（貌似），线程数值越高，耗能也越大，效果也会越好，但线程数如果超过电脑可承受范围，会导致进程卡死。<br>\n回车运行，按下 ctrl C 退出。</li>\n</ul>\n<h2 id=\"已知报错\"><a class=\"anchor\" href=\"#已知报错\">#</a> 已知报错</h2>\n<p>无法出现上述页面<br>\n大佬脚本比较旧，python 版本过高，需要切换到 2.X</p>\n<p>命令行窗口输入：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">update-alternatives --config python</span><br></pre></td></tr></table></figure><br>\n<img data-src=\"https://img-blog.csdnimg.cn/20190621114056591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L09hdmluY2k=,size_16,color_FFFFFF,t_70\" alt><br>\n 输入想切换版本前面的序号 回车，即可实现版本切换√</p>\n<h2 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h2>\n<p><em><strong>攻击网址别瞎 XX 乱搞，多想一想</strong></em></p>\n<p><em><strong>攻击网址别瞎 XX 乱搞，多想一想</strong></em></p>\n<p><em><strong>攻击网址别瞎 XX 乱搞，多想一想</strong></em></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1255%E5%8B%BE%E8%82%A1%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1255%E5%8B%BE%E8%82%A1%E6%95%B0/",
            "title": "XTUOJ_1255勾股数",
            "date_published": "2022-10-21T06:24:09.000Z",
            "content_html": "<h1 id=\"勾股数\"><a class=\"anchor\" href=\"#勾股数\">#</a> 勾股数</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>勾股数是指满足 a2+b2=c2 的正整数，比如最有名的 “勾三股四弦五”。<br>\n现在给你两个正整数，请问是否存在另外一个正整数，使其成为 “勾股数”？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 K，表示样例的个数。 以后每行一个样例，为两个整数 x,y,(1≤x,y≤10000)。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果。如果不能构成勾股数，输出 “None”，如果存在多个，输出最小的那个。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 </span><br><span class=\"line\">3 4</span><br><span class=\"line\">2 6</span><br><span class=\"line\">12 13</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 </span><br><span class=\"line\">None </span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint a,b;</span><br><span class=\"line\">\t\tscanf(&quot;%d %d&quot;,&amp;a,&amp;b);</span><br><span class=\"line\">\t\tint a1,b1;</span><br><span class=\"line\">\t\tif(a&gt;b)//a1&gt;b1</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t    a1 = a;</span><br><span class=\"line\">\t\t    b1 = b;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\ta1 = b;</span><br><span class=\"line\">\t\t    b1 = a;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tint c1,c2;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tc1 = (int)sqrt(a1*a1-b1*b1);</span><br><span class=\"line\">\t\tc2 = (int)sqrt(a1*a1+b1*b1);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(a1*a1-b1*b1==c1*c1&amp;&amp;c1&gt;0)//c1&gt;0防止a,b相等 </span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,c1);</span><br><span class=\"line\">\t\telse if(a1*a1+b1*b1==c2*c2)</span><br><span class=\"line\">\t\tprintf(&quot;%d\\n&quot;,c2);</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\tprintf(&quot;None\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1113%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1113%E5%8C%BA%E9%97%B4%E7%9B%B8%E4%BA%A4/",
            "title": "XTUOJ_1113区间相交",
            "date_published": "2022-10-21T05:07:15.000Z",
            "content_html": "<h1 id=\"区间相交\"><a class=\"anchor\" href=\"#区间相交\">#</a> 区间相交</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>给你两个闭区间，请判断这两个区间是否相交。</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>有多组样例，第一行是一个整数 N (1&lt;=N&lt;=100)，表示有多少个样例。每个样例占两行，每行是两个整数，X，Y (0&lt;=X&lt;=Y&lt;=1000)，表示闭区间 [X,Y]。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果，如果相交，那么输出 “Yes”，否则输出 “No”。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">1 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 5</span><br><span class=\"line\">2 6</span><br><span class=\"line\">3 5</span><br><span class=\"line\">4 7</span><br><span class=\"line\">3 5</span><br><span class=\"line\">6 7</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes</span><br><span class=\"line\">Yes</span><br><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint N;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;N);</span><br><span class=\"line\">\twhile(N--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint count = 0;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t\tint x1,y1,x2,y2;</span><br><span class=\"line\">\t\t\tscanf(&quot;%d %d %d %d&quot;,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class=\"line\">\t\t\tif((x2&gt;=x1&amp;&amp;x2&lt;=y1)||(y2&gt;=x1&amp;&amp;y2&lt;=y1)||(x1&gt;=x2&amp;&amp;x1&lt;=y2)||(y1&gt;=x2&amp;&amp;y1&lt;=y2))</span><br><span class=\"line\">                printf(&quot;Yes\\n&quot;);</span><br><span class=\"line\">            else</span><br><span class=\"line\">                printf(&quot;No\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1437%E6%AF%94%E4%BE%8B/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1437%E6%AF%94%E4%BE%8B/",
            "title": "XTUOJ_1437比例",
            "date_published": "2022-10-21T04:35:29.000Z",
            "content_html": "<h1 id=\"比例\"><a class=\"anchor\" href=\"#比例\">#</a> 比例</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>...... 图片存储问题，图片见下网址<br>\n<span class=\"exturl\" data-url=\"aHR0cDovLzIwMi4xOTcuMjI0LjU5L2V4YW0vaW5kZXgucGhwL3Byb2JsZW0vZXhhbV9yZWFkL2lkLzE0MzcvZXhhbV9pZC8zODQ=\"> http://202.197.224.59/exam/index.php/problem/exam_read/id/1437/exam_id/384</span><br>\n 已知 BD:DA=a:b, AE:EC=c:d, FC:FB=e:f，求 DG:GF。</p>\n<h2 id=\"输入格式\"><a class=\"anchor\" href=\"#输入格式\">#</a> 输入格式</h2>\n<p>第一行是一个整数 T (1≤T≤1000)，表示样例的个数。</p>\n<p>以后每行 6 个整数，依次为 a,b,c,d,e,f (1≤a,b,c,d,e,f≤1000)。</p>\n<h2 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> 输出格式</h2>\n<p>依次每行输出一个样例的结果，为两个整数 x 和 y，两者之间有一个空格，x 和 y 互质。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">4 1 2 1 1 2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12 5 </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int gcd(int x,int y)//公因数 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(y==0)</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">    else </span><br><span class=\"line\">\treturn gcd(y,x%y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> \tint T;</span><br><span class=\"line\"> \tscanf(&quot;%d&quot;,&amp;T);</span><br><span class=\"line\"> \twhile(T--)</span><br><span class=\"line\"> \t&#123;</span><br><span class=\"line\"> \t\tint a,b,c,d,e,f;</span><br><span class=\"line\"> \t\tscanf(&quot;%d %d %d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;d,&amp;e,&amp;f);</span><br><span class=\"line\"> \t\tint gy,DG,GF,x,y;</span><br><span class=\"line\"> \t\tgy = gcd((a*c*(e+f)),(d*f*(a+b)));</span><br><span class=\"line\"> \t\tDG = (a*c*(e+f));</span><br><span class=\"line\"> \t\tGF = (d*f*(a+b));</span><br><span class=\"line\"> \t\tx = DG/gy;</span><br><span class=\"line\"> \t\ty = GF/gy;</span><br><span class=\"line\"> \t\tprintf(&quot;%d %d\\n&quot;,x,y);</span><br><span class=\"line\"> \t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1211A+BI/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1211A+BI/",
            "title": "XTUOJ_1211A+BI",
            "date_published": "2022-10-21T03:32:08.000Z",
            "content_html": "<h1 id=\"ab-i\"><a class=\"anchor\" href=\"#ab-i\">#</a> A+B I</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>小明在做算术题，他计算了一些 a+b 的等式，请判断一下他是否算对了？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 K，表示样例的个数。 每个样例占一行，形如 a+b=c, 其中 0≤a,b,c≤1,000</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的判断结果，算对了输出 “Yes”，否则输出 “No”。（引号不需要输出）</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1+2=3</span><br><span class=\"line\">2+3=4</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes</span><br><span class=\"line\">No</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint K;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">\twhile(K--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tint a,b,c,ans;</span><br><span class=\"line\">\t\tscanf(&quot;%d+%d=%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">\t\tans = a+b;</span><br><span class=\"line\">\t\tif(ans==c)</span><br><span class=\"line\">\t\t    printf(&quot;Yes\\n&quot;);</span><br><span class=\"line\">\t\telse</span><br><span class=\"line\">\t\tprintf(&quot;No\\n&quot;);</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/21/XTUOJ-1405%E4%B8%96%E7%95%8C%E6%9D%AF/",
            "url": "https://mangpumo.github.io/2022/10/21/XTUOJ-1405%E4%B8%96%E7%95%8C%E6%9D%AF/",
            "title": "XTUOJ_1405世界杯",
            "date_published": "2022-10-21T03:20:56.000Z",
            "content_html": "<h1 id=\"world-cup\"><a class=\"anchor\" href=\"#world-cup\">#</a> World Cup</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>世界杯来了！！！自然，足球博彩也变得炙手可热。现在有 n 家博彩公司针对比赛的胜负平给出不同的赔率（比如，赔率为 1 赔 1.5，即如果下注 1 块钱，猜对了会获得 1.5 元，盈利 0.5 元），请问是否有一种策略可以保证一定赢钱？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 T (1≤T≤1000)，表示样例的个数。 每个样例的第一行是一个整数 n (1≤n≤10)，表示博彩公司的数量。 以后的每行包括三个浮点数，w,d,l (1.0&lt;w,d,l≤100.0)，分别表示比赛主队胜平负的赔率。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果，如果存在必赢的策略，输出 &quot;Yes&quot;；否则输出 &quot;No&quot;。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">2</span><br><span class=\"line\">1.3 4.8 10.5</span><br><span class=\"line\">1.4 4.0 9.7</span><br><span class=\"line\">2</span><br><span class=\"line\">1.3 5.6 9.8</span><br><span class=\"line\">1.45 5.0 8.9</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">No</span><br><span class=\"line\">Yes</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<pre><code>#include &lt;stdio.h&gt;\nusing namespace std;\nint main()\n&#123;\n\tint T;\n\tdouble w,d,l;\n\tdouble x=0,y=0,z=0;\n\t\n\tscanf(&quot;%d&quot;,&amp;T);\n\twhile(T--)\n\t&#123;\n\t\tint K;\n\t\tscanf(&quot;%d&quot;,&amp;K);\n\t\twhile(K--)\n\t\t&#123;\n\t\t\tscanf(&quot;%lf %lf %lf&quot;,&amp;w,&amp;d,&amp;l);\n\t\t    if(x&lt;=w)\n\t\t    x = w;\n\t\t    if(y&lt;=d)\n\t\t    y = d;\n\t\t    if(z&lt;=l)\n\t\t    z = l;\n\t\t&#125;\n\t\tx = 1/x;\n\t\ty = 1/y;\n\t\tz = 1/z;\n\t\tif(x+y+z&lt;=1)\n\t\t    printf(&quot;Yes\\n&quot;);\n\t\telse\n\t\t    printf(&quot;No\\n&quot;);\n\t\t    x=0;\n\t\t    y=0;\n\t\t    z=0;\n\t&#125;\n&#125;</code></pre>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-string-h%E5%A4%B4%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-string-h%E5%A4%B4%E6%96%87%E4%BB%B6%E5%87%BD%E6%95%B0/",
            "title": "C语言_string.h头文件函数",
            "date_published": "2022-10-20T11:17:35.000Z",
            "content_html": "<h1 id=\"stringh头文件\"><a class=\"anchor\" href=\"#stringh头文件\">#</a> string.h 头文件</h1>\n<h2 id=\"strdup\"><a class=\"anchor\" href=\"#strdup\">#</a> strdup</h2>\n<p>函数原型:  char *strdup (const char *s)<br>\n 函数功能：字符串拷贝，目的空间由该函数分配<br>\n函数返回：指向拷贝后的字符串指针<br>\n参数说明:  src - 待拷贝的源字符串<br>\n所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *dup_str, *string=&quot;abcde&quot;; </span><br><span class=\"line\">  dup_str=strdup(string); </span><br><span class=\"line\">  printf(&quot;%s&quot;, dup_str); </span><br><span class=\"line\">  free(dup_str); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strcpy\"><a class=\"anchor\" href=\"#strcpy\">#</a> strcpy</h2>\n<p>函数原型:  char* strcpy (char* str1,char* str2);<br>\n 函数功能：把 str2 指向的字符串拷贝到 str1 中去<br>\n函数返回：返回 str1, 即指向 str1 的指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char string[10]; </span><br><span class=\"line\">  char *str1=&quot;abcdefghi&quot;; </span><br><span class=\"line\">  strcpy(string,str1); </span><br><span class=\"line\">  printf(&quot;the string is:%s\\n&quot;,string); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strncpy\"><a class=\"anchor\" href=\"#strncpy\">#</a> strncpy</h2>\n<p>函数原型:  char *strncpy (char *dest, const char *src，intcount)<br>\n 函数功能：将字符串 src 中的 count 个字符拷贝到字符串 dest 中去<br>\n函数返回：指向 dest 的指针<br>\n参数说明:  dest - 目的字符串，src - 源字符串，count - 拷贝的字符个数<br>\n所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char*src = &quot;bbbbbbbbbbbbbbbbbbbb&quot;;//20 &#x27;b&#x27;s</span><br><span class=\"line\">   char dest[50] =&quot;aaaaaaaaaaaaaaaaaaaa&quot;;//20 &#x27;a&#x27;s</span><br><span class=\"line\"> </span><br><span class=\"line\">   puts(dest);</span><br><span class=\"line\">   strncpy(dest, src, 10);</span><br><span class=\"line\"> </span><br><span class=\"line\">   puts(dest);  </span><br><span class=\"line\">   return0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*******************************************</span><br><span class=\"line\">aaaaaaaaaaaaaaaaaaaa</span><br><span class=\"line\">bbbbbbbbbbaaaaaaaaaa</span><br><span class=\"line\">*******************************************/</span><br></pre></td></tr></table></figure><br>\n<strong> 注意：</strong><br>\nstrncpy 只复制指定长度的字符，不会自动在末尾加 '\\0'。若指定长度超过源字符串长度，不够的部分补‘\\0’.</p>\n<h2 id=\"stacat\"><a class=\"anchor\" href=\"#stacat\">#</a> stacat</h2>\n<p>函数原型:  char* strcat (char * str1,char * str2);<br>\n 函数功能：把字符串 str2 接到 str1 后面，str1 最后的 '\\0' 被取消<br>\n函数返回:  str1<br>\n 参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char buffer[80];</span><br><span class=\"line\">  strcpy(buffer,&quot;Hello &quot;); </span><br><span class=\"line\">  strcat(buffer,&quot;world&quot;); </span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strncat\"><a class=\"anchor\" href=\"#strncat\">#</a> strncat</h2>\n<p>函数原型:  char *strncat (char *dest, const char *src, size_t maxlen)<br>\n 函数功能：将字符串 src 中前 maxlen 个字符连接到 dest 中<br>\n函数返回:<br>\n 参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">char buffer[80];</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  strcpy(buffer,&quot;Hello &quot;); </span><br><span class=\"line\">  strncat(buffer,&quot;world&quot;,8); </span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  strncat(buffer,&quot;*************&quot;,4); </span><br><span class=\"line\">  printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 注意:</strong><br>\n 与 strncpy 不同的是，strncat 会自动在末尾加‘\\0’，若指定长度超过源字符串长度，则只复制源字符串长度即停止.</p>\n<h2 id=\"strcmp\"><a class=\"anchor\" href=\"#strcmp\">#</a> strcmp</h2>\n<p>函数原型:  int strcmp (char * str1,char * str2);<br>\n 函数功能：比较两个字符串 str1,str2.<br>\n 函数返回:  str1&lt;str2, 返回负数；str1=str2, 返回 0; str1&gt;str2, 返回正数.<br>\n 参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *buf1=&quot;aaa&quot;, *buf2=&quot;bbb&quot;,*buf3=&quot;ccc&quot;; </span><br><span class=\"line\">  int ptr; </span><br><span class=\"line\">  ptr=strcmp(buf2, buf1); </span><br><span class=\"line\">  if(ptr&gt;0) </span><br><span class=\"line\">    printf(&quot;buffer 2 is greater thanbuffer 1\\n&quot;); </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;buffer 2 is less thanbuffer 1\\n&quot;); </span><br><span class=\"line\">  ptr=strcmp(buf2, buf3); </span><br><span class=\"line\">  if(ptr&gt;0) </span><br><span class=\"line\">    printf(&quot;buffer 2 is greater thanbuffer 3\\n&quot;); </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;buffer 2 is less thanbuffer 3\\n&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strncmp\"><a class=\"anchor\" href=\"#strncmp\">#</a> strncmp</h2>\n<p>函数原型:  int strncmp (char *str1,char *str2,int count)<br>\n 函数功能：对 str1 和 str2 中的前 count 个字符按字典顺序比较<br>\n函数返回：小于 0：str1&lt;str2，等于 0：str1=str2，大于 0：str1&gt;str2<br>\n 参数说明:  str1,str2 - 待比较的字符串，count - 比较的长度<br>\n所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char str1[] =&quot;aabbc&quot;;//</span><br><span class=\"line\">   char str2[] = &quot;abbcd&quot;;//</span><br><span class=\"line\">   //为使测试程序更简练，此处假定了strncmp只返回-1,0,1三个数</span><br><span class=\"line\">   char res_info[] = &#123;&#x27;&lt;&#x27;,&#x27;=&#x27;,&#x27;&gt;&#x27;&#125;;</span><br><span class=\"line\">   int res;</span><br><span class=\"line\"> </span><br><span class=\"line\">   //前1个字符比较</span><br><span class=\"line\">   res = strncmp(str1, str2, 1);</span><br><span class=\"line\">   printf(&quot;1：str1%c str2\\n&quot;, res_info[res+1]);</span><br><span class=\"line\">  </span><br><span class=\"line\">    //前3个字符比较</span><br><span class=\"line\">   res = strncmp(str1, str2, 3);</span><br><span class=\"line\">   printf(&quot;3：str1%c str2\\n&quot;, res_info[res+1]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出:</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/****************************************</span><br><span class=\"line\">1：str1= str2</span><br><span class=\"line\">3：str1&lt; str2</span><br><span class=\"line\">*****************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strpbrk\"><a class=\"anchor\" href=\"#strpbrk\">#</a> strpbrk</h2>\n<p>函数原型:  char *strpbrk (const char *s1, const char *s2)<br>\n 函数功能：得到 s1 中第一个 “同时也出现在 s2 中” 字符的位置指针<br>\n函数返回：位置指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char *p=&quot;Find all vowels&quot;;</span><br><span class=\"line\"> </span><br><span class=\"line\">   p=strpbrk(p+1,&quot;aeiouAEIOU&quot;);</span><br><span class=\"line\">   while(p)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      printf(&quot;%s\\n&quot;,p);</span><br><span class=\"line\">      p=strpbrk(p+1,&quot;aeiouAEIOU&quot;);</span><br><span class=\"line\">     </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**************************************</span><br><span class=\"line\">ind all vowels</span><br><span class=\"line\">all vowels</span><br><span class=\"line\">owels</span><br><span class=\"line\">els</span><br><span class=\"line\">**************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strcspn\"><a class=\"anchor\" href=\"#strcspn\">#</a> strcspn</h2>\n<p>函数原型:  int strcspn (const char *s1, const char *s2)<br>\n 函数功能：统计 s1 中从头开始直到第一个 “来自 s2 中的字符” 出现的长度<br>\n函数返回：长度<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> printf(&quot;%d\\n&quot;,strcspn(&quot;abcbcadef&quot;,&quot;cba&quot;)); </span><br><span class=\"line\"> printf(&quot;%d\\n&quot;,strcspn(&quot;xxxbcadef&quot;,&quot;cba&quot;)); </span><br><span class=\"line\"> printf(&quot;%d\\n&quot;,strcspn(&quot;123456789&quot;,&quot;cba&quot;)); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/************************</span><br><span class=\"line\">0</span><br><span class=\"line\">3</span><br><span class=\"line\">9</span><br><span class=\"line\">************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strspn\"><a class=\"anchor\" href=\"#strspn\">#</a> strspn</h2>\n<p>函数原型:  int strspn (const char *s1, const char *s2)<br>\n 函数功能：统计 s1 中从头开始直到第一个 “不来自 s2 中的字符” 出现的长度<br>\n函数返回：位置指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;alloc.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,strspn(&quot;abcbcadef&quot;,&quot;cba&quot;));</span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,strspn(&quot;xxxbcadef&quot;,&quot;cba&quot;));</span><br><span class=\"line\">   printf(&quot;%d\\n&quot;,strspn(&quot;123456789&quot;,&quot;cba&quot;));</span><br><span class=\"line\">   return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/************************</span><br><span class=\"line\">6</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strchr\"><a class=\"anchor\" href=\"#strchr\">#</a> strchr</h2>\n<p>函数原型:  char* strchr (char* str,char ch);<br>\n 函数功能：找出 str 指向的字符串中第一次出现字符 ch 的位置<br>\n函数返回：返回指向该位置的指针，如找不到，则返回空指针<br>\n参数说明:  str - 待搜索的字符串，ch - 查找的字符<br>\n所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   char *str = &quot;This is a string!&quot;;</span><br><span class=\"line\">   char ch;</span><br><span class=\"line\">   char *p;</span><br><span class=\"line\"> </span><br><span class=\"line\">   while(1)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      printf(&quot;Please input a char:&quot;);</span><br><span class=\"line\">      ch = getchar();</span><br><span class=\"line\">      p = strchr(str, ch);</span><br><span class=\"line\">      if(p)</span><br><span class=\"line\">         printf(&quot;%c is the %d character of\\&quot;%s\\&quot;\\n&quot;,ch, (int)(p-str+1),str);</span><br><span class=\"line\">      else</span><br><span class=\"line\">         printf(&quot;Not found!\\n&quot;);</span><br><span class=\"line\"> </span><br><span class=\"line\">      printf(&quot;Press ESC to quit!\\n\\n&quot;);</span><br><span class=\"line\">      if(27 == getch())</span><br><span class=\"line\">         break;</span><br><span class=\"line\">      fflush(stdin);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 运行结果：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/********************************************</span><br><span class=\"line\">Please input achar:i</span><br><span class=\"line\">i is the 3character of &quot;This is a string!&quot;</span><br><span class=\"line\">Press ESC to quit!</span><br><span class=\"line\"> </span><br><span class=\"line\">Please input achar:l</span><br><span class=\"line\">Not found!</span><br><span class=\"line\">Press ESC to quit!</span><br><span class=\"line\"> </span><br><span class=\"line\">Please input achar:s</span><br><span class=\"line\">s is the 4character of &quot;This is a string!&quot;</span><br><span class=\"line\">Press ESC to quit!</span><br><span class=\"line\">**********************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strrchr\"><a class=\"anchor\" href=\"#strrchr\">#</a> strrchr</h2>\n<p>函数原型:  char *strrchr (const char *s, int c)<br>\n 函数功能：得到字符串 s 中最后一个含有 c 字符的位置指针<br>\n函数返回：位置指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  charstring[15]; </span><br><span class=\"line\">  char*ptr,c=&#x27;r&#x27;; </span><br><span class=\"line\"> strcpy(string,&quot;This is a string&quot;); </span><br><span class=\"line\"> ptr=strrchr(string,c); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">   printf(&quot;The character %c is at position:%d&quot;,c,ptr-string); </span><br><span class=\"line\">  else </span><br><span class=\"line\">   printf(&quot;The character was not found&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strstr\"><a class=\"anchor\" href=\"#strstr\">#</a> strstr</h2>\n<p>函数原型:  char* strstr (char* str1,char* str2);<br>\n 函数功能：找出 str2 字符串在 str1 字符串中第一次出现的位置 (不包括 str2 的串结束符)<br>\n 函数返回：返回该位置的指针，如找不到，返回空指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char*str1=&quot;Open Watcom C/C++&quot;,*str2=&quot;Watcom&quot;,*ptr; </span><br><span class=\"line\"> ptr=strstr(str1,str2); </span><br><span class=\"line\"> printf(&quot;The substring is:%s\\n&quot;,ptr); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The substringis:Watcom C/C++</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strrev\"><a class=\"anchor\" href=\"#strrev\">#</a> strrev</h2>\n<p>函数原型:  char *strrev (char *s)<br>\n 函数功能：将字符串中的所有字符颠倒次序排列<br>\n函数返回：指向 s 的指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char forward[]=&quot;string&quot;; //原文中定义为char*是不对的，指向代码段的指针内容是不可变的</span><br><span class=\"line\"> printf(&quot;Before strrev():%s&quot;,forward); </span><br><span class=\"line\"> strrev(forward); </span><br><span class=\"line\">  printf(&quot;Afterstrrev(): %s&quot;,forward); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/************************************</span><br><span class=\"line\">Beforestrrev():string</span><br><span class=\"line\">After strrev():gnirts</span><br><span class=\"line\">************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strnset\"><a class=\"anchor\" href=\"#strnset\">#</a> strnset</h2>\n<p>函数原型:  char *strnset (char *s, int ch, size_t n)<br>\n 函数功能：将字符串 s 中前 n 个字符设置为 ch 的值<br>\n函数返回：指向 s 的指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">   charstring[]=&quot;aaaaaaaaaaaaaaaaaaaaaaa&quot;;</span><br><span class=\"line\">   char letter=&#x27;x&#x27;;</span><br><span class=\"line\">   printf(&quot;string before strnset:%s\\n&quot;,string);</span><br><span class=\"line\">   strnset(string,letter,10);</span><br><span class=\"line\">   printf(&quot;string after strnset:  %s\\n&quot;,string);</span><br><span class=\"line\"> </span><br><span class=\"line\">return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*************************************************</span><br><span class=\"line\">string beforestrnset: aaaaaaaaaaaaaaaaaaaaaaa</span><br><span class=\"line\">string afterstrnset:  xxxxxxxxxxaaaaaaaaaaaaa</span><br><span class=\"line\">*************************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strset\"><a class=\"anchor\" href=\"#strset\">#</a> strset</h2>\n<p>函数原型:  char *strset (char *s, int ch)<br>\n 函数功能：将字符串 s 中所有字符设置为 ch 的值<br>\n函数返回：指向 s 的指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  charstring[10]=&quot;123456789&quot;; </span><br><span class=\"line\">  charsymbol=&#x27;c&#x27;; </span><br><span class=\"line\"> printf(&quot;Before strset(): %s&quot;, string); </span><br><span class=\"line\"> strset(string, symbol); </span><br><span class=\"line\"> printf(&quot;After strset(): %s&quot;, string); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strtok\"><a class=\"anchor\" href=\"#strtok\">#</a> strtok</h2>\n<p>函数原型:  char *strtok (char *s1, const char *s2)<br>\n 函数功能：分解 s1 字符串为用特定分隔符分隔的多个字符串 (一般用于将英文句分解为单词)<br>\n 函数返回：字符串 s1 中首次出现 s2 中的字符前的子字符串指针</p>\n<p>参数说明:  s2 一般设置为 s1 中的分隔字符<br>\n<strong>规定进行子调用时（即分割 s1 的第二、三及后续子串）第一参数必须是 NULL</strong><br>\n 在每一次匹配成功后，将 s1 中分割出的子串位置替换为 NULL (摘下链中第一个环)，因此 s1 被破坏了</p>\n<p>函数会记忆指针位置以供下一次调用<br>\n所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">#include&lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *p; </span><br><span class=\"line\">  char*buffer; </span><br><span class=\"line\">  char*delims=&#123; &quot; .,&quot; &#125;;</span><br><span class=\"line\"> buffer=strdup(&quot;Find words, all of them.&quot;); </span><br><span class=\"line\"> printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\"> p=strtok(buffer,delims); </span><br><span class=\"line\"> while(p!=NULL)&#123; </span><br><span class=\"line\">   printf(&quot;word: %s\\n&quot;,p); </span><br><span class=\"line\">   p=strtok(NULL,delims); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\"> printf(&quot;%s\\n&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;//根据测试，可以随时给strtok的第一个参数输入一个新的字符串，开始新字符串的分隔</span><br></pre></td></tr></table></figure><br>\n<strong>PS：根据测试，可以随时给 strtok 的第一个参数输入一个新的字符串，开始新字符串的分隔</strong></p>\n<h2 id=\"strupr\"><a class=\"anchor\" href=\"#strupr\">#</a> strupr</h2>\n<p>函数原型:  char *strupr (char *s)<br>\n 函数功能：将字符串 s 中的字符变为大写<br>\n函数返回:<br>\n 参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char string[]=&quot;abcdefghijklmnopqrstuvwxyz&quot;,*ptr; //会影响原字符串的内存，用char[]来声明</span><br><span class=\"line\">  ptr=strupr(string); </span><br><span class=\"line\">  printf(&quot;%s&quot;,ptr); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strlwr\"><a class=\"anchor\" href=\"#strlwr\">#</a> strlwr</h2>\n<p>函数原型:  char *strlwr (char *s)<br>\n 函数功能：将字符串中的字符变为小写字符<br>\n函数返回：指向 s 的指针<br>\n参数说明:<br>\n 所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char str[]=&quot;HOW TO SAY?&quot;; </span><br><span class=\"line\">  printf(&quot;%s&quot;,strlwr(str)); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"strerror\"><a class=\"anchor\" href=\"#strerror\">#</a> strerror</h2>\n<p>函数原型:  char *strerror (int errnum)<br>\n 函数功能：得到错误信息的内容信息<br>\n函数返回：错误提示信息字符串指针<br>\n参数说明:  errnum - 错误编号<br>\n所属文件:  &lt;string.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;errno.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *buffer; </span><br><span class=\"line\">  buffer=strerror(errno); </span><br><span class=\"line\">  printf(&quot;Error: %s&quot;,buffer); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"memcpy\"><a class=\"anchor\" href=\"#memcpy\">#</a> memcpy</h2>\n<p>函数原型:  void *memcpy (void *dest, const void *src, size_t n)<br>\n 函数功能：字符串拷贝<br>\n函数返回：指向 dest 的指针<br>\n参数说明:  src - 源字符串，n - 拷贝的最大长度<br>\n所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char src[]=&quot;******************************&quot;; </span><br><span class=\"line\">  char dest[]=&quot;abcdefghijlkmnopqrstuvwxyz0123456709&quot;; </span><br><span class=\"line\">  char *ptr; </span><br><span class=\"line\">  printf(&quot;destination before memcpy:%s\\n&quot;,dest); </span><br><span class=\"line\">  ptr=memcpy(dest,src,strlen(src)); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">    printf(&quot;destination after memcpy:%s\\n&quot;,dest); </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;memcpy failed&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*************************************************************</span><br><span class=\"line\">destination before memcpy:abcdefghijlkmnopqrstuvwxyz0123456709</span><br><span class=\"line\">destination after memcpy:******************************456709</span><br><span class=\"line\">**************************************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"memeccpy\"><a class=\"anchor\" href=\"#memeccpy\">#</a> memeccpy</h2>\n<p>函数原型:  void *memccpy (void *dest, const void *src, int c, size_t n)<br>\n 函数功能：字符串拷贝，到指定长度或遇到指定字符时停止拷贝<br>\n函数返回:<br>\n 参数说明:  src - 源字符串指针，c - 中止拷贝检查字符，n - 长度，dest - 拷贝底目的字符串指针<br>\n所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *src=&quot;This is the source string&quot;; </span><br><span class=\"line\">  char dest[50]; </span><br><span class=\"line\">  char *ptr; </span><br><span class=\"line\">  ptr=memccpy(dest,src,&#x27;c&#x27;,strlen(src)); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">  &#123; </span><br><span class=\"line\">    *ptr=&#x27;\\0&#x27;; </span><br><span class=\"line\">    printf(&quot;The character wasfound:%s&quot;,dest); </span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  else </span><br><span class=\"line\">    printf(&quot;The character wasn&#x27;tfound&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*****************************************</span><br><span class=\"line\">The character was found:This is the sourc</span><br><span class=\"line\">*****************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"memchr\"><a class=\"anchor\" href=\"#memchr\">#</a> memchr</h2>\n<p>函数原型:  void *memchr (const void *s, int c, size_t n)<br>\n 函数功能：在字符串中第开始 n 个字符中寻找某个字符 c 的位置<br>\n函数返回：返回 c 的位置指针，返回 NULL 时表示未找到<br>\n参数说明:  s - 要搜索的字符串，c - 要寻找的字符，n - 指定长度<br>\n所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char str[17]; </span><br><span class=\"line\">  char *ptr; </span><br><span class=\"line\">  strcpy(str,&quot;This is a string&quot;); </span><br><span class=\"line\">  ptr=memchr(str,&#x27;r&#x27;,strlen(str)); </span><br><span class=\"line\">  if (ptr) </span><br><span class=\"line\">  printf(&quot;The character &#x27;r&#x27; is at position:%d&quot;,ptr-str); </span><br><span class=\"line\">  else </span><br><span class=\"line\">  printf(&quot;The character was not found&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"memecmp\"><a class=\"anchor\" href=\"#memecmp\">#</a> memecmp</h2>\n<p>函数原型:  int memcmp (const void *s1, const void *s2,size_t n)<br>\n 函数功能：按字典顺序比较两个串 s1 和 s2 的前 n 个字节<br>\n函数返回:  &lt;0,=0,&gt;0 分别表示 s1&lt;,=,&gt;s2<br>\n 参数说明:  s1,s2 - 要比较的字符串，n - 比较的长度<br>\n所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main()  </span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  char *buf1=&quot;ABCDE123&quot;;  </span><br><span class=\"line\">  char *buf2=&quot;abcde456&quot;;  </span><br><span class=\"line\">  int stat;  </span><br><span class=\"line\">  stat=memcmp(buf1,buf2,5);  </span><br><span class=\"line\">  printf(&quot;The strings to position 5 are&quot;);  </span><br><span class=\"line\">  if(stat) printf(&quot;not &quot;);  </span><br><span class=\"line\">  printf(&quot;the same\\n&quot;);  </span><br><span class=\"line\">  return 0;  </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"memicmp\"><a class=\"anchor\" href=\"#memicmp\">#</a> memicmp</h2>\n<p>函数原型:  int memicmp (const void *s1, const void *s2, size_t n)<br>\n 函数功能：按字典顺序、不考虑字母大小写对字符串 s1,s2 前 n 个字符比较<br>\n函数返回:  &lt;0,=0,&gt;0 分别表示 s1&lt;,=,&gt;s2<br>\n 参数说明:  s1,s2 - 要比较的字符串，n - 比较的长度<br>\n所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  char *buf1=&quot;ABCDE123&quot;; </span><br><span class=\"line\">  char *buf2=&quot;abcde456&quot;; </span><br><span class=\"line\">  int stat; </span><br><span class=\"line\">  stat=memicmp(buf1,buf2,5); </span><br><span class=\"line\">  printf(&quot;The strings to position 5 are&quot;); </span><br><span class=\"line\">  if(stat) printf(&quot;not&quot;); </span><br><span class=\"line\">  printf(&quot;the same&quot;); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 输出：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**************************************</span><br><span class=\"line\">The strings to position 5 are the same</span><br><span class=\"line\">***************************************/</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"memmove\"><a class=\"anchor\" href=\"#memmove\">#</a> memmove</h2>\n<p>函数原型:  void *memmove (void *dest, const void *src, size_t n)<br>\n 函数功能：字符串拷贝<br>\n函数返回：指向 dest 的指针<br>\n参数说明:  src - 源字符串，n - 拷贝的最大长度<br>\n所属文件:  &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt; </span><br><span class=\"line\">#include &lt;stdio.h&gt; </span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  chardest[40]=&quot;abcdefghijklmnopqrstuvwxyz0123456789&quot;; </span><br><span class=\"line\">  printf(&quot;destination prior tomemmove:%s\\n&quot;,dest); </span><br><span class=\"line\">  memmove(dest+1,dest,35); </span><br><span class=\"line\">  printf(&quot;destination aftermemmove:%s&quot;,dest); </span><br><span class=\"line\">  return 0; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong>PS：与 memcpy 不同的是，memmove 可以处理目的字符串与源字符串地址空间出现重叠的情况，可保证待复制的内容不被破坏。</strong></p>\n<h2 id=\"memset\"><a class=\"anchor\" href=\"#memset\">#</a> memset</h2>\n<p>函数原型:   void *memset (void *s, int c, size_t n)<br>\n 函数功能：字符串中的 n 个字节内容设置为 c<br>\n 函数返回:<br>\n 参数说明:   s - 要设置的字符串，c - 设置的内容，n - 长度<br>\n所属文件:   &lt;string.h&gt;,&lt;mem.h&gt;<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;mem.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  charbuffer[]=&quot;Hello world&quot;;</span><br><span class=\"line\"> printf(&quot;Buffer before memset:%s/n&quot;,buffer);</span><br><span class=\"line\"> memset(buffer,&#x27;*&#x27;,strlen(buffer)-1);</span><br><span class=\"line\"> printf(&quot;Buffer after memset:%s&quot;,buffer);</span><br><span class=\"line\">  return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%BE%93%E5%87%BA/",
            "url": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80_%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E8%BE%93%E5%87%BA/",
            "title": "C语言_二维数组的定义、初始化和输出",
            "date_published": "2022-10-20T06:38:38.000Z",
            "content_html": "<h1 id=\"二维数组的定义\"><a class=\"anchor\" href=\"#二维数组的定义\">#</a> 二维数组的定义</h1>\n<p>二维数组定义的一般形式为：<br>\n<strong>类型说明符 数组名 [常量表达式][ 常量表达式];</strong><br>\neg： int a[3][4]；</p>\n<p>表示定义了一个 3×4，即 3 行 4 列总共有 12 个元素的数组 a。这 12 个元素的名字依次是：a [0][0]、a [0][1]、a [0][2]、a [0][3]；a [1][0]、a [1][1]、a [1][2]、a [1][3]；a [2][0]、a [2][1]、a [2][2]、a [2][3]。</p>\n<p>与一维数组一样，行序号和列序号的下标都是从 0 开始的。元素 a [i][j] 表示第 i+1 行、第 j+1 列的元素。数组 int a [m][n] 最大范围处的元素是 a [m–1][n–1]。所以在引用数组元素时应该注意，下标值应在定义的数组大小的范围内。</p>\n<p>此外，与一维数组一样，定义数组时用到的 “数组名 [常量表达式][常量表达式]” 和引用数组元素时用到的 “数组名 [下标][下标]” 是有区别的。前者是定义一个数组，以及该数组的维数和各维的大小。而后者仅仅是元素的下标，像坐标一样，对应一个具体的元素。</p>\n<p>C 语言对二维数组采用这样的定义方式，使得二维数组可被看作一种特殊的一维数组，即它的元素为一维数组。比如 “int a [3][4]；” 可以看作有三个元素，每个元素都为一个长度为 4 的一维数组。而且 a [0]、a [2]、a [3] 分别是这三个一维数组的数组名。下面来验证一下看看是不是这么回事儿:<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br><span class=\"line\">    printf(&quot;%d\\n&quot;, sizeof(a[0]));</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n 输出结果为：<br>\n<strong>16</strong></p>\n<p>可见 a [0] 确实是第一行一维数组的数组名，其他同理。</p>\n<p>在 C 语言中，二维数组中元素排列的顺序是按行存放的，即在内存中先顺序存放第一行的元素，再存放第二行的元素，这样依次存放。</p>\n<h1 id=\"二维数组的初始化\"><a class=\"anchor\" href=\"#二维数组的初始化\">#</a> 二维数组的初始化</h1>\n<p>可以用下面的方法对二维数组进行初始化。</p>\n<h2 id=\"1-分行给二维数组赋初值比如上面程序的赋值方法\"><a class=\"anchor\" href=\"#1-分行给二维数组赋初值比如上面程序的赋值方法\">#</a> 1) 分行给二维数组赋初值，比如上面程序的赋值方法：</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br></pre></td></tr></table></figure><br>\n 这种赋初值的方法比较直观，将第一个花括号内的数据赋给第一行的元素、第二个花括号内的数据赋给第二行的元素…… 即每行看作一个元素，按行赋初值。</p>\n<h2 id=\"2-也可以将所有数据写在一个花括号内按数组排列的顺序对各元素赋初值\"><a class=\"anchor\" href=\"#2-也可以将所有数据写在一个花括号内按数组排列的顺序对各元素赋初值\">#</a> 2) 也可以将所有数据写在一个花括号内，按数组排列的顺序对各元素赋初值。</h2>\n<p>比如：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br></pre></td></tr></table></figure><br>\n 效果与第 1 种是一样的。但第 1 种方法更好，一行对一行，界限清楚。第 2 种方法如果数据多，写成一大片，容易遗漏，也不易检查。</p>\n<h2 id=\"3-也可以只对部分元素赋初值\"><a class=\"anchor\" href=\"#3-也可以只对部分元素赋初值\">#</a> 3) 也可以只对部分元素赋初值。</h2>\n<p>比如：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;&#123;1, 2&#125;, &#123;5&#125;, &#123;9&#125;&#125;;</span><br></pre></td></tr></table></figure><br>\n 它的作用是对第一行的前两个元素赋值、第二行和第三行的第一个元素赋值。其余元素自动为 0。初始化后数组各元素为：<br>\n1    2    0    0<br>\n5    0    0    0<br>\n9    0    0    0</p>\n<h2 id=\"4-如果在定义数组时就对全部元素赋初值即完全初始化则第一维的长度可以不指定但第二维的长度不能省\"><a class=\"anchor\" href=\"#4-如果在定义数组时就对全部元素赋初值即完全初始化则第一维的长度可以不指定但第二维的长度不能省\">#</a> 4) 如果在定义数组时就对全部元素赋初值，即完全初始化，则第一维的长度可以不指定，但第二维的长度不能省。</h2>\n<p>比如：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br></pre></td></tr></table></figure><br>\n 等价于：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[][4] = &#123;1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;;</span><br></pre></td></tr></table></figure><br>\n 系统会根据数据总数和第二维的长度算出第一维的长度。但这种省略的写法几乎不用，因为可读性差。</p>\n<h2 id=\"5-int-a340\"><a class=\"anchor\" href=\"#5-int-a340\">#</a> 5) int a[3][4]={0}；</h2>\n<p>二维数组 “清零”，里面每一个元素都是零。</p>\n<h1 id=\"二维数组如何输出\"><a class=\"anchor\" href=\"#二维数组如何输出\">#</a> 二维数组如何输出</h1>\n<p>二维数组有行和列，那么如何输出里面的元素呢？在讲述一维数组的时候说过，“数组的元素只能一个一个输出”，二维数组也不例外。在一维数组中是用一个 for 循环进行输出，而二维数组元素的输出要使用两个 for 循环嵌套。<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># include &lt;stdio.h&gt;</span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int a[3][4] = &#123;&#123;1, 2, 3, 4&#125;, &#123;5, 6, 7, 8&#125;, &#123;9, 10, 11, 12&#125;&#125;;</span><br><span class=\"line\">    int i;  //行循环变量</span><br><span class=\"line\">    int j;  //列循环变量</span><br><span class=\"line\">    for (i=0; i&lt;3; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for (j=0; j&lt;4; ++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%-2d\\x20&quot;, a[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n 输出结果是：<br>\n1  2  3  4<br>\n5  6  7  8<br>\n9  10 11 12<br>\n 提示：“printf（&quot;%-2d\\x20&quot;，a [i][j]）；” 中的 “%-2d”，其中 “-” 表示左对齐，如果不写 “-” 则默认表示右对齐；“2” 表示这个元素输出时占两个空格的空间，所以连同后面的 \\x20 则每个元素输出时都占三个空格的空间。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/20/C%E8%AF%AD%E8%A8%80-%E7%B4%A0%E6%95%B0%E7%AD%9B%E6%B3%95/",
            "title": "C语言_素数筛法",
            "date_published": "2022-10-20T02:25:46.000Z",
            "content_html": "<h1 id=\"素数三种求法主要\"><a class=\"anchor\" href=\"#素数三种求法主要\">#</a> 素数三种求法（主要）</h1>\n<h2 id=\"什么是素数\"><a class=\"anchor\" href=\"#什么是素数\">#</a> 什么是素数？</h2>\n<p>质数又称素数。一个大于 1 的自然数，除了 1 和它自身外，不能被其他自然数整除的数叫做质数；否则称为合数（规定 1 既不是质数也不是合数）。</p>\n<h2 id=\"素数试商法\"><a class=\"anchor\" href=\"#素数试商法\">#</a> 素数试商法</h2>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>我们设定一个数为 x，根据质数的定义判断 x 是否为质数，我们看它能否被 2、3、4・・・・・・、x-1 整除，如果它不能被其中任何一个整数整除，则这个数就是质数。</p>\n<h3 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h3>\n<p>如果我们要找 1—1000 内的质数，我们可以控制 x 从 2 自己增到 1000，并且 x 每次自增 1 过后，都要从 2 开始找能否被 x 所整除的数，直到找不到结束。所以我们可以用两层 for 循环来控制，第一层来控制 x 产生 2–1000 数字，第二层 for 循环产生 2 到 x-1 的数，并且判断能否被整除。（因为 1 不是质数，把 1 排除在外）。</p>\n<p>count 来统计大概运算的次数。</p>\n<p>代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//求1--1000内的质数（素数）</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint x = 0;   </span><br><span class=\"line\">\tint i = 0;</span><br><span class=\"line\">\tunsigned int count = 0;  //统计运算的次数</span><br><span class=\"line\">\tfor (x = 2; x &lt; 1000; x++)    //在2到1000之间找质数</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tfor (i = 2; i &lt; x; i++)   //试除法，能不能被x整除，从2开始找，直到等于x</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcount++;</span><br><span class=\"line\">\t\t\tif (x % i == 0)   //找到能被x整除的数了</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tif (x == i)   //找到和x相等也没有被整除的，证明是质数</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;%d &quot;,x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;\\n\\n\\n&quot;);</span><br><span class=\"line\">\tprintf(&quot;运算的次数：%d &quot;,count);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n 运行结果：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210617001619147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2MzExOTMz,size_16,color_FFFFFF,t_70#pic_center\" alt><br>\n<strong>好了看到这里就可以忘掉这种方法了</strong></p>\n<h2 id=\"素数筛法埃拉托斯特尼筛法\"><a class=\"anchor\" href=\"#素数筛法埃拉托斯特尼筛法\">#</a> 素数筛法（埃拉托斯特尼筛法）</h2>\n<h3 id=\"原理-2\"><a class=\"anchor\" href=\"#原理-2\">#</a> 原理</h3>\n<p>自行百度。</p>\n<h3 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> 具体实现</h3>\n<p>先把 N 个自然数按次序排列起来。1 不是质数，也不是合数，要划去。第二个数 2 是质数留下来，而把 2 后面所有能被 2 整除的数都划去。2 后面第一个没划去的数是 3，把 3 留下，再把 3 后面所有能被 3 整除的数都划去。3 后面第一个没划去的数是 5，把 5 留下，再把 5 后面所有能被 5 整除的数都划去。这样一直做下去，就会把不超过 N 的全部合数都筛掉，留下的就是不超过 N 的全部质数。</p>\n<h3 id=\"代码模板1\"><a class=\"anchor\" href=\"#代码模板1\">#</a> 代码模板 1</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//埃拉托斯特尼(Eratosthenes)筛法-&gt;适用于一定范围的元素的筛选</span><br><span class=\"line\">bool is_prime[1000];//布尔数组来标记是否为素数</span><br><span class=\"line\">int prime[1000] = &#123;0&#125;;    //存放素数</span><br><span class=\"line\">int q = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">void isprime_B(int b) //要筛选素数的区间右端点</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    memset(is_prime,true,sizeof(is_prime));//先假设都为素数</span><br><span class=\"line\">    for(int i = 2;i &lt;= sqrt(b);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(is_prime[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            prime[q++] = i;</span><br><span class=\"line\">            for(int j = i*2;j &lt;= b;j += i)//素数的倍数一定不是素数</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                is_prime[j] = false;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\nBOOL 类型不常用（而且需要头文件支持），功能类似 0 和 1；<br>\n替换代码如下：</p>\n<h3 id=\"代码模板2\"><a class=\"anchor\" href=\"#代码模板2\">#</a> 代码模板 2</h3>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#define N 1000</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint b[N+1]=&#123;0,0&#125;,i,j;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfor(i=2; i&lt;=N; i++)</span><br><span class=\"line\">        b[i]=1;</span><br><span class=\"line\">\tfor(i=2; i&lt;=N; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">\t    if(b[i]==1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for(j=i*2; j&lt;=N; j=j+i) </span><br><span class=\"line\">                b[j]=0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"欧拉筛法\"><a class=\"anchor\" href=\"#欧拉筛法\">#</a> 欧拉筛法</h2>\n<p>到这里可以忘掉上面了。<br>\nwhy?<br>\n<em> 与埃氏筛相比，不会对已经被标记过的合数再进行重复筛，故效率更高。欧拉筛保证合数仅被该合数的最小值因数筛去仅一次。</em></p>\n<h2 id=\"代码实现-2\"><a class=\"anchor\" href=\"#代码实现-2\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int isprime[n],prime[n],p;//ispr[i]=1表示i不是素数 </span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tisprime[0]=isprime[1]=1;</span><br><span class=\"line\">    for (int i = 2;i &lt;= n; i++) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">        if (!isprime[i]) //如果值为1</span><br><span class=\"line\">        prime[++p] = i; //前面部分与埃氏筛一样 ，prime数组存当前已经确定的素数 </span><br><span class=\"line\">        for (int j = 1; j &lt;=p &amp;&amp; i*prime[j] &lt;= n; j++)</span><br><span class=\"line\">\t\t &#123;</span><br><span class=\"line\">            ispr[i*prime[j]] = 1;</span><br><span class=\"line\">            if (i % prime[j] == 0) //如果pri[j]是i的最小质因子的话，对i不再往后筛 </span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n 了解就好，多用用</p>\n<p><em><strong>周四了，记得点击下方按钮 V 我 50！</strong></em></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80-%E5%89%8D%E7%BC%80%E5%92%8C%E3%80%81%E5%B7%AE%E5%88%86%E7%AE%97%E6%B3%95/",
            "title": "C语言_前缀和、差分算法",
            "date_published": "2022-10-19T14:06:05.000Z",
            "content_html": "<h1 id=\"前缀和算法\"><a class=\"anchor\" href=\"#前缀和算法\">#</a> 前缀和算法</h1>\n<h2 id=\"关于前缀和\"><a class=\"anchor\" href=\"#关于前缀和\">#</a> 关于前缀和</h2>\n<p><strong>前缀和就是从位置 1 到位置 i 这个区间内的所有的数字之和。</strong><br>\n<img data-src=\"https://img-blog.csdnimg.cn/20200716164747656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1OTE0NTU4,size_16,color_FFFFFF,t_70\" alt></p>\n<h2 id=\"一维数组求前缀和\"><a class=\"anchor\" href=\"#一维数组求前缀和\">#</a> 一维数组求前缀和</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\"> scanf(&quot;%d&quot;, &amp;a[i]);       //读入n个数</span><br><span class=\"line\">for (int i = 1; i &lt;= n; i ++ )</span><br><span class=\"line\"> s[i] = s[i - 1] + a[i];   //处理前缀和</span><br></pre></td></tr></table></figure><br>\n 如上图。<br>\n注：数组最好定义为全局变量。</p>\n<h2 id=\"二维数组求前缀和\"><a class=\"anchor\" href=\"#二维数组求前缀和\">#</a> 二维数组求前缀和</h2>\n<h3 id=\"求sij\"><a class=\"anchor\" href=\"#求sij\">#</a> 求 S [i,j]</h3>\n<p>如图，用 i 表示行，j 表示列：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210418215020780.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center\" alt></p>\n<p>根据图片分析，求 S [i,j]：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[i, j] = s[i, j - 1] + s[i - 1, j] - s[i - 1, j - 1] + a[i, j];</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"求x1y1x2y2子矩阵的和\"><a class=\"anchor\" href=\"#求x1y1x2y2子矩阵的和\">#</a> 求（X1,Y1),(X2,Y2) 子矩阵的和</h3>\n<p>如图：<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20210418221844586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzUyMTU2NDQ1,size_16,color_FFFFFF,t_70#pic_center\" alt><br>\n根据图分析：求 s [x1 ~ x2, y1 ~ y2]:<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s[x1 ~ x2, y1 ~ y2] = s[x2,y2] - s[x2, y1-  1] - s[x1 - 1, y2] + s[x1 - 1,y1 - 1];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"前缀和算法优点\"><a class=\"anchor\" href=\"#前缀和算法优点\">#</a> 前缀和算法优点：</h2>\n<p>对二维矩阵，求子矩阵 (n*m) 的和。暴力法就是两重循环，累加求和。</p>\n<p>每次查询花费 O (n*m) O (n∗m) 时间，n 和 m 是子矩阵的行数和列数。查询的代价有点大。</p>\n<h1 id=\"差分算法\"><a class=\"anchor\" href=\"#差分算法\">#</a> 差分算法</h1>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>差分思想和前缀和是相反的。</p>\n<h2 id=\"一维差分\"><a class=\"anchor\" href=\"#一维差分\">#</a> 一维差分</h2>\n<p>首先我们先定义数组 a, 其中 a [1],a [2]…a [n] 作为前缀和。</p>\n<p>然后构造数组 b，b [1],b [2]…b [n] 为差分数组。其中通过差分数组的前缀和来表示 a 数组，即 a [n] = b [1] + b [2]+…+b [n]。</p>\n<p>一维差分数组的构造也很简单，即 a [1] = b [1], b [2] = a [2] - a [1], b [n] = a [n] - a [n-1]；</p>\n<p>注意：刚开始时可以初始化数组 a,b 全部为 0，输入 a 数组后；在构造时，只需要将 b [1] 看做在 [1, 1] 区间上加上 a [1]; b [2] 看作在 [2, 2] 区间上加上 a [2]；<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对于b[1]:</span><br><span class=\"line\">b[1] = 0 + a[1];</span><br><span class=\"line\">b[2] = 0 - a[1]; //最终：b[1] = a[1]</span><br><span class=\"line\">//对于b[2]:</span><br><span class=\"line\">b[2] = b[2] + a[2]; //最终：b[2] = a[2] - a[1]</span><br><span class=\"line\">b[3] = b[3] - b[2];</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h2>\n<p>简化运算，节约时间，降低时间复杂度。</p>\n<p>由于 a [n] = b [1] + b [2]+…+b [n]，因此只需要将 b [l] = b [l] + c 即可，这样 l 之后的数字会依次加上常数 c，而在 b [r] 处，将 b [r+1] = b [r+1] - c ，这样 r 之后的数组又会恢复原值，仅需要处理这两个边界的差分数组即可，时间复杂度大大降低。<br>\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/5adc7d0e4bf14d24eef7f635232a9dc7.png\" alt></p>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p><em><strong>不常用，加个例题理解一下</strong></em></p>\n<p>输入一个长度为 n 的整数序列。<br>\n接下来输入 m 个操作，每个操作包含三个整数 l,r,c，表示将序列中 [l,r] 之间的每个数加上 c。<br>\n请你输出进行完所有操作后的序列。<br>\n<strong>输入格式</strong><br>\n第一行包含两个整数 n 和 m。<br>\n第二行包含 n 个整数，表示整数序列。<br>\n接下来 m 行，每行包含三个整数 l，r，c 表示一个操作。<br>\n<strong>输出格式</strong><br>\n共一行，包含 n 个整数，表示最终序列。<br>\n<strong>数据范围</strong><br>\n 1 ≤ n , m ≤ 100000,<br>\n1 ≤ l ≤ r ≤ n,<br>\n−1000 ≤ c ≤ 1000,<br>\n−1000 ≤ 整数序列中元素的值 ≤ 1000<br>\n<strong> 输入样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6 3</span><br><span class=\"line\">1 2 2 1 2 1</span><br><span class=\"line\">1 3 1</span><br><span class=\"line\">3 5 1</span><br><span class=\"line\">1 6 1</span><br></pre></td></tr></table></figure><br>\n<strong> 输出样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 5 3 4 2</span><br></pre></td></tr></table></figure><br>\n<strong> 代码模板</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\"></span><br><span class=\"line\">const int N = 100010;</span><br><span class=\"line\"></span><br><span class=\"line\">int m,n;</span><br><span class=\"line\">int a[N],b[N];</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(int l, int r , int c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[l] += c;</span><br><span class=\"line\">    b[r+1] -= c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d%d&quot;,&amp;n, &amp;m);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class=\"line\">    //插入的方式形成b[i]</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) insert(i, i, a[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    while(m--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int l, r ,c;</span><br><span class=\"line\">        scanf(&quot;%d%d%d&quot;,&amp;l, &amp;r, &amp;c);</span><br><span class=\"line\">        insert(l, r, c);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) b[i] += b[i - 1];</span><br><span class=\"line\">    </span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++) printf(&quot;%d &quot;, b[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二维差分\"><a class=\"anchor\" href=\"#二维差分\">#</a> 二维差分</h2>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/a03bb33ac1482c46c1351ed6381a039c.png\" alt><br>\n基本思路：给其中的一个子矩阵加上一个值。矩阵以外的减去一个值即可。<br>\n可列公式表示各个范围如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b[x1] [y1] += C;  </span><br><span class=\"line\">b[x1] [y2+1] −= C;  </span><br><span class=\"line\">b[x2+1] [y1] += C;  </span><br><span class=\"line\">b[x2+1] [y2+1] += C;  </span><br></pre></td></tr></table></figure><br>\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/cba504522f15428b8149054d363f3f18.png\" alt><br>\n 由上面范围，可以求得最终要算的小正方形的面积公式：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">S=b[x1] [y1] − b[x1] [y2​+1] − b[x2+1] [y1] + b[x2+1] [y2+1]</span><br></pre></td></tr></table></figure><br>\n 矩阵的初始化；<br>\n假定 a [i][j] = 0,b [i][j] =0, 然后读取数组 a，只需要对 b 进行插入即可。b [i][j] 相当于从 (i,j) 到 (i,j) 插入一个 a [i][j] 形成的。<br>\n最后求 a [i][j] 只需要求解 b [i][j] 的前缀和即可。</p>\n<h2 id=\"例题差分矩阵\"><a class=\"anchor\" href=\"#例题差分矩阵\">#</a> 例题：差分矩阵</h2>\n<p><em><strong>老样子，不常用，上个题</strong></em></p>\n<p>输入一个 n 行 m 列的整数矩阵，<br>\n再输入 q 个操作，<br>\n每个操作包含五个整数 x1,y1,x2,y2,c，<br>\n其中 (x1,y1) 和 (x2,y2) 表示一个子矩阵的左上角坐标和右下角坐标。<br>\n每个操作都要将选中的子矩阵中的每个元素的值加上 c。<br>\n请你将进行完所有操作后的矩阵输出。<br>\n<strong>输入格式</strong></p>\n<p>第一行包含整数 n,m,q<br>\n 接下来 n 行，每行包含 m 个整数，表示整数矩阵。<br>\n接下来 q 行，每行包含 5 个整数 x1,y1,x2,y2,c 表示一个操作。<br>\n<strong>输出格式</strong><br>\n共 n 行，每行 m 个整数，表示所有操作进行完毕后的最终矩阵。<br>\n<strong>数据范围</strong><br>\n 1 ≤ n , m ≤ 1000<br>\n1 ≤ q ≤ 100000<br>\n1 ≤ x 1 ≤ x 2 ≤n<br>\n1 ≤ y 1 ≤ y 2 ≤ m<br>\n−1000 ≤ c ≤ 1000<br>\n−1000 ≤ 矩阵内元素的值 ≤ 1000<br>\n<strong> 输入样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 4 3</span><br><span class=\"line\">1 2 2 1</span><br><span class=\"line\">3 2 2 1</span><br><span class=\"line\">1 1 1 1</span><br><span class=\"line\">1 1 2 2 1</span><br><span class=\"line\">1 3 2 3 2</span><br><span class=\"line\">3 1 3 4 1</span><br></pre></td></tr></table></figure><br>\n<strong> 输出样例</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 4 1</span><br><span class=\"line\">4 3 4 1</span><br><span class=\"line\">2 2 2 2</span><br></pre></td></tr></table></figure><br>\n<strong> 代码模板</strong><br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">const int N =1010;</span><br><span class=\"line\">int a[N][N],b[N][N];</span><br><span class=\"line\">int n, m ,q;</span><br><span class=\"line\"></span><br><span class=\"line\">void insert(int x1, int y1, int x2, int y2, int c)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    b[x1][y1] += c;</span><br><span class=\"line\">    b[x2 + 1][y1] -= c;</span><br><span class=\"line\">    b[x1][y2 +1] -= c;</span><br><span class=\"line\">    b[x2 +1][y2+1] +=c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;q);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">        for(int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">            scanf(&quot;%d&quot;, &amp;a[i][j]);</span><br><span class=\"line\">    for(int i = 1; i &lt;= n; i++)</span><br><span class=\"line\">        for(int j = 1; j &lt;= m; j++)</span><br><span class=\"line\">            insert(i, j, i, j, a[i][j]);</span><br><span class=\"line\">    while( q-- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int x1, x2, y1, y2, c;</span><br><span class=\"line\">        cin &gt;&gt; x1 &gt;&gt; y1&gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class=\"line\">        insert(x1,y1, x2, y2, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //求前缀和</span><br><span class=\"line\">    for(int i = 1; i&lt;=n; i++)</span><br><span class=\"line\">        for(int j = 1; j&lt;= m; j++)</span><br><span class=\"line\">        b[i][j] += b[i-1][j] +b[i][j-1] -b[i-1][j-1];</span><br><span class=\"line\">    for(int i = 1; i&lt;=n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        for(int j = 1; j&lt;= m; j++)</span><br><span class=\"line\">        printf(&quot;%d &quot;, b[i][j]);</span><br><span class=\"line\">        puts(&quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>前缀和重要，差分有个印象。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "title": "C语言_排序算法_选择排序法",
            "date_published": "2022-10-19T04:41:26.000Z",
            "content_html": "<h1 id=\"c语言选择排序法\"><a class=\"anchor\" href=\"#c语言选择排序法\">#</a> C 语言选择排序法</h1>\n<h2 id=\"原理技术要点\"><a class=\"anchor\" href=\"#原理技术要点\">#</a> 原理 &amp; 技术要点</h2>\n<p>选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到 a [0] 中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到 a [1] 中，a [1] 中的数字仅大于 a [0]，依此类推，即可实现排序。</p>\n<h2 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h2>\n<p>1. 选择排序一共有 数组大小 - 1 轮排序<br>\n 2. 每一轮排序，又是一个循环<br>\n 3. 先假定当前这个数是最小数<br>\n 4. 然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标<br>\n 5. 当遍历到数组的最后时，就得到本轮最小数和下标<br>\n 6. 交换</p>\n<h2 id=\"存储状态演示\"><a class=\"anchor\" href=\"#存储状态演示\">#</a> 存储状态演示</h2>\n<p>*<strong> 黑体为无序区，其余为有序区</strong><br>\n初始序列：<strong>2 4 7 1 6 9 8 3 0 5</strong></p>\n<p>第 1 趟：2 与 0 交换：0 <strong>4 7 1 6 9 8 3 2 5</strong></p>\n<p>第 2 趟：0 不动，4 与 1 交换：0 1 <strong>7 4 6 9 8 3 2 5</strong></p>\n<p>第 3 趟：7 与 2 交换：0 1 2 <strong>4 6 9 8 3 7 5</strong></p>\n<p>第 4 趟：4 与 3 交换：0 1 2 3 <strong>6 9 8 4 7 5</strong></p>\n<p>第 5 趟：6 与 4 交换：0 1 2 3 4 <strong>9 8 6 7 5</strong></p>\n<p>第 6 趟：9 与 5 交换：0 1 2 3 4 5 <strong>8 6 7 9</strong></p>\n<p>第 7 趟：8 与 6 交换：0 1 2 3 4 5 6 <strong>8 7 9</strong></p>\n<p>第 8 趟：8 与 7 交换：0 1 2 3 4 5 6 7 <strong>8 9</strong></p>\n<p>第 9 趟：排序完成</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j,t,a[11];    //定义变量及数组为基本整型</span><br><span class=\"line\">    for(i=1;i&lt;11;i++)</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;a[i]);    //从键盘中输入要排序的10个数字</span><br><span class=\"line\">    for(i=1;i&lt;=9;i++)</span><br><span class=\"line\">        for (j=i+1;j&lt;=10;j++)</span><br><span class=\"line\">            if(a[i]&gt;a[j])    //如果前一个数比后一个数大，则利用中间变量t实现两值互换</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t=a[i];</span><br><span class=\"line\">                a[i]=a[j];</span><br><span class=\"line\">                a[j]=t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    for(i=1;i&lt;=10;i++)</span><br><span class=\"line\">        printf(&quot;%5d&quot;, a[i]);    //输出排序后的数组</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h2>\n<p>input:<br>\n526 36 2 369 56 45 78 92 125 52<br>\noutput:<br>\n2 36 45 52 56 78 92 125 369 526</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "title": "C语言_辗转相除法两种方式两个用处",
            "date_published": "2022-10-19T02:17:51.000Z",
            "content_html": "<h1 id=\"辗转相除法\"><a class=\"anchor\" href=\"#辗转相除法\">#</a> 辗转相除法</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>辗转相除法，被称为欧几里得（Euclidean）算法，是求最大公约数的算法。</p>\n<h2 id=\"证明\"><a class=\"anchor\" href=\"#证明\">#</a> 证明</h2>\n<p>设 b = aq + r， (a,b) 为 a，b 的最大公约数。<br>\n则 a % (a,b) = 0; b % (a,b) = 0,<br>\n 因为 (a 和 b 的约数) % (a,b) = 0,<br>\n 所以 (b - aq) % (a,b) = 0<br>\n 即 r % (a,b) = 0<br>\n 因为 a % (a,b) = 0, r % (a,b) = 0<br>\n 所以 (a,r) % (a,b) = 0 (最大公约数一定被公约数整除）<br>\n又因为 a % (a,r) = 0, r % (a,r) = 0, b = aq+r<br>\n 所以 (aq + r) % (a,r) = 0<br>\n 即 b % （a,r) = 0<br>\n 因为 a % （a,r) = 0<br>\nb % (a,r) = 0<br>\n 所以<br>\n (a,b) % (a,r) = 0<br>\n 所以<br>\n (a,b) = (a,r)</p>\n<p><strong>证明过程来自百度，大体了解即可！</strong></p>\n<h2 id=\"具体做法\"><a class=\"anchor\" href=\"#具体做法\">#</a> 具体做法</h2>\n<p>用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是 0 为止。最后的除数即为两个数的最大公约数。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long long int GCD(long long int n,long long int m)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long int t;</span><br><span class=\"line\">    if(n&lt;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t=n,n=m,m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(t=n%m,t&gt;0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=m;</span><br><span class=\"line\">        m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 自写 GCD 函数</strong></p>\n<h2 id=\"进阶实现递归\"><a class=\"anchor\" href=\"#进阶实现递归\">#</a> 进阶实现（递归）</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int GCD(int x,int y)//公因数 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(y==0)</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">    else </span><br><span class=\"line\">\treturn GCD(y,x%y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 通过递归精简代码</strong></p>\n<h2 id=\"辗转相除法求最小公倍数\"><a class=\"anchor\" href=\"#辗转相除法求最小公倍数\">#</a> 辗转相除法求最小公倍数</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = a*b/m;</span><br></pre></td></tr></table></figure><br>\n 其中 ans 为最小公倍数，a,b 为输入的两个数，m 为两个数字的最大公因数。<br>\n<strong>原理很简单，两个数的最小公倍数等于两个数的乘积除以最大公约数（证明过程略）。</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/",
            "url": "https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/",
            "title": "CTF_密码学方向常用密码目录",
            "date_published": "2022-10-17T05:58:51.000Z",
            "content_html": "<h1 id=\"ctf密码学\"><a class=\"anchor\" href=\"#ctf密码学\">#</a> CTF 密码学</h1>\n<p><strong>本篇博客将列举 CTF 中常用密码供参考</strong></p>\n<blockquote>\n<p>常见编码</p>\n<blockquote>\n<p>ASCII 编码<br>\n shellcode 编码<br>\n Quoted-printable 编码<br>\n XXencode 编码<br>\n URL 编码<br>\n Unicode 编码<br>\n Escape/Unescape 编码<br>\n HTML 实体编码<br>\n MD5 算法<br>\n敲击码（Tap code)<br>\n 摩尔斯电码（Morse Code)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>换位加密</p>\n<blockquote>\n<p>栅栏密码（Rail-fence Cipher)<br>\n 曲路密码（Curve Cipher)<br>\n 列移位密码（Columnar Transposition Cipher)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>替换加密</p>\n<blockquote>\n<p>埃特巴什码（Atbash Cipher)<br>\n 凯撒密码（Caesar Cipher)<br>\nROT/13/18/47<br>\n 简单换位密码（Simple Substitution Cipher)<br>\n 希尔密码 (Hill Cipher)<br>\n 猪圈密码 (Pigpen Cipher)<br>\n 波利比奥斯方阵密码（Polybius Square Cipher)<br>\n 夏多密码 (曲折加密)<br>\n 普莱菲尔密码（Playfair Cipher)<br>\n 维吉尼亚密码（Vigenere Cipher)<br>\n 自动密钥密码 (Autokey Cipher)<br>\n 博福特密码 (Beaufort Cipher)<br>\n 滚动密钥密码（Running Key Cipher)<br>\n Porta 密码 (Porta Cipher)<br>\n 同音替换密码（Homophoic Substitution Cipher)<br>\n 仿射密码（Affine Cipher)<br>\n 培根密码（Baconian Cipher)<br>\n ADFGX 和 ADFGVX 密码（ADFG/VX Cipher)<br>\n 双密码 (Bifid Cipher)<br>\n 三分密码（Trifid Cipher)<br>\n 四方密码（Four-Square Cipher)<br>\n 棋盘密码（Checkerboard Cipher)<br>\n 跨棋盘密码（Straddle Checkerboard Cipher)<br>\n 分组摩尔斯替换密码（Fractionated Morse Cipher)<br>\n Bazeries 密码（Bazeries Cipher)<br>\n Digrafid 密码（Digrafid Cipher)<br>\n 格朗普雷密码（Grandpre Cipher)<br>\n 盲文密码（Blind Cipher)<br>\n 键盘密码（Keyboard Cipher)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>代码混淆加密</p>\n<blockquote>\n<p>asp 混淆加密<br>\n php 混淆加密<br>\n css/js 混淆加密<br>\n VBScript.Encode 混淆加密<br>\n ppencode<br>\nrrencode<br>\njjencode/aaencode<br>\nJSfuck<br>\njother<br>\nbranfuck<br>\nuuencode</p>\n</blockquote>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/16/hello-world/",
            "url": "https://mangpumo.github.io/2022/10/16/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-16T01:57:15.958Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}