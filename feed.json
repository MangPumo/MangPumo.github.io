{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "翩若浮云着霓裳，落幕鬓边皆染霜",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2022/12/09/%E5%93%88%E5%B8%8C%E8%A1%A8-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/",
            "url": "https://mangpumo.github.io/2022/12/09/%E5%93%88%E5%B8%8C%E8%A1%A8-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/",
            "title": "哈希表_两个数组的交集",
            "date_published": "2022-12-09T04:10:20.000Z",
            "content_html": "<h1 id=\"两个数组的交集\"><a class=\"anchor\" href=\"#两个数组的交集\">#</a> 两个数组的交集</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 349. 两个数组的交集</p>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>没啥好说的....<br>\n 就继续刷吧....</p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Note: The returned array must be malloced, assume caller calls free().</span><br><span class=\"line\"> */</span><br><span class=\"line\">int* intersection(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize)&#123;</span><br><span class=\"line\">    int num1Cnt[1000] = &#123;0&#125;;</span><br><span class=\"line\">    int lessSize = nums1Size &gt; nums2Size ? nums2Size : nums1Size;</span><br><span class=\"line\">    int * result = (int *) calloc(lessSize, sizeof(int));</span><br><span class=\"line\">    int resultIndex = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i=0; i&lt;nums1Size; i++)&#123;</span><br><span class=\"line\">        //因为范围有界定，所以使用数组，出现一次就在这个数字的位置加1</span><br><span class=\"line\">        num1Cnt[nums1[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(i=0; i&lt;nums2Size; i++)&#123;</span><br><span class=\"line\">        if(num1Cnt[nums2[i]] &gt; 0)&#123;</span><br><span class=\"line\">            //如果在2里也出现了1中的数字（不管几次），就结果数组++；</span><br><span class=\"line\">            result[resultIndex] = nums2[i];</span><br><span class=\"line\">            resultIndex++;</span><br><span class=\"line\">            //防止重复数字，去重</span><br><span class=\"line\">            num1Cnt[nums2[i]] = 0;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //这里我也看不懂，大概就是LEETCODE的核心代码提交的方法把。。。</span><br><span class=\"line\">    * returnSize = resultIndex;</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E5%93%88%E5%B8%8C%E8%A1%A8-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D/",
            "url": "https://mangpumo.github.io/2022/12/08/%E5%93%88%E5%B8%8C%E8%A1%A8-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D/",
            "title": "哈希表_有效的字母异位",
            "date_published": "2022-12-08T15:32:43.000Z",
            "content_html": "<h1 id=\"有效的字母异位\"><a class=\"anchor\" href=\"#有效的字母异位\">#</a> 有效的字母异位</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 242. 有效的字母异位</p>\n<h2 id=\"通过的代码\"><a class=\"anchor\" href=\"#通过的代码\">#</a> 通过的代码</h2>\n<p>算法：哈希表<br>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool isAnagram(char * s, char * t)&#123;</span><br><span class=\"line\">    int i, x[26] = &#123; 0 &#125;, y[26] = &#123; 0 &#125;;</span><br><span class=\"line\">\tfor (i = 0; s[i] != &#x27;\\0&#x27;; i++)\t</span><br><span class=\"line\">        x[s[i] - &#x27;a&#x27;]++;\t//建立 s 的字符表 x</span><br><span class=\"line\">\tfor (i = 0; t[i] != &#x27;\\0&#x27;; i++)\t</span><br><span class=\"line\">        y[t[i] - &#x27;a&#x27;]++;\t//建立 t 的字符表 y</span><br><span class=\"line\">\tfor (i = 0; i &lt; 26; i++)\t\t\t\t\t\t\t//比较两字符表是否相同</span><br><span class=\"line\">\t\tif (x[i] != y[i])\t</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool isAnagram(char * s, char * t)&#123;</span><br><span class=\"line\">    int s1 = strlen(s);</span><br><span class=\"line\">    int t1 = strlen(t);</span><br><span class=\"line\">    int record[26] = &#123;0&#125;;</span><br><span class=\"line\">    if(s1 != t1)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        for(int i=0; i&lt;s1; i++)&#123;</span><br><span class=\"line\">            record[s[i]-&#x27;a&#x27;]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(int i=0; i&lt;t1; i++)&#123;</span><br><span class=\"line\">            record[t[i]-&#x27;a&#x27;]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for(int i=0; i&lt;26; i++)&#123;</span><br><span class=\"line\">            if(record[i])</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"未通过样例\"><a class=\"anchor\" href=\"#未通过样例\">#</a> 未通过样例</h2>\n<p>希望大佬帮我 DEBUG 一下！！感谢<br>\n联系方式：</p>\n<p>QQ 363790477</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool isAnagram(char * s, char * t)&#123;</span><br><span class=\"line\">    int s1 = sizeof(s);</span><br><span class=\"line\">    int t1 = sizeof(t);</span><br><span class=\"line\">    int record[26] = &#123;0&#125;;</span><br><span class=\"line\">    if(s1 != t1)&#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i=0; s[i] != &#x27;\\0&#x27;; i++)&#123;</span><br><span class=\"line\">        record[s[i]-&#x27;a&#x27;]++;</span><br><span class=\"line\">        record[t[i]-&#x27;a&#x27;]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i=0; i&lt;26; i++)&#123;</span><br><span class=\"line\">        if(record[i] != 0)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ING%EF%BC%89/",
            "url": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0ING%EF%BC%89/",
            "title": "数组算法（持续更新ING）",
            "date_published": "2022-12-08T13:49:19.000Z",
            "content_html": "<h1 id=\"数组算法\"><a class=\"anchor\" href=\"#数组算法\">#</a> 数组算法</h1>\n<h2 id=\"二分法\"><a class=\"anchor\" href=\"#二分法\">#</a> 二分法</h2>\n<h2 id=\"双指针法\"><a class=\"anchor\" href=\"#双指针法\">#</a> 双指针法</h2>\n<h3 id=\"快慢指针法\"><a class=\"anchor\" href=\"#快慢指针法\">#</a> 快慢指针法</h3>\n<h2 id=\"滑动窗口\"><a class=\"anchor\" href=\"#滑动窗口\">#</a> 滑动窗口</h2>\n<h2 id=\"模拟\"><a class=\"anchor\" href=\"#模拟\">#</a> 模拟</h2>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/",
            "url": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II/",
            "title": "数组_螺旋矩阵II",
            "date_published": "2022-12-08T13:42:37.000Z",
            "content_html": "<h1 id=\"螺旋矩阵ii\"><a class=\"anchor\" href=\"#螺旋矩阵ii\">#</a> 螺旋矩阵 II</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 59. 螺旋矩阵 II</p>\n<h2 id=\"思路\"><a class=\"anchor\" href=\"#思路\">#</a> 思路</h2>\n<p>没有算法，模拟，看对代码和下标的掌握程度。</p>\n<h2 id=\"leetcode-过体代码copy的还是看不懂他的数组返回方式\"><a class=\"anchor\" href=\"#leetcode-过体代码copy的还是看不懂他的数组返回方式\">#</a> LEETCODE 过体代码（COPY 的，还是看不懂他的数组返回方式）</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Return an array of arrays of size *returnSize.</span><br><span class=\"line\"> * The sizes of the arrays are returned as *returnColumnSizes array.</span><br><span class=\"line\"> * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().</span><br><span class=\"line\"> */</span><br><span class=\"line\">int** generateMatrix(int n, int* returnSize, int** returnColumnSizes)&#123;</span><br><span class=\"line\">    //初始化返回的结果数组的大小</span><br><span class=\"line\">    *returnSize = n;</span><br><span class=\"line\">    *returnColumnSizes = (int*)malloc(sizeof(int) * n);</span><br><span class=\"line\">    //初始化返回结果数组ans</span><br><span class=\"line\">    int** ans = (int**)malloc(sizeof(int*) * n);</span><br><span class=\"line\">    int i;</span><br><span class=\"line\">    for(i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">        ans[i] = (int*)malloc(sizeof(int) * n);</span><br><span class=\"line\">        (*returnColumnSizes)[i] = n;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //设置每次循环的起始位置</span><br><span class=\"line\">    int startX = 0;</span><br><span class=\"line\">    int startY = 0;</span><br><span class=\"line\">    //设置二维数组的中间值，若n为奇数。需要最后在中间填入数字</span><br><span class=\"line\">    int mid = n / 2;</span><br><span class=\"line\">    //循环圈数</span><br><span class=\"line\">    int loop = n / 2;</span><br><span class=\"line\">    //偏移数</span><br><span class=\"line\">    int offset = 1;</span><br><span class=\"line\">    //当前要添加的元素</span><br><span class=\"line\">    int count = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    while(loop) &#123;</span><br><span class=\"line\">        int i = startX;</span><br><span class=\"line\">        int j = startY;</span><br><span class=\"line\">        //模拟上侧从左到右</span><br><span class=\"line\">        for(; j &lt; startY + n - offset; j++) &#123;</span><br><span class=\"line\">            ans[startX][j] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //模拟右侧从上到下</span><br><span class=\"line\">        for(; i &lt; startX + n - offset; i++) &#123;</span><br><span class=\"line\">            ans[i][j] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //模拟下侧从右到左</span><br><span class=\"line\">        for(; j &gt; startY; j--) &#123;</span><br><span class=\"line\">            ans[i][j] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //模拟左侧从下到上</span><br><span class=\"line\">        for(; i &gt; startX; i--) &#123;</span><br><span class=\"line\">            ans[i][j] = count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        //偏移值每次加2</span><br><span class=\"line\">        offset+=2;</span><br><span class=\"line\">        //遍历起始位置每次+1</span><br><span class=\"line\">        startX++;</span><br><span class=\"line\">        startY++;</span><br><span class=\"line\">        loop--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //若n为奇数需要单独给矩阵中间赋值</span><br><span class=\"line\">    if(n%2)</span><br><span class=\"line\">        ans[mid][mid] = count;</span><br><span class=\"line\"></span><br><span class=\"line\">    return ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"gcc编译的代码\"><a class=\"anchor\" href=\"#gcc编译的代码\">#</a> GCC 编译的代码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint n;</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">\tint a[n][n];//数组</span><br><span class=\"line\">\tint startx = 0,starty = 0;//每一圈循环的开始位置</span><br><span class=\"line\">\tint offset = 1;//控制边界长度</span><br><span class=\"line\">\tint mid = n/2;//确定数组中间值的位置</span><br><span class=\"line\">\tint loop = n/2;//确定循环次数</span><br><span class=\"line\">\tint count = 1;//每次需要填充的数字</span><br><span class=\"line\">\tint i,j;</span><br><span class=\"line\">\twhile(loop--)&#123;</span><br><span class=\"line\">\t\ti = startx;</span><br><span class=\"line\">\t\tj = starty;</span><br><span class=\"line\">\t\t//从上层从左到右</span><br><span class=\"line\">\t\tfor(j = starty; j &lt; n+starty-offset; j++)&#123;</span><br><span class=\"line\">\t\t\ta[i][j] = count++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//从右侧从上到下</span><br><span class=\"line\">\t\tfor(i = startx; i &lt; n+startx-offset; i++)&#123;</span><br><span class=\"line\">\t\t\ta[i][j] = count++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//从下层从右到左</span><br><span class=\"line\">\t\tfor(; j &gt; starty; j--)&#123;</span><br><span class=\"line\">\t\t\ta[i][j] = count++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//从左侧从下到上</span><br><span class=\"line\">\t\tfor(; i &gt; startx; i--)&#123;</span><br><span class=\"line\">\t\t\ta[i][j] = count++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t//如果是奇数，需要把中间补上</span><br><span class=\"line\">\t\tif(n%2 == 1)&#123;</span><br><span class=\"line\">\t\t\ta[mid][mid] = count++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\toffset += 2;</span><br><span class=\"line\">\t\tstartx++;</span><br><span class=\"line\">\t\tstarty++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//打印出来看一下</span><br><span class=\"line\">\tfor(i=0; i&lt;n; i++)&#123;</span><br><span class=\"line\">\t\tfor(j=0; j&lt;n; j++)&#123;</span><br><span class=\"line\">\t\t\tprintf(&quot;%d &quot;,a[i][j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tprintf(&quot;\\n&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/",
            "url": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/",
            "title": "数组_搜索插入位置",
            "date_published": "2022-12-08T03:10:32.000Z",
            "content_html": "<h1 id=\"搜索插入位置\"><a class=\"anchor\" href=\"#搜索插入位置\">#</a> 搜索插入位置</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 35. 搜索插入位置</p>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>不想多说，暴力不一定时间复杂度低，二分不一定更高效。</p>\n<h2 id=\"暴力法\"><a class=\"anchor\" href=\"#暴力法\">#</a> 暴力法</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int searchInsert(int* nums, int numsSize, int target)&#123;</span><br><span class=\"line\">    for(int i=0; i&lt;numsSize; i++)&#123;</span><br><span class=\"line\">\t\t//谁说暴力不好用的？</span><br><span class=\"line\">        if(nums[i] &gt;= target)&#123;</span><br><span class=\"line\">            return i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return numsSize;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二分法闭区间\"><a class=\"anchor\" href=\"#二分法闭区间\">#</a> 二分法（闭区间）</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int searchInsert(int* nums, int numsSize, int target)&#123;</span><br><span class=\"line\">    int left = 0;</span><br><span class=\"line\">    int right = numsSize - 1;</span><br><span class=\"line\">    int middle;</span><br><span class=\"line\">    while(left &lt;= right)&#123;</span><br><span class=\"line\">        middle = left + (right-left)/2;</span><br><span class=\"line\">\t\t//与之前一样的</span><br><span class=\"line\">        if(nums[middle] &lt; target)&#123;</span><br><span class=\"line\">            left = middle + 1;</span><br><span class=\"line\">        &#125; else if (nums[middle] &gt; target)&#123;</span><br><span class=\"line\">            right = middle - 1;</span><br><span class=\"line\">        &#125; else if (nums[middle] == target)&#123;</span><br><span class=\"line\">            return middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return right+1;</span><br><span class=\"line\">\t//如果没有就在查找区间末加上一个</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/",
            "url": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/",
            "title": "数组_有序数组的平方",
            "date_published": "2022-12-08T02:23:05.000Z",
            "content_html": "<h1 id=\"有序数组的平方\"><a class=\"anchor\" href=\"#有序数组的平方\">#</a> 有序数组的平方</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 977. 有序数组的平方</p>\n<h2 id=\"双指针法\"><a class=\"anchor\" href=\"#双指针法\">#</a> 双指针法</h2>\n<p>因为不太明白它是如何提交数组的，所以在这里 copy 了别人的代码，仅供参考。<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int* sortedSquares(int* nums, int numsSize, int* returnSize)&#123;</span><br><span class=\"line\">    //返回的数组大小就是原数组大小</span><br><span class=\"line\">    *returnSize = numsSize;</span><br><span class=\"line\">    //创建两个指针，right指向数组最后一位元素，left指向数组第一位元素</span><br><span class=\"line\">    int right = numsSize - 1;</span><br><span class=\"line\">    int left = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">    //最后要返回的结果数组</span><br><span class=\"line\">    int* ans = (int*)malloc(sizeof(int) * numsSize);</span><br><span class=\"line\">    int index;</span><br><span class=\"line\">    for(index = numsSize - 1; index &gt;= 0; index--) &#123;</span><br><span class=\"line\">        //左指针指向元素的平方</span><br><span class=\"line\">        int lSquare = nums[left] * nums[left];</span><br><span class=\"line\">        //右指针指向元素的平方</span><br><span class=\"line\">        int rSquare = nums[right] * nums[right];</span><br><span class=\"line\">        //若左指针指向元素平方比右指针指向元素平方大，将左指针指向元素平方放入结果数组。左指针右移一位</span><br><span class=\"line\">        if(lSquare &gt; rSquare) &#123;</span><br><span class=\"line\">            ans[index] = lSquare;</span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        //若右指针指向元素平方比左指针指向元素平方大，将右指针指向元素平方放入结果数组。右指针左移一位</span><br><span class=\"line\">        else &#123;</span><br><span class=\"line\">            ans[index] = rSquare;</span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //返回结果数组</span><br><span class=\"line\">    return ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/",
            "url": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/",
            "title": "数组_长度最小的子数组",
            "date_published": "2022-12-08T01:34:12.000Z",
            "content_html": "<h1 id=\"长度最小的数组\"><a class=\"anchor\" href=\"#长度最小的数组\">#</a> 长度最小的数组</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 209. 长度最小的数组</p>\n<h2 id=\"暴力算法\"><a class=\"anchor\" href=\"#暴力算法\">#</a> 暴力算法</h2>\n<p>这道题目暴力解法当然是 两个 for 循环，然后不断的寻找符合条件的子序列.</p>\n<p>代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int minSubArrayLen(int target, int* nums, int numsSize)&#123;</span><br><span class=\"line\">    int result = INT32_MAX;</span><br><span class=\"line\">    int sum = 0;</span><br><span class=\"line\">    int len = 0;</span><br><span class=\"line\">    for(int i=0; i&lt;numsSize; i++)&#123;</span><br><span class=\"line\">        sum = 0;</span><br><span class=\"line\">        for(int j=i; j&lt;numsSize; j++)&#123;</span><br><span class=\"line\">            sum += nums[j];</span><br><span class=\"line\">            if(sum &gt;= target)&#123;</span><br><span class=\"line\">                len = j-i+1;</span><br><span class=\"line\">                result = result &lt; len ? result : len;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result &lt; INT32_MAX ? result : 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"滑动窗口\"><a class=\"anchor\" href=\"#滑动窗口\">#</a> 滑动窗口</h2>\n<p>接下来就开始介绍数组操作中另一个重要的方法：<strong>滑动窗口</strong>。</p>\n<p>所谓滑动窗口，就是<strong>不断的调节子序列的起始位置和终止位置</strong>，从而得出我们要想的结果。</p>\n<p>在暴力解法中，是一个 for 循环滑动窗口的起始位置，一个 for 循环为滑动窗口的终止位置，用两个 for 循环 完成了一个不断搜索区间的过程。</p>\n<p>那么滑动窗口如何用一个 for 循环来完成这个操作呢。</p>\n<p>首先要思考 如果用一个 for 循环，那么应该表示 滑动窗口的起始位置，还是终止位置。</p>\n<p>如果只用一个 for 循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？</p>\n<p>此时难免再次陷入 暴力解法的怪圈。</p>\n<p>所以 只用一个 for 循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。</p>\n<p>在本题中实现滑动窗口，主要确定如下三点：</p>\n<ul>\n<li>窗口内是什么？</li>\n<li>如何移动窗口的起始位置？</li>\n<li>如何移动窗口的结束位置？</li>\n</ul>\n<p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p>\n<p>窗口的起始位置如何移动：如果当前窗口的值大于 s 了，窗口就要向前移动了（也就是该缩小了）。</p>\n<p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是 for 循环里的索引。</p>\n<p>解题的关键在于 窗口的起始位置如何移动。</p>\n<p><strong>滑动窗口的精妙之处在于根据当前子序列和大小的情况，不断调节子序列的起始位置。从而将 O (n^2) 暴力解法降为 O (n)。</strong></p>\n<p>代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int minSubArrayLen(int target, int* nums, int numsSize)&#123;</span><br><span class=\"line\">    int result = INT32_MAX;</span><br><span class=\"line\">    int i = 0;//滑动窗口起始位置</span><br><span class=\"line\">    int sum = 0;//滑动窗口内元素总和</span><br><span class=\"line\">    int len = 0;//滑动窗口的长度</span><br><span class=\"line\">    for(int j=0; j&lt;numsSize; j++)&#123;</span><br><span class=\"line\">        sum += nums[j];//累加并与target比较</span><br><span class=\"line\">        while(sum &gt;= target)&#123;//不能用IF</span><br><span class=\"line\">            len = j-i+1;</span><br><span class=\"line\">            result = result &lt; len ? result : len;</span><br><span class=\"line\">            sum -= nums[i++];//滑动窗口向后移动减去初始位置的值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result &lt; INT32_MAX ? result : 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/",
            "url": "https://mangpumo.github.io/2022/12/08/%E6%95%B0%E7%BB%84-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/",
            "title": "数组_移除元素",
            "date_published": "2022-12-08T01:31:54.000Z",
            "content_html": "<h1 id=\"移除元素\"><a class=\"anchor\" href=\"#移除元素\">#</a> 移除元素</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 27. 移除元素</p>\n<h2 id=\"暴力算法\"><a class=\"anchor\" href=\"#暴力算法\">#</a> 暴力算法</h2>\n<p>这个题目暴力的解法就是两层 for 循环，一个 for 循环遍历数组元素 ，第二个 for 循环更新数组。</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int removeElement(int* nums, int numsSize, int val)&#123;</span><br><span class=\"line\">    int i,j;</span><br><span class=\"line\">    int n = numsSize;</span><br><span class=\"line\">    for(i=0; i&lt;numsSize; i++)&#123;</span><br><span class=\"line\">        if(nums[i] == val)&#123;</span><br><span class=\"line\">            for(j=i+1; j&lt;numsSize; j++)&#123;</span><br><span class=\"line\">                nums[j-1] == nums[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--;//每次去除VAL后，数组下标都会前移</span><br><span class=\"line\">        n--;//长度也在减小</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    printf(&quot;%d&quot;,n);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"双指针法\"><a class=\"anchor\" href=\"#双指针法\">#</a> 双指针法</h2>\n<p>双指针法（快慢指针法）： <strong>通过一个快指针和慢指针在一个 for 循环下完成两个 for 循环的工作。</strong></p>\n<p>定义快慢指针</p>\n<ul>\n<li>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组</li>\n<li>慢指针：指向更新 新数组下标的位置</li>\n</ul>\n<p>优点：<br>\n减少复杂度，优化代码。</p>\n<p>代码如下：<br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int removeElement(int* nums, int numsSize, int val)&#123;</span><br><span class=\"line\">    int fast = 0;</span><br><span class=\"line\">    int slow = 0;</span><br><span class=\"line\">    for(; fast&lt;numsSize; fast++)&#123;</span><br><span class=\"line\">        if(nums[fast] != val)&#123;//如果元素不是VAL，下标为slow的元素等于快指针处的元素</span><br><span class=\"line\">            nums[slow++] = nums[fast];</span><br><span class=\"line\">        &#125;//如果相等则跳过，此时slow未递增；快指针依旧在往前进</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return slow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/07/%E6%95%B0%E7%BB%84-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "url": "https://mangpumo.github.io/2022/12/07/%E6%95%B0%E7%BB%84-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/",
            "title": "数组_二分查找",
            "date_published": "2022-12-07T15:37:29.000Z",
            "content_html": "<h1 id=\"二分查找\"><a class=\"anchor\" href=\"#二分查找\">#</a> 二分查找</h1>\n<h2 id=\"例题\"><a class=\"anchor\" href=\"#例题\">#</a> 例题</h2>\n<p>LEETCODE 704. 二分查找</p>\n<h2 id=\"二分第一种写法\"><a class=\"anchor\" href=\"#二分第一种写法\">#</a> 二分第一种写法</h2>\n<p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，<strong>也就是 [left, right]</strong> （<strong>这个很重要非常重要</strong>）。<br>\n区间的定义这就决定了二分法的代码应该如何写，<strong>因为定义 * target</strong> 在 **[left, right]<strong> 区间</strong>，所以有如下两点：</p>\n<ul>\n<li>while (left &lt;= right) 要使用 &lt;= ，因为 left == right 是有意义的，所以使用 &lt;=</li>\n<li>if (nums [middle] &gt; target) right 要赋值为 middle - 1，因为当前这个 nums [middle] 一定不是 target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li>\n</ul>\n<p><strong>代码如下：</strong><br>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int search(int* nums, int numsSize, int target)&#123;</span><br><span class=\"line\">    int left = 0;</span><br><span class=\"line\">    int right = numsSize-1;</span><br><span class=\"line\">    //当left==right，区间[left, right]依然有效，所以用 &lt;=</span><br><span class=\"line\">    while(left &lt;= right)&#123;</span><br><span class=\"line\">    \t//防止两个int相加造成溢出，等同于相加除2</span><br><span class=\"line\">        int middle = left+(right-left)/2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(nums[middle] &gt; target)&#123;</span><br><span class=\"line\">            right = middle-1;//middle一定不是要找的数，所以找他前面一位</span><br><span class=\"line\">        &#125;else if(nums[middle] &lt; target)&#123;</span><br><span class=\"line\">            left = middle+1;//同上</span><br><span class=\"line\">        &#125;else&#123;//nums[middle] == target</span><br><span class=\"line\">            return middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;   //未找到下标，返回-1</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"二分第二种写法\"><a class=\"anchor\" href=\"#二分第二种写法\">#</a> 二分第二种写法</h2>\n<p>如果说定义 target 是在一个在左闭右开的区间里，也就是 [left, right) ，那么二分法的边界处理方式则截然不同。</p>\n<p>有如下两点：</p>\n<ul>\n<li>while (left &lt; right)，这里使用 &lt; , 因为 left == right 在区间 [left, right) 是没有意义的</li>\n<li>if (nums [middle] &gt; target) right 更新为 middle，因为当前 nums [middle] 不等于 target，去左区间继续寻找，而寻找区间是左闭右开区间，所以 right 更新为 middle，即：下一个查询区间不会去比较 nums [middle]</li>\n</ul>\n<p>在数组：1,2,3,4,7,9,10 中查找元素 2，如图所示：<strong>（注意和方法一的区别）</strong></p>\n<p><strong>代码如下：</strong></p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int search(int* nums, int numsSize, int target)&#123;</span><br><span class=\"line\">    int left = 0;</span><br><span class=\"line\">    int right = numsSize;//看不同</span><br><span class=\"line\">    while(left &lt; right)&#123;//定义target在左闭右开的区间里，即：[left, right)</span><br><span class=\"line\">    \t//==时无意义，会越界</span><br><span class=\"line\">        int middle = left+(right-left)/2;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(nums[middle] &gt; target)&#123;</span><br><span class=\"line\">            right = middle;//开区间，不会取到middle</span><br><span class=\"line\">        &#125;else if(nums[middle] &lt; target)&#123;</span><br><span class=\"line\">            left = middle+1;//前闭，所以会取到middle+1</span><br><span class=\"line\">        &#125;else&#123;// nums[middle] == target</span><br><span class=\"line\">            return middle;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;\t//未找到下标，返回-1</span><br><span class=\"line\">        return -1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/07/%E6%9D%82%E8%B0%88-%E7%A9%BA%E9%97%B4%E6%8D%A2%E6%97%B6%E9%97%B4/",
            "url": "https://mangpumo.github.io/2022/12/07/%E6%9D%82%E8%B0%88-%E7%A9%BA%E9%97%B4%E6%8D%A2%E6%97%B6%E9%97%B4/",
            "title": "杂谈_空间换时间",
            "date_published": "2022-12-07T14:23:08.000Z",
            "content_html": "<h1 id=\"空间换时间样例\"><a class=\"anchor\" href=\"#空间换时间样例\">#</a> 空间换时间样例</h1>\n<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>比较懒，不想写太多，就整一个样例，统计字母串里出现次数最多的字母</p>\n<h2 id=\"优化前\"><a class=\"anchor\" href=\"#优化前\">#</a> 优化前</h2>\n<p>两层循环遍历字母串数组，统计出现最多次数字母的次数；<br>\n暴力算法就是两层循环枚举出现次数最多的字母；<br>\n显然时间复杂度太高，运算时间过长非常容易超时；<br>\n所以这里我们用空间换时间使用一个统计次数的数组，只需要遍历一次就可以了，时间复杂度只用 O (n)</p>\n<p><strong>代码如下</strong></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**找一串字母出现次数最多的字母**/</span><br><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tint max=0;</span><br><span class=\"line\">\tchar ans;</span><br><span class=\"line\">\tint record[26] = &#123;0&#125;;</span><br><span class=\"line\">\tchar arr[1000];</span><br><span class=\"line\">\tgets(arr);</span><br><span class=\"line\">\tint n = strlen(arr);</span><br><span class=\"line\">\tfor(int i=0; i&lt;n; i++)&#123;</span><br><span class=\"line\">\t\trecord[arr[i]-&#x27;a&#x27;]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfor(int i=0; i&lt;26; i++)&#123;</span><br><span class=\"line\">\t\tif(record[i] &gt; max)&#123;</span><br><span class=\"line\">\t\t\tmax = record[i];</span><br><span class=\"line\">\t\t\tans = i+&#x27;a&#x27;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tprintf(&quot;%c %d\\n&quot;,ans,max);</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/06/XTUOJ-1114%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F/",
            "url": "https://mangpumo.github.io/2022/12/06/XTUOJ-1114%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%80%86%E5%BA%8F/",
            "title": "XTUOJ_1114字符串逆序",
            "date_published": "2022-12-06T15:28:04.000Z",
            "content_html": "<h1 id=\"字符串逆序\"><a class=\"anchor\" href=\"#字符串逆序\">#</a> 字符串逆序</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>给你一个字符串，请将其第 K 个字符开始的长度为 L 的子串进行逆序。</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>有多组样例，第一行是一个整数，表示有多少个样例。每个样例占两行，第一行是个字符串，字符串全部由英文小写字符组成，长度不超过 200。第二行是两个整数 K 和 L，K 从 1 开始计数，K+L-1 不会超过字符串长度。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个字符串逆序以后的字符串结果。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">abcabc</span><br><span class=\"line\">1 2</span><br><span class=\"line\">abcabc</span><br><span class=\"line\">2 5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bacabc</span><br><span class=\"line\">acbacb</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    char str[203];</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">    while(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        scanf(&quot; %s&quot;,&amp;str);</span><br><span class=\"line\">        int k,l;</span><br><span class=\"line\">        scanf(&quot;%d %d&quot;,&amp;k,&amp;l);</span><br><span class=\"line\">        int len = strlen(str);</span><br><span class=\"line\">        int i;</span><br><span class=\"line\">        for(i=0;i&lt;k-1;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%c&quot;,str[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i=k+l-2;i&gt;=k-1;i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%c&quot;,str[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(i=k+l-1;i&lt;len;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;%c&quot;,str[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/06/XTUOJ-1109%E5%85%B1%E5%90%8C%E7%9A%84%E5%89%8D%E7%BC%80/",
            "url": "https://mangpumo.github.io/2022/12/06/XTUOJ-1109%E5%85%B1%E5%90%8C%E7%9A%84%E5%89%8D%E7%BC%80/",
            "title": "XTUOJ_1109共同的前缀",
            "date_published": "2022-12-06T15:20:26.000Z",
            "content_html": "<h1 id=\"共同的前缀\"><a class=\"anchor\" href=\"#共同的前缀\">#</a> 共同的前缀</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>给你 K 个字符串，请求出它们的最长公共前缀。 输入 第一行是一个整数 N，表示测试样例的个数。 每个测试样例的第一行是一个整数 K（2 &lt;= k &lt;= 20），表示有多少个字符串；以后每行是一个字符串，每个字符串的长度不超过 200 个字符。 输出 每行输出一个样例的结果。先输出 “Case #:”，其中’#’为样例的序号（从 1 开始），冒号为英文冒号，后接一个空格；然后是对应样例的结果。如果没有公共前缀，则无需输出前缀，但 Case 信息仍需要输出。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">ACD</span><br><span class=\"line\">ACDEF</span><br><span class=\"line\">ACDFE</span><br><span class=\"line\">2</span><br><span class=\"line\">ABC</span><br><span class=\"line\">BCD</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Case 1: ACD</span><br><span class=\"line\">Case 2: </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;string.h&gt;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int top;</span><br><span class=\"line\">    scanf(&quot;%d&quot;, &amp;top);</span><br><span class=\"line\">    char original[202] = &#123; 0 &#125;;</span><br><span class=\"line\">    char alphabet[202] = &#123; 0 &#125;;</span><br><span class=\"line\">    char same[202] = &#123; 0 &#125;;</span><br><span class=\"line\">    int cnt = 1;</span><br><span class=\"line\">    while (top--) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int length;</span><br><span class=\"line\">        scanf(&quot;%d&quot;, &amp;length);</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        scanf(&quot;%s&quot;, &amp;original, 200);</span><br><span class=\"line\">        </span><br><span class=\"line\">        length -= 2;</span><br><span class=\"line\">        int resemble = 200;</span><br><span class=\"line\">        scanf(&quot;%s&quot;, &amp;alphabet, 200);</span><br><span class=\"line\">        for (int i = 0; i &lt; 200; i++) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if (original[i] != alphabet[i]) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                resemble = i;</span><br><span class=\"line\">                break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                same[i] = alphabet[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        memset(alphabet, 0, sizeof(char));</span><br><span class=\"line\">        while (length--) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            scanf(&quot;%s&quot;, &amp;alphabet, 200);</span><br><span class=\"line\">            for (int i = 0; i &lt;= resemble; i++) &#123;</span><br><span class=\"line\">                if (same[i] != alphabet[i]) </span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    resemble = i;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            memset(alphabet, 0, sizeof(char));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;Case %d: &quot;, cnt++);</span><br><span class=\"line\">        for (int i = 0; i &lt; resemble; i++) </span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            if(same[i] != 0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">            printf(&quot;%c&quot;, same[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/06/XTUOJ-1108A-B/",
            "url": "https://mangpumo.github.io/2022/12/06/XTUOJ-1108A-B/",
            "title": "XTUOJ_1108A+B",
            "date_published": "2022-12-06T15:16:18.000Z",
            "content_html": "<h1 id=\"ab\"><a class=\"anchor\" href=\"#ab\">#</a> a+b</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>请计算 a+b，但 a 和 b 是按不同的进制给出的。进制最小为 2 进制，最大为 62 进制，其中使用 A-Z 依次表示 10 到 35，a-z 表示 36-61。请写出 a+b 的结果，结果按十进制输出。 输入 第一行是一个整数 N，表示有多少个测试样例，以后每行是一个样例，每行是 4 个部分，分别为 a 的值，a 的进制，b 的值，b 的进制。其中值都是用一个字符串表示，进制都是一个整数。4 个部分之间用一个空格隔开，保证输入的合法，a、b 和 a+b 的值都在 - 2<sup>31 到 2</sup>31-1 之间。 输出 每行输出一个样例的结果。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">1000 2 1F 16</span><br><span class=\"line\">-1 10 20 3</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">39</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">int main() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n,a,i,min = 201,j,temp,zdy = 1,num;</span><br><span class=\"line\">    char str[22][202];</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">    while(n--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        min = 201;</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;a);</span><br><span class=\"line\">        num = 0;</span><br><span class=\"line\">        for(i = 0;i &lt; a;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            scanf(&quot;%s&quot;,str[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;Case %d: &quot;,zdy);</span><br><span class=\"line\">        zdy++;</span><br><span class=\"line\">        for(i=0;i&lt;a;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">               if(strlen(str[i])&lt; min)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                min = strlen(str[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for(j = 0;j &lt; min;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            for(i = 0;i &lt; a-1;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                if(str[i][j]==str[i+1][j])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    continue;</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">                else</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    num = 1;</span><br><span class=\"line\">                    break;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(num==0)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                   printf(&quot;%c&quot;,str[0][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/12/02/XTUOJ-1105%E5%88%86%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/12/02/XTUOJ-1105%E5%88%86%E6%95%B0%E5%8A%A0%E5%87%8F%E6%B3%95/",
            "title": "XTUOJ_1105分数加减法",
            "date_published": "2022-12-02T04:39:39.000Z",
            "content_html": "<h1 id=\"分数加减法\"><a class=\"anchor\" href=\"#分数加减法\">#</a> 分数加减法</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>给你两个分数，请计算两者和及差。 输入 第一行是一个整数 K，表示样例的个数。以后每行一个样例，每行 4 个正整数，a、b、c、d，即计算分数 a/b 与 c/d 的和、差。4 个整数都不超过 10,000。 输出 每行输出一个样例的结果，先输出和，后输出差。如果结果的值为整数，那么只需要输出整数，如果结果的值为分数，需要输出 x/y 的形式，并保证 x,y 互质。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\">1 2 1 2</span><br><span class=\"line\">2 3 1 3</span><br><span class=\"line\">1 8 5 8</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0</span><br><span class=\"line\">1 1/3</span><br><span class=\"line\">3/4 -1/2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int gcd(int a,int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a%b == 0)</span><br><span class=\"line\">        return b;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return gcd(b,a%b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int K;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">    while(K--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int a1,a2,b1,b2;</span><br><span class=\"line\">        int fm=0;</span><br><span class=\"line\">        int k=1;</span><br><span class=\"line\">        int gys=0;</span><br><span class=\"line\">        int fzh=0,fzc=0,m,n;</span><br><span class=\"line\">        scanf(&quot;%d %d %d %d&quot;,&amp;a1,&amp;a2,&amp;b1,&amp;b2);</span><br><span class=\"line\">        fm = a2*b2;//通分</span><br><span class=\"line\">        fzh = a1*b2+b1*a2;</span><br><span class=\"line\">        fzc = a1*b2-b1*a2;</span><br><span class=\"line\">        if(fzh%fm == 0)</span><br><span class=\"line\">        &#123;//整数</span><br><span class=\"line\">            printf(&quot;%d &quot;,fzh/fm);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;//约分</span><br><span class=\"line\">            n = fzh;</span><br><span class=\"line\">            m = fm;</span><br><span class=\"line\">            gys = gcd(n,m);</span><br><span class=\"line\">            fzh /= gys;</span><br><span class=\"line\">            fm /= gys;</span><br><span class=\"line\">            printf(&quot;%d/%d &quot;,fzh,fm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        if(fzc &lt; 0)</span><br><span class=\"line\">        &#123;//方便公约数</span><br><span class=\"line\">            k = -1;</span><br><span class=\"line\">            fzc = -fzc;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fm = a2*b2;//在上一步已经变化了，这里需要重新赋值</span><br><span class=\"line\">        if(fzc%fm == 0)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            fzc = k*fzc;</span><br><span class=\"line\">            printf(&quot;%d\\n&quot;,fzc/fm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n = fzc;</span><br><span class=\"line\">            m = fm;</span><br><span class=\"line\">            gys = gcd(n,m);</span><br><span class=\"line\">            fzc = k*fzc;</span><br><span class=\"line\">            fzc /= gys;</span><br><span class=\"line\">            fm /= gys;</span><br><span class=\"line\">            printf(&quot;%d/%d\\n&quot;,fzc,fm);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/11/26/XTUOJ-1331%E5%AF%86%E7%A0%81/",
            "url": "https://mangpumo.github.io/2022/11/26/XTUOJ-1331%E5%AF%86%E7%A0%81/",
            "title": "XTUOJ_1331密码",
            "date_published": "2022-11-26T01:49:49.000Z",
            "content_html": "<h1 id=\"password\"><a class=\"anchor\" href=\"#password\">#</a> Password</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>Eric 喜欢使用数字 1,2,3,4 作为密码，而且他有个怪癖，相邻数字不能相同，且相差不能超过 2。当然只用数字做密码，会比较弱，Eric 想知道当长度为 n 时，这样的密码有多少种？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 T (1≤T≤45), 表示样例的个数。 每行一个样例，为整数 n (1≤T≤45)。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">10</span><br><span class=\"line\">26</span><br><span class=\"line\">66</span><br><span class=\"line\">170</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h.&gt;</span><br><span class=\"line\">__int64 arr[46];</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    arr[1] = 4;</span><br><span class=\"line\">    arr[2] = 10;</span><br><span class=\"line\">    __int64 a=2,b=3;</span><br><span class=\"line\">    for(int i=3;i&lt;=45;i++)</span><br><span class=\"line\">    &#123;    //打表，</span><br><span class=\"line\">    __int64 temp1,temp2;</span><br><span class=\"line\">    temp1 = a;</span><br><span class=\"line\">    temp2 = b;</span><br><span class=\"line\">    arr[i] = temp2*2*2+(temp1*2+temp2)*2;</span><br><span class=\"line\">    a = temp2*2;</span><br><span class=\"line\">    b = temp1*2+temp2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int K,m;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">    while(K--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;m);//不要乱加空格</span><br><span class=\"line\">        printf(&quot;%I64d\\n&quot;,arr[m]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/11/26/XTUOJ-1194Recipient/",
            "url": "https://mangpumo.github.io/2022/11/26/XTUOJ-1194Recipient/",
            "title": "XTUOJ_1194Recipient",
            "date_published": "2022-11-26T01:43:11.000Z",
            "content_html": "<h1 id=\"recipient\"><a class=\"anchor\" href=\"#recipient\">#</a> Recipient</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>快递小哥每天都辛苦的送快递，今天他需要送 N 份快递给 N 个收件人，第 i 份快递需要送给第 i 个收件人。 请问其中发生恰好 K 个送错了的情况数是多少？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>存在多样例。 每行输入两个整数 N 和 K，1≤N≤1000,0≤K≤N。 如果两个都为 0，则表示输入结束，这个样例不需要处理。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果，因为数值会比较大，所有结果需要对 10^9+7 取模。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1</span><br><span class=\"line\">2 1</span><br><span class=\"line\">3 2</span><br><span class=\"line\">1000 1000</span><br><span class=\"line\">0 0</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">3</span><br><span class=\"line\">37043040</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">const int mo = 1000000007;</span><br><span class=\"line\">//#define ll __int64</span><br><span class=\"line\">__int64 d[1001];</span><br><span class=\"line\">__int64 c[1001][1001];</span><br><span class=\"line\">//务必注意数据类型</span><br><span class=\"line\"></span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    //求错排</span><br><span class=\"line\">    d[2] = 1;</span><br><span class=\"line\">    int i,j;</span><br><span class=\"line\">    for(i=3; i&lt;1001; i++)</span><br><span class=\"line\">    &#123;//芝士一个公式</span><br><span class=\"line\">        d[i] = (i-1)*(d[i-1]+d[i-2])%mo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //求组合数</span><br><span class=\"line\">    for(i=1; i&lt;1001; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c[i][0] = c[i][i] = 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(i=2; i&lt;1001;i++)</span><br><span class=\"line\">        for(j=1; j&lt;i; j++)</span><br><span class=\"line\">            c[i][j] = (c[i-1][j-1]+c[i-1][j])%mo;</span><br><span class=\"line\">            //芝士公式，杨辉三角</span><br><span class=\"line\">    int N,K;</span><br><span class=\"line\">    __int64 ans;//注意数据类型</span><br><span class=\"line\">    while(scanf(&quot;%d %d&quot;,&amp;N,&amp;K) != EOF&amp;&amp;N+K != 0)</span><br><span class=\"line\">    &#123;//N和K都为0退出</span><br><span class=\"line\">        if(K == 0)//if(!K)</span><br><span class=\"line\">            printf(&quot;1\\n&quot;);//特殊情况特殊考虑</span><br><span class=\"line\">        else</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = (d[K]*c[N][K])%mo;</span><br><span class=\"line\">            printf(&quot;%I64d\\n&quot;,ans);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/11/26/XTUOJ-1238BinaryString/",
            "url": "https://mangpumo.github.io/2022/11/26/XTUOJ-1238BinaryString/",
            "title": "XTUOJ_1238BinaryString",
            "date_published": "2022-11-26T01:34:54.000Z",
            "content_html": "<h1 id=\"binary-string\"><a class=\"anchor\" href=\"#binary-string\">#</a> Binary String</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>求 n 位 01 串含连续至少 2 个 1 的串的个数。</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 K（K≤10000），表示样例的个数。 每行样例是一个整数 n (1≤1000000)。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果，因为数目可能很大，请对 10^9+7 取模。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">1000000</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">1</span><br><span class=\"line\">3</span><br><span class=\"line\">8</span><br><span class=\"line\">782550144</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">const int mo = 1000000007;</span><br><span class=\"line\">int a[1000001];</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int K;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">    a[1] = 0;</span><br><span class=\"line\">    a[2] = 1;</span><br><span class=\"line\">    int i,k=1;</span><br><span class=\"line\">    for(i=3; i&lt;=1000000; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        k *= 2;//规律</span><br><span class=\"line\">        if(k&gt;mo)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k %= mo;//数据可能很大，注意取模</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a[i] = ((a[i-1]+a[i-2])%mo+k)%mo;</span><br><span class=\"line\">    &#125;    //随时注意取模</span><br><span class=\"line\">    while(K--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int n;</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">        printf(&quot;%d\\n&quot;,a[n]);//下标对应的</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/11/26/XTUOJ-1270%E6%95%B0%E4%BD%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/11/26/XTUOJ-1270%E6%95%B0%E4%BD%8D%E4%B8%8D%E5%90%8C%E7%9A%84%E6%95%B0/",
            "title": "XTUOJ_1270数位不同的数",
            "date_published": "2022-11-26T01:27:55.000Z",
            "content_html": "<h1 id=\"数位不同的数\"><a class=\"anchor\" href=\"#数位不同的数\">#</a> 数位不同的数</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>数位不同的数是指所有数位上的数码都不一样的数，比如 “123” 三个数码 1,2,3，都不一样，所以是数位不同的数；但是 “1232” 中有两个相同的数码 2，所以不是。请写一个程序，计算第几个符合条件的数是什么？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>每行输入一个整数 n (1≤n≤8877691)。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个整数，为对应样例的结果。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">10</span><br><span class=\"line\">100</span><br><span class=\"line\">8877691</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">9</span><br><span class=\"line\">120</span><br><span class=\"line\">9876543210</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h.&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">typedef __int64 ll;</span><br><span class=\"line\">ll sq[8877700];</span><br><span class=\"line\">int mark[10];</span><br><span class=\"line\">int temp[32];//答案暂存器</span><br><span class=\"line\">int count=2;//表[1]为0</span><br><span class=\"line\">//dfs首位为0会直接跳过，但是01存在。</span><br><span class=\"line\">void dfs(int deep,int maxdeep)//深度优先搜索</span><br><span class=\"line\">&#123;//经常用于搜索可行解</span><br><span class=\"line\">    if(deep == maxdeep)</span><br><span class=\"line\">    &#123;//当深度到最深时存储答案并跳出</span><br><span class=\"line\">        ll output = 0;</span><br><span class=\"line\">        for(int i=0; i&lt;deep; i++)</span><br><span class=\"line\">        &#123;//temp存放每一位数字</span><br><span class=\"line\">            output *= 10;</span><br><span class=\"line\">            output += temp[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sq[count] = output;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        return;//返回函数调用处</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    for(int i=0; i&lt;=9; i++)</span><br><span class=\"line\">    &#123;//判断数字是否被用过</span><br><span class=\"line\">        if(mark[i] != 1)</span><br><span class=\"line\">        &#123;//不等于1，说明没被用过</span><br><span class=\"line\">            if(deep == 0&amp;&amp;i ==0)</span><br><span class=\"line\">            &#123;//首位为0直接跳过</span><br><span class=\"line\">                continue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mark[i] = 1;//标记该数字已经被用过</span><br><span class=\"line\">            temp[deep] = i;//存储目标数字的这一位</span><br><span class=\"line\">            dfs(deep+1,maxdeep);//继续深度搜索</span><br><span class=\"line\">            mark[i] = 0;//用过后擦除，使判断继续</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/11/26/XTUOJ-12570%E5%92%8C1/",
            "url": "https://mangpumo.github.io/2022/11/26/XTUOJ-12570%E5%92%8C1/",
            "title": "XTUOJ_12570和1",
            "date_published": "2022-11-26T01:23:45.000Z",
            "content_html": "<h1 id=\"0和1\"><a class=\"anchor\" href=\"#0和1\">#</a> 0 和 1</h1>\n<h2 id=\"题目描述\"><a class=\"anchor\" href=\"#题目描述\">#</a> 题目描述</h2>\n<p>一个 01 字符串，长度是 n，其中 1 比 0 多 m 个，请问不同的排列方案数有多少个？</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>第一行是一个整数 K，表示样例的个数。 以后每行两个整数 n 和 m，1≤n≤33,0≤m≤n。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个样例的结果。</p>\n<h2 id=\"样例输入\"><a class=\"anchor\" href=\"#样例输入\">#</a> 样例输入</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">2 0</span><br><span class=\"line\">2 1</span><br><span class=\"line\">3 0</span><br><span class=\"line\">3 1</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"样例输出\"><a class=\"anchor\" href=\"#样例输出\">#</a> 样例输出</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">0</span><br><span class=\"line\">0</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"线索\"><a class=\"anchor\" href=\"#线索\">#</a> 线索</h2>\n<p>第一个样例为 &quot;01&quot; 和 &quot;10&quot;；第二、三个样例不存在这样的串；第四个样例为 &quot;011&quot;,&quot;101&quot;,&quot;110&quot;</p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;math.h&gt;</span><br><span class=\"line\">//组合数公式：C(n,m) = C(n-1,m-1)+C(n,m-1)</span><br><span class=\"line\">//C(0,i)=C(i,i)=0</span><br><span class=\"line\">//阶乘：C(n,m) = m!/(n!*(m-n)!)</span><br><span class=\"line\">double fact(int a)//求阶乘函数</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(a == 0)</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    else</span><br><span class=\"line\">        return a*fact(a-1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int K;</span><br><span class=\"line\">    scanf(&quot;%d&quot;,&amp;K);</span><br><span class=\"line\">    while(K--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        int n,m,n1,m1;</span><br><span class=\"line\">        double ans = 0;</span><br><span class=\"line\">        scanf(&quot;%d %d&quot;,&amp;n,&amp;m);//1比0多m个，</span><br><span class=\"line\">        //0有(m+n)/2个，1有(n-m)/2个；</span><br><span class=\"line\">        n1 = (m+n)/2;</span><br><span class=\"line\">        m1 = (n-m)/2;</span><br><span class=\"line\">        if((n1+m1) == n)//判断存不存在这样的串</span><br><span class=\"line\">        &#123;//阶乘公式：C(n,m) = m!/(n!*(m-n)!)</span><br><span class=\"line\">            ans = fact(n)/(fact(n1)*fact(m1));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;%.0lf\\n&quot;,ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/11/26/XTUOJ-1090%E7%BB%84%E5%90%88%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/11/26/XTUOJ-1090%E7%BB%84%E5%90%88%E6%95%B0/",
            "title": "XTUOJ_1090组合数",
            "date_published": "2022-11-26T01:17:55.000Z",
            "content_html": "<h1 id=\"组合数\"><a class=\"anchor\" href=\"#组合数\">#</a> 组合数</h1>\n<h2 id=\"description\"><a class=\"anchor\" href=\"#description\">#</a> Description</h2>\n<p>2<sup>n=C (n,0)+C (n,1)+…+C (n,n)。其中</sup>表示幂，C (n,x) 表示组合数，即 C (n,x)=n!/（(n-x)!x!）。现在给你 n（0&lt;=n&lt;=33），要你输出 2^n 的组合数之和的表达式</p>\n<h2 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h2>\n<p>每行一个整数 n，如果 n 为负数则输入结束。</p>\n<h2 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h2>\n<p>每行输出一个表达式，表达式格式形似为 2^n=C (n,0)+C (n,1)+…+C (n,n)。</p>\n<h2 id=\"sample-input\"><a class=\"anchor\" href=\"#sample-input\">#</a> Sample Input</h2>\n<p>2</p>\n<p>3</p>\n<p>-1</p>\n<h2 id=\"sample-output\"><a class=\"anchor\" href=\"#sample-output\">#</a> Sample Output</h2>\n<p>2^2=1+2+1</p>\n<p>2^3=1+3+3+1</p>\n<h2 id=\"参考源码\"><a class=\"anchor\" href=\"#参考源码\">#</a> 参考源码</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">#include &lt;string.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int n;</span><br><span class=\"line\">    int i,j;</span><br><span class=\"line\">    int tri[40][40];</span><br><span class=\"line\">    memset(tri,0,sizeof(tri));//务必初始化，否则结果乱码。</span><br><span class=\"line\">    tri[0][0] = 1;</span><br><span class=\"line\">    for(i=1;i&lt;=33;i++)</span><br><span class=\"line\">    &#123;//杨辉三角打表算组合数。</span><br><span class=\"line\">        tri[i][0] = 1;</span><br><span class=\"line\">        tri[i][i] = 1;</span><br><span class=\"line\">        for(j=1;j&lt;=i;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tri[i][j] = tri[i-1][j]+tri[i-1][j-1]; //杨辉三角规律</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(scanf(&quot;%d&quot;,&amp;n) != EOF &amp;&amp; n&gt;=0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        printf(&quot;2^%d=1&quot;,n);//为了输出+1，提前输出一个1</span><br><span class=\"line\">        for(j=1;j&lt;=n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            printf(&quot;+%d&quot;,tri[n][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        printf(&quot;\\n&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n",
            "tags": []
        }
    ]
}