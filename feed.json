{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "漏洞不在机器，漏洞在人",
    "icon": "https://mangpumo.github.io/images/favicon.ico",
    "description": "欢迎来到 Mang Pumo 的个人博客!",
    "home_page_url": "https://MangPumo.github.io",
    "items": [
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95_%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E6%B3%95/",
            "title": "C语言_排序算法_选择排序法",
            "date_published": "2022-10-19T04:41:26.000Z",
            "content_html": "<h1 id=\"c语言选择排序法\"><a class=\"anchor\" href=\"#c语言选择排序法\">#</a> C 语言选择排序法</h1>\n<h2 id=\"原理技术要点\"><a class=\"anchor\" href=\"#原理技术要点\">#</a> 原理 &amp; 技术要点</h2>\n<p>选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到 a [0] 中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到 a [1] 中，a [1] 中的数字仅大于 a [0]，依此类推，即可实现排序。</p>\n<h2 id=\"规则\"><a class=\"anchor\" href=\"#规则\">#</a> 规则</h2>\n<p>1. 选择排序一共有 数组大小 - 1 轮排序<br>\n 2. 每一轮排序，又是一个循环<br>\n 3. 先假定当前这个数是最小数<br>\n 4. 然后和后面的每个数进行比较，如果发现有比当前数更小的数，就重新确定最小数，并得到下标<br>\n 5. 当遍历到数组的最后时，就得到本轮最小数和下标<br>\n 6. 交换</p>\n<h2 id=\"存储状态演示\"><a class=\"anchor\" href=\"#存储状态演示\">#</a> 存储状态演示</h2>\n<p 0 1 2 3 4 5 6 7 8 9>*<strong> 大括号内为无序区，大括号外为有序区</strong><br>\n初始序列：</p>\n<p 1 2 3 4 5 6 7 8 9>第 1 趟：2 与 0 交换：0</p>\n<p 2 3 4 5 6 7 8 9>第 2 趟：0 不动，4 与 1 交换：0 1</p>\n<p 3 4 5 6 7 8 9>第 3 趟：7 与 2 交换：0 1 2</p>\n<p 4 5 6 7 8 9>第 4 趟：4 与 3 交换：0 1 2 3</p>\n<p 5 6 7 8 9>第 5 趟：6 与 4 交换：0 1 2 3 4</p>\n<p 6 7 8 9>第 6 趟：9 与 5 交换：0 1 2 3 4 5</p>\n<p 7 8 9>第 7 趟：8 与 6 交换：0 1 2 3 4 5 6</p>\n<p 8 9>第 8 趟：8 与 7 交换：0 1 2 3 4 5 6 7</p>\n<p>第 9 趟：排序完成</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j,t,a[11];    //定义变量及数组为基本整型</span><br><span class=\"line\">    for(i=1;i&lt;11;i++)</span><br><span class=\"line\">        scanf(&quot;%d&quot;,&amp;a[i]);    //从键盘中输入要排序的10个数字</span><br><span class=\"line\">    for(i=1;i&lt;=9;i++)</span><br><span class=\"line\">        for (j=i+1;j&lt;=10;j++)</span><br><span class=\"line\">            if(a[i]&gt;a[j])    //如果前一个数比后一个数大，则利用中间变量t实现两值互换</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                t=a[i];</span><br><span class=\"line\">                a[i]=a[j];</span><br><span class=\"line\">                a[j]=t;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">    for(i=1;i&lt;=10;i++)</span><br><span class=\"line\">        printf(&quot;%5d&quot;, a[i]);    //输出排序后的数组</span><br><span class=\"line\">    printf(&quot;\\n&quot;);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h2>\n<p>input:<br>\n526 36 2 369 56 45 78 92 125 52<br>\noutput:<br>\n2 36 45 52 56 78 92 125 369 526</p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "url": "https://mangpumo.github.io/2022/10/19/C%E8%AF%AD%E8%A8%80_%E8%BE%97%E8%BD%AC%E7%9B%B8%E9%99%A4%E6%B3%95%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0/",
            "title": "C语言_辗转相除法两种方式两个用处",
            "date_published": "2022-10-19T02:17:51.000Z",
            "content_html": "<h1 id=\"辗转相除法\"><a class=\"anchor\" href=\"#辗转相除法\">#</a> 辗转相除法</h1>\n<h2 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h2>\n<p>辗转相除法，被称为欧几里得（Euclidean）算法，是求最大公约数的算法。</p>\n<h2 id=\"证明\"><a class=\"anchor\" href=\"#证明\">#</a> 证明</h2>\n<p>设 b = aq + r， (a,b) 为 a，b 的最大公约数。<br>\n则 a % (a,b) = 0; b % (a,b) = 0,<br>\n 因为 (a 和 b 的约数) % (a,b) = 0,<br>\n 所以 (b - aq) % (a,b) = 0<br>\n 即 r % (a,b) = 0<br>\n 因为 a % (a,b) = 0, r % (a,b) = 0<br>\n 所以 (a,r) % (a,b) = 0 (最大公约数一定被公约数整除）<br>\n又因为 a % (a,r) = 0, r % (a,r) = 0, b = aq+r<br>\n 所以 (aq + r) % (a,r) = 0<br>\n 即 b % （a,r) = 0<br>\n 因为 a % （a,r) = 0<br>\nb % (a,r) = 0<br>\n 所以<br>\n (a,b) % (a,r) = 0<br>\n 所以<br>\n (a,b) = (a,r)</p>\n<p><strong>证明过程来自百度，大体了解即可！</strong></p>\n<h2 id=\"具体做法\"><a class=\"anchor\" href=\"#具体做法\">#</a> 具体做法</h2>\n<p>用较小数除较大数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是 0 为止。最后的除数即为两个数的最大公约数。</p>\n<h2 id=\"代码实现\"><a class=\"anchor\" href=\"#代码实现\">#</a> 代码实现</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">long long int GCD(long long int n,long long int m)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    long long int t;</span><br><span class=\"line\">    if(n&lt;m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        t=n,n=m,m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while(t=n%m,t&gt;0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        n=m;</span><br><span class=\"line\">        m=t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return m;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 自写 GCD 函数</strong></p>\n<h2 id=\"进阶实现递归\"><a class=\"anchor\" href=\"#进阶实现递归\">#</a> 进阶实现（递归）</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int GCD(int x,int y)//公因数 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if(y==0)</span><br><span class=\"line\">\treturn x;</span><br><span class=\"line\">    else </span><br><span class=\"line\">\treturn GCD(y,x%y);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><br>\n<strong> 通过递归精简代码</strong></p>\n<h2 id=\"辗转相除法求最小公倍数\"><a class=\"anchor\" href=\"#辗转相除法求最小公倍数\">#</a> 辗转相除法求最小公倍数</h2>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ans = a*b/m;</span><br></pre></td></tr></table></figure><br>\n 其中 ans 为最小公倍数，a,b 为输入的两个数，m 为两个数字的最大公因数。<br>\n<strong>原理很简单，两个数的最小公倍数等于两个数的乘积除以最大公约数（证明过程略）。</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/",
            "url": "https://mangpumo.github.io/2022/10/17/CTF_%E5%AF%86%E7%A0%81%E5%AD%A6%E6%96%B9%E5%90%91%E5%B8%B8%E7%94%A8%E5%AF%86%E7%A0%81%E7%9B%AE%E5%BD%95/",
            "title": "CTF_密码学方向常用密码目录",
            "date_published": "2022-10-17T05:58:51.000Z",
            "content_html": "<h1 id=\"ctf密码学\"><a class=\"anchor\" href=\"#ctf密码学\">#</a> CTF 密码学</h1>\n<p><strong>本篇博客将列举 CTF 中常用密码供参考</strong></p>\n<blockquote>\n<p>常见编码</p>\n<blockquote>\n<p>ASCII 编码<br>\n shellcode 编码<br>\n Quoted-printable 编码<br>\n XXencode 编码<br>\n URL 编码<br>\n Unicode 编码<br>\n Escape/Unescape 编码<br>\n HTML 实体编码<br>\n MD5 算法<br>\n敲击码（Tap code)<br>\n 摩尔斯电码（Morse Code)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>换位加密</p>\n<blockquote>\n<p>栅栏密码（Rail-fence Cipher)<br>\n 曲路密码（Curve Cipher)<br>\n 列移位密码（Columnar Transposition Cipher)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>替换加密</p>\n<blockquote>\n<p>埃特巴什码（Atbash Cipher)<br>\n 凯撒密码（Caesar Cipher)<br>\nROT/13/18/47<br>\n 简单换位密码（Simple Substitution Cipher)<br>\n 希尔密码 (Hill Cipher)<br>\n 猪圈密码 (Pigpen Cipher)<br>\n 波利比奥斯方阵密码（Polybius Square Cipher)<br>\n 夏多密码 (曲折加密)<br>\n 普莱菲尔密码（Playfair Cipher)<br>\n 维吉尼亚密码（Vigenere Cipher)<br>\n 自动密钥密码 (Autokey Cipher)<br>\n 博福特密码 (Beaufort Cipher)<br>\n 滚动密钥密码（Running Key Cipher)<br>\n Porta 密码 (Porta Cipher)<br>\n 同音替换密码（Homophoic Substitution Cipher)<br>\n 仿射密码（Affine Cipher)<br>\n 培根密码（Baconian Cipher)<br>\n ADFGX 和 ADFGVX 密码（ADFG/VX Cipher)<br>\n 双密码 (Bifid Cipher)<br>\n 三分密码（Trifid Cipher)<br>\n 四方密码（Four-Square Cipher)<br>\n 棋盘密码（Checkerboard Cipher)<br>\n 跨棋盘密码（Straddle Checkerboard Cipher)<br>\n 分组摩尔斯替换密码（Fractionated Morse Cipher)<br>\n Bazeries 密码（Bazeries Cipher)<br>\n Digrafid 密码（Digrafid Cipher)<br>\n 格朗普雷密码（Grandpre Cipher)<br>\n 盲文密码（Blind Cipher)<br>\n 键盘密码（Keyboard Cipher)</p>\n</blockquote>\n</blockquote>\n<hr>\n<blockquote>\n<p>代码混淆加密</p>\n<blockquote>\n<p>asp 混淆加密<br>\n php 混淆加密<br>\n css/js 混淆加密<br>\n VBScript.Encode 混淆加密<br>\n ppencode<br>\nrrencode<br>\njjencode/aaencode<br>\nJSfuck<br>\njother<br>\nbranfuck<br>\nuuencode</p>\n</blockquote>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://mangpumo.github.io/2022/10/16/hello-world/",
            "url": "https://mangpumo.github.io/2022/10/16/hello-world/",
            "title": "Hello World",
            "date_published": "2022-10-16T01:57:15.958Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<p><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}